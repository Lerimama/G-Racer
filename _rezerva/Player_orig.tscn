[gd_scene load_steps=23 format=2]

[ext_resource path="res://assets/tilesets/tileset_arena_elements.png" type="Texture" id=1]
[ext_resource path="res://assets/sprites/weapons/bullet.png" type="Texture" id=2]
[ext_resource path="res://assets/shaders/_zaloga/originali_uporabljanega/bolt_wiggle_texture.gdshader" type="Shader" id=3]
[ext_resource path="res://assets/shaders/_zaloga/originali_uporabljanega/bolt_shield_texture.gdshader" type="Shader" id=4]
[ext_resource path="res://assets/sprites/bolt/bolt.png" type="Texture" id=5]
[ext_resource path="res://assets/tilesets/atlas_hud.png" type="Texture" id=6]
[ext_resource path="res://assets/theme/main_theme.tres" type="Theme" id=7]

[sub_resource type="GDScript" id=121]
script/source = "extends Bolt
class_name Player


var player_name: String # za opredelitev statistike
var controller_profile: Dictionary

onready var player_profile: Dictionary = Pro.default_player_profiles[bolt_id]
onready var controller_profiles: Dictionary = Pro.default_controller_actions
onready var controller_profile_name: String = player_profile[\"controller_profile\"]
onready var controller_actions: Dictionary = controller_profiles[controller_profile_name]

onready var fwd_action: String = controller_actions[\"fwd_action\"]
onready var rev_action: String = controller_actions[\"rev_action\"]
onready var left_action: String = controller_actions[\"left_action\"]
onready var right_action: String = controller_actions[\"right_action\"]
onready var shoot_bullet_action: String = controller_actions[\"shoot_bullet_action\"]
onready var shoot_misile_action: String = controller_actions[\"shoot_misile_action\"]
onready var shoot_shocker_action: String = controller_actions[\"shoot_shocker_action\"]
onready var select_feat_action: String = controller_actions[\"select_feat_action\"]
	
	
func _input(event: InputEvent) -> void:
	
	if not bolt_active:
		return
	
	if Input.is_action_just_pressed(\"f\"):
		on_item_picked(\"BULLET\")
	# move
	if Input.is_action_pressed(fwd_action):
		engine_power = fwd_engine_power
	elif Input.is_action_pressed(rev_action):
		engine_power = - rev_engine_power
	else:			
		engine_power = 0
	
	# rotation
	rotation_dir = Input.get_axis(left_action, right_action) # +1, -1 ali 0
	# rotation_angle se računa na inputu ... rotation_dir * deg2rad(turn_angle)
	
	# shooting
	if Input.is_action_just_pressed(select_feat_action):
		select_feature()
#		shooting(\"bullet\")
	if Input.is_action_just_pressed(shoot_bullet_action):
		shooting(\"bullet\")
	if Input.is_action_just_released(shoot_misile_action):	
		shooting(\"misile\")
	if Input.is_action_just_released(shoot_shocker_action):	
		shooting(\"shocker\")
	if Input.is_action_just_released(\"pavza\"):	
		shield_loops_limit = Pro.bolt_profiles[bolt_type][\"shield_loops_limit\"] 
		activate_shield()


func _ready() -> void:
	
	add_to_group(Ref.group_players)
	
	# player setup
	player_name = player_profile[\"player_name\"]
	bolt_color = player_profile[\"player_color\"]
	bolt_sprite.modulate = bolt_color
	
	feat_selector.modulate.a = feat_selector_alpha

	
	

var feat_selector_alpha: float = 0.3			
onready var feat_selector: Node2D = $FeatSelector
onready var feat_selected: int = 0


func update_feature_selector():
	
	# postavitev
	feat_selector.rotation = -rotation # negiramo rotacijo bolta, da je pri miru
	feat_selector.global_position = global_position + Vector2(0, 8) # negiramo rotacijo bolta, da je pri miru
	
	# features na voljo?
	if bullet_count <= 0:
		available_features.erase(feat_selector.get_node(\"Icons/IconBullet\"))
	elif not available_features.has(feat_selector.get_node(\"Icons/IconBullet\")):
		available_features.append(feat_selector.get_node(\"Icons/IconBullet\"))
		feat_selector.get_node(\"Icons/IconBullet\").show()
	if misile_count <= 0:
		available_features.erase(feat_selector.get_node(\"Icons/IconMisile\"))
		feat_selector.get_node(\"Icons/IconMisile\").hide()
#		feat_selector.get_node(\"Icons/IconShocker\").show()
	elif not available_features.has(feat_selector.get_node(\"Icons/IconMisile\")):
		available_features.append(feat_selector.get_node(\"Icons/IconMisile\"))
#		feat_selector.get_node(\"Icons/IconMisile\").show()
	if shocker_count <= 0:
		available_features.erase(feat_selector.get_node(\"Icons/IconShocker\"))
		feat_selector.get_node(\"Icons/IconBullet\").hide()
	elif not available_features.has(feat_selector.get_node(\"Icons/IconShocker\")):
		available_features.append(feat_selector.get_node(\"Icons/IconShocker\"))
#		feat_selector.get_node(\"Icons/IconShocker\").show()
	
	for feat in feat_selector.get_node(\"Icons\").get_children():
		if not available_features.has(feat):
			feat.hide()
			if not available_features.empty():
				var feat_to_show = available_features[available_features.find(feat) + 1]
				feat_to_show.show()
#		else:	

#			feat.show()
		
		

	if available_features.empty():
		feat_selector.hide()
	else:
		feat_selector.show()
				
		
var available_features: Array

func select_feature():
	
	var selector_timer: Timer = $FeatSelector/SelectorTimer
	var selector_visibily_time: float = 1
	selector_timer.wait_time = selector_visibily_time
	selector_timer.start()

	# opredelim tiste, ki so na voljo
#	var available_features: Array = feat_selector.get_node(\"Icons\").get_children()
#	available_features.erase(feat_selector.get_node(\"Empty\"))
#	if bullet_count <= 0:
#		available_features.erase(feat_selector.get_node(\"Icons/IconBullet\"))
#	if misile_count <= 0:
#		available_features.erase(feat_selector.get_node(\"Icons/IconMisile\"))
#	if shocker_count <= 0:
#		available_features.erase(feat_selector.get_node(\"Icons/IconShocker\"))
	
	if not available_features.empty():
#		if feat_selector.modulate.a == 1:
		if feat_selector.visible:
			feat_selected += 1
			if feat_selected > available_features.size() - 1:
				feat_selected = 0
			# setam vidnost ikon
			for feature in available_features:
				if not feature == available_features[feat_selected]:
					feature.hide()
				else:
					feature.show()		
		if feat_selector.modulate.a < 1:
			feat_selector.modulate.a = 1
#			feat_selector.show()

	

func _process(delta: float) -> void:
	
#	if camera_follow:
#		camera.position = position

		
#	if feat_selector.visible:
	update_feature_selector()
	pass
	
func _physics_process(delta: float) -> void:
	
	acceleration = transform.x * engine_power # pospešek je smer (transform.x) z močjo motorja
	if current_motion_state == MotionStates.IDLE: # aplikacija free rotacije
		rotate(delta * rotation_angle * free_rotation_multiplier)


func pull_bolt_on_screen(pull_position: Vector2):
	
	if not bolt_active:
		return
		
#	bolt_collision.disabled = true
#	shield_collision.disabled = true
	
	var pull_time: float = 0.2
	
	# spawn particles
	var pull_tween = get_tree().create_tween()
	pull_tween.tween_property(self, \"global_position\", pull_position, pull_time).set_ease(Tween.EASE_OUT)
	pull_tween.parallel().tween_property(self, \"modulate:a\", 0.2, pull_time/2).set_ease(Tween.EASE_OUT)
	pull_tween.parallel().tween_property(self, \"modulate:a\", 1, pull_time/2).set_delay(pull_time/2).set_ease(Tween.EASE_IN)
#	pull_tween.tween_callback(self.bolt_collision, \"set_disabled\", [false])
	
	update_gas(Ref.game_manager.game_settings[\"pull_penalty_gas\"])
	
	# ugasnem trail
	if bolt_trail_active:
		current_active_trail.start_decay() # trail decay tween start
		bolt_trail_active = false


func _on_SelectorTimer_timeout() -> void:
	
	feat_selector.modulate.a = feat_selector_alpha
#	feat_selector.hide()
"

[sub_resource type="OpenSimplexNoise" id=115]
seed = 1
octaves = 4
period = 90.5
persistence = 0.354
lacunarity = 3.58

[sub_resource type="NoiseTexture" id=116]
width = 9
height = 9
seamless = true
noise = SubResource( 115 )

[sub_resource type="ShaderMaterial" id=114]
shader = ExtResource( 3 )
shader_param/noise_factor = 0.0
shader_param/speed = 0.0
shader_param/noise_texture = SubResource( 116 )

[sub_resource type="CircleShape2D" id=30]
radius = 12.0

[sub_resource type="ShaderMaterial" id=28]
resource_local_to_scene = true
shader = ExtResource( 4 )
shader_param/noise_intensity = 1.0
shader_param/noise_layers = 5
shader_param/noise_speed = 2.0
shader_param/inverse_output = false
shader_param/colorize = Color( 1, 1, 1, 1 )
shader_param/color_to_cut = Color( 1, 1, 1, 1 )
shader_param/color_intensity = 1.0
shader_param/texture_size = Vector2( 32, 32 )

[sub_resource type="OpenSimplexNoise" id=25]
seed = 4
period = 5.8
persistence = 0.857
lacunarity = 0.39

[sub_resource type="NoiseTexture" id=109]
width = 32
height = 32
seamless = true
bump_strength = 13.9
noise = SubResource( 25 )

[sub_resource type="Animation" id=117]
length = 0.001
tracks/0/type = "bezier"
tracks/0/path = NodePath(".:scale:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/1/type = "bezier"
tracks/1/path = NodePath(".:scale:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( 1, -0.25, 0, 0.25, 0 ),
"times": PoolRealArray( 0 )
}
tracks/2/type = "value"
tracks/2/path = NodePath(".:material:shader_param/noise_intensity")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 1.0 ]
}

[sub_resource type="Animation" id=112]
resource_name = "shield_on"
length = 2.0
step = 0.05
tracks/0/type = "bezier"
tracks/0/path = NodePath(".:scale:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 1.05, -0.6, 0, 0.2, 0, 1.05, -0.6, 0, 0.2, 0, 0.9, -0.2, 0, 0.2, 0, 1, -0.2, 0, 0.2, 0 ),
"times": PoolRealArray( 0, 0.8, 1.4, 2 )
}
tracks/1/type = "bezier"
tracks/1/path = NodePath(".:scale:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( 1.05083, -0.6, 0, 0.2, 0, 1.05083, -0.6, 0, 0.2, 0, 0.9, -0.2, 0, 0.2, 0, 1, -0.2, 0, 0.2, 0 ),
"times": PoolRealArray( 0, 0.8, 1.4, 2 )
}
tracks/2/type = "value"
tracks/2/path = NodePath(".:material:shader_param/noise_intensity")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/keys = {
"times": PoolRealArray( 0, 0.15, 0.8 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 0.0, 0.0, 1.0 ]
}

[sub_resource type="Animation" id=110]
resource_name = "shielding"
length = 1.2
tracks/0/type = "bezier"
tracks/0/path = NodePath(".:scale:x")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"points": PoolRealArray( 1, 0, 0, 0.2, 0, 0.9, -0.2, 0, 0.2, 0, 1, -0.2, 0, 0.2, 0 ),
"times": PoolRealArray( 0, 0.6, 1.2 )
}
tracks/1/type = "bezier"
tracks/1/path = NodePath(".:scale:y")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"points": PoolRealArray( 1.005, -0.2, 0, 0.2, 0, 0.9, -0.2, 0, 0.2, 0, 1, -0.2, 0, 0.2, 0 ),
"times": PoolRealArray( 0, 0.6, 1.2 )
}

[sub_resource type="AtlasTexture" id=1]
atlas = ExtResource( 6 )
region = Rect2( 0, 0, 8, 8 )

[sub_resource type="AtlasTexture" id=118]
atlas = ExtResource( 1 )
region = Rect2( 48, 8, 8, 8 )

[sub_resource type="AtlasTexture" id=119]
atlas = ExtResource( 6 )
region = Rect2( 8, 0, 8, 8 )

[sub_resource type="AtlasTexture" id=120]
atlas = ExtResource( 6 )
region = Rect2( 16, 0, 8, 8 )

[node name="Player" type="KinematicBody2D"]
script = SubResource( 121 )

[node name="BoltCollision" type="CollisionPolygon2D" parent="."]
position = Vector2( -0.5, 0.5 )
rotation = 1.57079
polygon = PoolVector2Array( -1.99997, -4.00001, -5, -3.13719e-05, -5.00001, 1.99997, -4.00002, 2.99997, 2.99998, 3.00002, 3.99999, 2.00003, 4, 2.50975e-05, 1.00003, -3.99999 )

[node name="Bolt" type="Sprite" parent="."]
material = SubResource( 114 )
position = Vector2( 0.5, 0.5 )
texture = ExtResource( 5 )

[node name="FrontEnginePositionL" type="Position2D" parent="Bolt"]
position = Vector2( 2, -4 )
__meta__ = {
"_gizmo_extents_": 2.0
}

[node name="indikator3" type="Sprite" parent="Bolt/FrontEnginePositionL"]
visible = false
position = Vector2( 0, 1 )
texture = ExtResource( 2 )

[node name="FrontEnginePositionR" type="Position2D" parent="Bolt"]
position = Vector2( 2.00001, 2.99999 )
__meta__ = {
"_gizmo_extents_": 2.0
}

[node name="indikator2" type="Sprite" parent="Bolt/FrontEnginePositionR"]
visible = false
texture = ExtResource( 2 )

[node name="RearEnginePosition" type="Position2D" parent="Bolt"]
position = Vector2( -4, -0.499986 )
__meta__ = {
"_gizmo_extents_": 2.0
}

[node name="indikator" type="Sprite" parent="Bolt/RearEnginePosition"]
visible = false
position = Vector2( 0, 0.5 )
texture = ExtResource( 2 )

[node name="TrailPosition" type="Position2D" parent="Bolt"]
position = Vector2( -3, -0.499993 )
__meta__ = {
"_gizmo_extents_": 2.0
}

[node name="GunPosition" type="Position2D" parent="Bolt"]
position = Vector2( 2.5, -0.5 )
__meta__ = {
"_edit_group_": true,
"_gizmo_extents_": 2.0
}

[node name="indikator" type="Sprite" parent="Bolt/GunPosition"]
visible = false
modulate = Color( 1, 0, 0, 1 )
position = Vector2( 0.5, 0.5 )
texture = ExtResource( 2 )

[node name="ShieldCollision" type="CollisionShape2D" parent="."]
visible = false
shape = SubResource( 30 )

[node name="Shield" type="Sprite" parent="."]
material = SubResource( 28 )
texture = SubResource( 109 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
root_node = NodePath("../Shield")
anims/RESET = SubResource( 117 )
anims/shield_on = SubResource( 112 )
anims/shielding = SubResource( 110 )

[node name="EnergyBar" type="Node2D" parent="."]
visible = false

[node name="Undi" type="Polygon2D" parent="EnergyBar"]
position = Vector2( -3.5, 0 )
color = Color( 0.32549, 0.356863, 0.407843, 0.54902 )
polygon = PoolVector2Array( 0.5, 0, 0.5, 1, 6.5, 1, 6.5, 0 )

[node name="Bar" type="Polygon2D" parent="EnergyBar"]
position = Vector2( -3.5, 0 )
color = Color( 0.847059, 0.0235294, 0.0235294, 1 )
polygon = PoolVector2Array( 0.5, 0, 0.5, 1, 6.5, 1, 6.5, 0 )

[node name="FeatSelector" type="Node2D" parent="."]
visible = false

[node name="Icons" type="Control" parent="FeatSelector"]
margin_left = -4.0
margin_right = 4.0
margin_bottom = 8.0
theme = ExtResource( 7 )

[node name="IconBullet" type="TextureRect" parent="FeatSelector/Icons"]
margin_right = 8.0
margin_bottom = 8.0
texture = SubResource( 1 )

[node name="IconEdge" type="TextureRect" parent="FeatSelector/Icons/IconBullet"]
margin_right = 8.0
margin_bottom = 8.0
texture = SubResource( 118 )

[node name="IconMisile" type="TextureRect" parent="FeatSelector/Icons"]
visible = false
margin_right = 8.0
margin_bottom = 8.0
texture = SubResource( 119 )

[node name="IconEdge2" type="TextureRect" parent="FeatSelector/Icons/IconMisile"]
margin_right = 8.0
margin_bottom = 8.0
texture = SubResource( 118 )

[node name="IconShocker" type="TextureRect" parent="FeatSelector/Icons"]
visible = false
margin_right = 8.0
margin_bottom = 8.0
texture = SubResource( 120 )

[node name="IconEdge3" type="TextureRect" parent="FeatSelector/Icons/IconShocker"]
margin_right = 8.0
margin_bottom = 8.0
texture = SubResource( 118 )

[node name="SelectorTimer" type="Timer" parent="FeatSelector"]

[connection signal="animation_finished" from="AnimationPlayer" to="." method="_on_shield_animation_finished"]
[connection signal="animation_started" from="AnimationPlayer" to="." method="_on_AnimationPlayer_animation_started"]
[connection signal="timeout" from="FeatSelector/SelectorTimer" to="." method="_on_SelectorTimer_timeout"]
