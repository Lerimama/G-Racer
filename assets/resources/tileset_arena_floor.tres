[gd_resource type="TileSet" load_steps=18 format=2]

[ext_resource path="res://assets/tilesets/tileset_arena_nitro.png" type="Texture" id=1]
[ext_resource path="res://assets/tilesets/tileset_arena_gravel.png" type="Texture" id=2]
[ext_resource path="res://assets/tilesets/tileset_arena_floor_hole.png" type="Texture" id=3]
[ext_resource path="res://assets/tilesets/tile_arena_floor.png" type="Texture" id=4]
[ext_resource path="res://assets/tilesets/tileset_arena_floor.png" type="Texture" id=5]

[sub_resource type="Shader" id=3]
code = "shader_type canvas_item;
"

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 3 )

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;
"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )

[sub_resource type="Shader" id=537]
code = "shader_type canvas_item;

// KAJ DELA?
// menja do 3 barve
// menja barvo za prosojnost
// ---
// doda noise na texturo
// pixelizira noise texturo (različne velikosti pixla)
// animira noise texturo
// noise samo na določeni barvi (če je menjava barv vključena)
// noise texture color value hue shift (ramp)
// ---
// all texture color value hue shift (ramp)
// pixelizacija je pravilna, če je vnešena točna dimenzija node texture
// BUG
// barve izbira avtomatsko samo na črni in beli ... ostale delajo šele, če je izbran med predvajanjem scene

// colors
uniform bool change_colors;
uniform vec4 color_1: hint_color = vec4(0);
uniform vec4 new_color_1: hint_color;
uniform vec4 color_2: hint_color = vec4(0);
uniform vec4 new_color_2: hint_color;
uniform vec4 color_3: hint_color = vec4(0);
uniform vec4 new_color_3: hint_color;
uniform vec4 color_to_transparent: hint_color = vec4(0);
uniform vec4 color_to_noise: hint_color = vec4(0);

uniform vec2 node_size = vec2(320, 320); // more bit točen, da so pixli pravih dimenzij

// noise
uniform bool ad_noise; // če je change colors je zbirčen glede barve
uniform bool shade_noise;
uniform sampler2D noise;
uniform sampler2D noise_color_ramp : hint_albedo;
// pixelate
uniform bool pixelate_noise;
uniform	float pixel_size_multiplier = 1.0;
uniform	vec2 pixel_offset = vec2(0.0, 0.0);
// animate
uniform float speed_x : hint_range (-10, 10) = 0;
uniform float speed_y : hint_range (-10, 10) = 0;
uniform float speed_scale : hint_range (0, 1, 0.01)= 0.1; // da ni prehitro

// shading all
uniform bool shade_all_colors;
uniform sampler2D shades_color_ramp : hint_albedo;


//uniform sampler2D noise;
uniform mat4 view_to_local;
varying vec2 local;

void vertex()
{
    local = (view_to_local * WORLD_MATRIX * vec4(VERTEX, 0.0, 1.0)).xy;
}


void fragment() {

//	COLOR = textureLod(SCREEN_TEXTURE, SCREEN_UV, 0.0); // textura pred editiranjem
	COLOR = texture(TEXTURE, UV);
	
	// COLORS change
	if (change_colors == true){
//		if (COLOR == color_1){COLOR = new_color_1;}
//		if (COLOR == color_2){COLOR = new_color_2;}
//		if (COLOR == color_3){COLOR = new_color_3;}
//		if (COLOR == color_to_transparent){COLOR.a = 0.0;}
		if (length(COLOR - color_1) < 0.01){COLOR = new_color_1;}
		if (length(COLOR - color_2) < 0.01){COLOR = new_color_2;}
		if (length(COLOR - color_3) < 0.01){COLOR = new_color_3;}
		if (length(COLOR - color_to_transparent) < 0.01){COLOR.a = 0.0;}
	} else{
		COLOR = texture(TEXTURE, UV);
	}
			
	// NOISE
	if (ad_noise == true){
	

		
		// pixelate and animate
		vec2 noise_uvs;
		if (pixelate_noise == true) {
			float xFactor = node_size.x / pixel_size_multiplier;
			float yFactor = node_size.y / pixel_size_multiplier;
			float grid_uv_x = round(UV.x * xFactor + pixel_offset.x) / xFactor + TIME * speed_x * speed_scale;
			float grid_uv_y = round(UV.y * yFactor + pixel_offset.y) / yFactor + TIME * speed_y * speed_scale;
			noise_uvs = vec2(grid_uv_x, grid_uv_y);
		} else {
		// animate
			noise_uvs.x = UV.x + TIME * speed_x * speed_scale;
			noise_uvs.y = UV.y + TIME * speed_y * speed_scale;			
		}
	
		vec2 uv = local / vec2(textureSize(noise, 0));
		
		noise_uvs = uv;
//		COLOR = vec4(texture(noise, uv).rgb, texture(TEXTURE, UV).a);	
		
		vec4 noise_texture = texture(noise, noise_uvs);			
//		vec4 noise_texture = vec4(texture(noise, noise_uvs).rgb, texture(TEXTURE, UV).a);			
		vec3 noise_color = noise_texture.rgb;
		float noise_alpha = noise_texture.a; 
		
//		vec4 noise_texture = texture(noise, noise_uvs);			
//		vec3 noise_color = noise_texture.rgb;
//		float noise_alpha = noise_texture.a; 
		
		// shade noise 
		if (shade_noise == true){
			
			float color_value;
			// get the greyscale value through the highest of r, g, and b
			{
				vec3 c = noise_color.rgb;
				float max1 = max(c.r, c.g);
				float max2 = max(max1, c.b);
				color_value = max2;
			}
			
			vec3 noise_color_out; 
			float noise_alpha_out;
			// Read the colormap and use the greyscale value to map in the new color.
			{
				vec4 n_tex_read = texture(noise_color_ramp, vec2(color_value, 0.0));
				noise_color_out = n_tex_read.rgb;
				noise_alpha_out = n_tex_read.a;
			}
	
			
			// noise samo na noise barvo ali povsod
			if (change_colors == true){
				if (length(COLOR - color_to_noise) < 0.01){
//				if (COLOR == color_to_noise){
					COLOR.rgb = noise_color_out;
					COLOR.a = noise_alpha_out;
				}
			} else {
			// noise je povsod
				COLOR.rgb = noise_color_out;
				COLOR.a = noise_alpha_out; //alphaIn;
			}
		} else {
		// noise brez shadinga
			// noise samo na noise barvo ali povsod
			if (change_colors == true){
				if (length(COLOR - color_to_noise) < 0.01){
//				if (COLOR == color_to_noise){
					COLOR.rgb = noise_color;
					COLOR.a = noise_alpha;
				}
			} else {
				COLOR.rgb = noise_color;
				COLOR.a = noise_alpha; //alphaIn;
			}
		}
	}
	
	// post all color shading
	if (shade_all_colors == true){
		vec3 color_in;
		float alpha_in;
		{
			vec4 TEXTURE_tex_read = COLOR;
			color_in = TEXTURE_tex_read.rgb;
			alpha_in = TEXTURE_tex_read.a;
		}
		// get the greyscale value through the highest of r, g, and b
		float color_grey_value; 
		{
			vec3 c = color_in.rgb;
			float max1 = max(c.r, c.g);
			float max2 = max(max1, c.b);
			color_grey_value = max2;
		}
		// Read the colormap and use the greyscale value to map in the new color.
		vec3 color_out;
		float alpha_out;
		{
			vec4 n_tex_read = texture(shades_color_ramp, vec2(color_grey_value, 0.0));
			color_out = n_tex_read.rgb;
			alpha_out = n_tex_read.a;
		}
		// apliciraj barvo
		COLOR.rgb = color_out;
		COLOR.a = alpha_out;
	}
	
}"

[sub_resource type="OpenSimplexNoise" id=533]
seed = 17
octaves = 7
period = 67.3
persistence = 1.0
lacunarity = 1.86

[sub_resource type="NoiseTexture" id=539]
width = 320
height = 320
seamless = true
noise = SubResource( 533 )

[sub_resource type="Gradient" id=524]
interpolation_mode = 1
offsets = PoolRealArray( 0, 0.38539, 0.599496, 1 )
colors = PoolColorArray( 0.300695, 0.425293, 0.358738, 1, 0.443217, 0.542421, 0.48943, 1, 0.861279, 0.885996, 0.872793, 1, 1, 1, 1, 1 )

[sub_resource type="GradientTexture" id=535]
gradient = SubResource( 524 )

[sub_resource type="Gradient" id=526]
colors = PoolColorArray( 1, 0, 0, 1, 1, 1, 1, 1 )

[sub_resource type="GradientTexture" id=536]
gradient = SubResource( 526 )

[sub_resource type="ShaderMaterial" id=538]
shader = SubResource( 537 )
shader_param/change_colors = true
shader_param/color_1 = Color( 0.584314, 0.584314, 0.584314, 1 )
shader_param/new_color_1 = Color( 0, 0.309804, 1, 1 )
shader_param/color_2 = Color( 0, 0, 0, 0 )
shader_param/new_color_2 = Color( 0, 0, 0, 1 )
shader_param/color_3 = Color( 0, 0, 0, 0 )
shader_param/new_color_3 = Color( 0, 0, 0, 1 )
shader_param/color_to_transparent = Color( 0, 0, 0, 0 )
shader_param/color_to_noise = Color( 0, 0.309804, 1, 1 )
shader_param/node_size = Vector2( 320, 320 )
shader_param/ad_noise = true
shader_param/shade_noise = false
shader_param/pixelate_noise = false
shader_param/pixel_size_multiplier = 1.0
shader_param/pixel_offset = Vector2( 0.5, 0.5 )
shader_param/speed_x = 0.0
shader_param/speed_y = 0.782
shader_param/speed_scale = 0.1
shader_param/shade_all_colors = false
shader_param/view_to_local = null
shader_param/noise = SubResource( 539 )
shader_param/noise_color_ramp = SubResource( 535 )
shader_param/shades_color_ramp = SubResource( 536 )

[resource]
0/name = "arena_floor"
0/texture = ExtResource( 5 )
0/tex_offset = Vector2( 0, 0 )
0/material = SubResource( 4 )
0/modulate = Color( 1, 1, 1, 1 )
0/region = Rect2( 8, 16, 8, 8 )
0/tile_mode = 1
0/autotile/bitmask_mode = 2
0/autotile/bitmask_flags = [ Vector2( 0, 1 ), 432, Vector2( 0, 2 ), 438, Vector2( 0, 3 ), 54, Vector2( 0, 6 ), 223, Vector2( 0, 7 ), 479, Vector2( 0, 8 ), 475, Vector2( 0, 14 ), 213, Vector2( 0, 15 ), 342, Vector2( 0, 18 ), 209, Vector2( 0, 19 ), 278, Vector2( 1, 0 ), 315, Vector2( 1, 1 ), 504, Vector2( 1, 2 ), 511, Vector2( 1, 3 ), 63, Vector2( 1, 5 ), 95, Vector2( 1, 9 ), 473, Vector2( 1, 11 ), 123, Vector2( 1, 12 ), 433, Vector2( 1, 13 ), 118, Vector2( 1, 14 ), 405, Vector2( 1, 15 ), 339, Vector2( 1, 18 ), 404, Vector2( 1, 19 ), 83, Vector2( 2, 0 ), 246, Vector2( 2, 1 ), 216, Vector2( 2, 2 ), 219, Vector2( 2, 3 ), 27, Vector2( 2, 4 ), 127, Vector2( 2, 7 ), 501, Vector2( 2, 8 ), 375, Vector2( 2, 10 ), 505, Vector2( 2, 11 ), 183, Vector2( 2, 12 ), 220, Vector2( 2, 13 ), 283, Vector2( 2, 14 ), 212, Vector2( 2, 15 ), 86, Vector2( 2, 16 ), 465, Vector2( 2, 17 ), 279, Vector2( 2, 18 ), 469, Vector2( 2, 19 ), 343, Vector2( 3, 4 ), 383, Vector2( 3, 7 ), 477, Vector2( 3, 8 ), 351, Vector2( 3, 10 ), 509, Vector2( 3, 11 ), 444, Vector2( 3, 14 ), 401, Vector2( 3, 15 ), 275, Vector2( 3, 16 ), 468, Vector2( 3, 17 ), 87, Vector2( 4, 0 ), 222, Vector2( 4, 4 ), 319, Vector2( 4, 7 ), 181, Vector2( 4, 8 ), 370, Vector2( 4, 10 ), 508, Vector2( 4, 11 ), 474, Vector2( 4, 14 ), 368, Vector2( 4, 15 ), 53, Vector2( 4, 16 ), 117, Vector2( 4, 17 ), 369, Vector2( 4, 18 ), 373, Vector2( 5, 0 ), 126, Vector2( 5, 5 ), 311, Vector2( 5, 7 ), 157, Vector2( 5, 8 ), 346, Vector2( 5, 9 ), 500, Vector2( 5, 11 ), 318, Vector2( 5, 14 ), 344, Vector2( 5, 15 ), 29, Vector2( 5, 16 ), 285, Vector2( 5, 17 ), 348, Vector2( 5, 18 ), 349, Vector2( 6, 0 ), 435, Vector2( 6, 1 ), 144, Vector2( 6, 2 ), 146, Vector2( 6, 3 ), 18, Vector2( 6, 6 ), 439, Vector2( 6, 7 ), 503, Vector2( 6, 8 ), 502, Vector2( 6, 11 ), 498, Vector2( 7, 0 ), 252, Vector2( 7, 1 ), 464, Vector2( 7, 2 ), 466, Vector2( 7, 3 ), 23, Vector2( 7, 5 ), 180, Vector2( 7, 6 ), 306, Vector2( 7, 9 ), 184, Vector2( 7, 10 ), 178, Vector2( 7, 11 ), 249, Vector2( 7, 12 ), 497, Vector2( 7, 13 ), 119, Vector2( 8, 0 ), 411, Vector2( 8, 1 ), 400, Vector2( 8, 2 ), 151, Vector2( 8, 3 ), 22, Vector2( 8, 4 ), 314, Vector2( 8, 5 ), 153, Vector2( 8, 6 ), 90, Vector2( 8, 9 ), 154, Vector2( 8, 10 ), 58, Vector2( 8, 11 ), 159, Vector2( 8, 12 ), 476, Vector2( 8, 13 ), 287, Vector2( 8, 14 ), 245, Vector2( 8, 15 ), 371, Vector2( 8, 16 ), 241, Vector2( 8, 17 ), 115, Vector2( 9, 0 ), 379, Vector2( 9, 1 ), 208, Vector2( 9, 2 ), 471, Vector2( 9, 3 ), 19, Vector2( 9, 5 ), 240, Vector2( 9, 6 ), 51, Vector2( 9, 7 ), 189, Vector2( 9, 8 ), 243, Vector2( 9, 9 ), 179, Vector2( 9, 10 ), 122, Vector2( 9, 11 ), 314, Vector2( 9, 14 ), 413, Vector2( 9, 15 ), 350, Vector2( 9, 16 ), 412, Vector2( 9, 17 ), 286, Vector2( 10, 0 ), 247, Vector2( 10, 1 ), 148, Vector2( 10, 2 ), 82, Vector2( 10, 3 ), 149, Vector2( 10, 4 ), 338, Vector2( 10, 5 ), 408, Vector2( 10, 6 ), 30, Vector2( 10, 7 ), 414, Vector2( 10, 8 ), 378, Vector2( 10, 9 ), 188, Vector2( 10, 10 ), 410, Vector2( 10, 11 ), 242, Vector2( 10, 14 ), 177, Vector2( 10, 15 ), 114, Vector2( 10, 16 ), 496, Vector2( 10, 17 ), 55, Vector2( 11, 0 ), 445, Vector2( 11, 1 ), 145, Vector2( 11, 2 ), 274, Vector2( 11, 5 ), 176, Vector2( 11, 6 ), 50, Vector2( 11, 7 ), 182, Vector2( 11, 8 ), 59, Vector2( 11, 9 ), 248, Vector2( 11, 10 ), 434, Vector2( 11, 11 ), 441, Vector2( 11, 12 ), 309, Vector2( 11, 13 ), 372, Vector2( 11, 14 ), 156, Vector2( 11, 15 ), 282, Vector2( 11, 16 ), 472, Vector2( 11, 17 ), 31, Vector2( 12, 0 ), 478, Vector2( 12, 1 ), 48, Vector2( 12, 2 ), 308, Vector2( 12, 3 ), 304, Vector2( 12, 4 ), 52, Vector2( 12, 5 ), 152, Vector2( 12, 6 ), 26, Vector2( 12, 7 ), 440, Vector2( 12, 8 ), 218, Vector2( 12, 9 ), 155, Vector2( 12, 10 ), 62, Vector2( 12, 11 ), 158, Vector2( 12, 12 ), 345, Vector2( 12, 13 ), 93, Vector2( 12, 14 ), 21, Vector2( 12, 15 ), 336, Vector2( 12, 16 ), 277, Vector2( 12, 17 ), 337, Vector2( 13, 0 ), 382, Vector2( 13, 1 ), 56, Vector2( 13, 2 ), 121, Vector2( 13, 3 ), 316, Vector2( 13, 5 ), 244, Vector2( 13, 6 ), 307, Vector2( 13, 7 ), 436, Vector2( 13, 8 ), 310, Vector2( 13, 10 ), 61, Vector2( 13, 11 ), 376, Vector2( 13, 12 ), 437, Vector2( 13, 13 ), 374, Vector2( 13, 14 ), 81, Vector2( 13, 15 ), 276, Vector2( 13, 16 ), 85, Vector2( 13, 17 ), 340, Vector2( 14, 0 ), 499, Vector2( 14, 1 ), 24, Vector2( 14, 2 ), 89, Vector2( 14, 3 ), 88, Vector2( 14, 4 ), 25, Vector2( 14, 5 ), 409, Vector2( 14, 6 ), 94, Vector2( 14, 7 ), 217, Vector2( 14, 8 ), 91, Vector2( 14, 10 ), 211, Vector2( 14, 11 ), 406, Vector2( 14, 12 ), 221, Vector2( 14, 13 ), 347, Vector2( 14, 14 ), 273, Vector2( 14, 15 ), 84, Vector2( 14, 16 ), 255, Vector2( 14, 17 ), 507, Vector2( 15, 0 ), 253, Vector2( 15, 1 ), 112, Vector2( 15, 2 ), 49, Vector2( 15, 3 ), 113, Vector2( 15, 5 ), 381, Vector2( 15, 6 ), 313, Vector2( 15, 7 ), 124, Vector2( 15, 8 ), 57, Vector2( 15, 9 ), 120, Vector2( 15, 10 ), 60, Vector2( 15, 11 ), 312, Vector2( 15, 14 ), 341, Vector2( 15, 16 ), 447, Vector2( 15, 17 ), 510, Vector2( 16, 0 ), 415, Vector2( 16, 1 ), 28, Vector2( 16, 2 ), 280, Vector2( 16, 3 ), 284, Vector2( 16, 5 ), 470, Vector2( 16, 6 ), 214, Vector2( 16, 7 ), 403, Vector2( 16, 8 ), 210, Vector2( 16, 9 ), 402, Vector2( 16, 10 ), 147, Vector2( 16, 11 ), 150, Vector2( 16, 12 ), 305, Vector2( 16, 13 ), 116, Vector2( 16, 14 ), 17, Vector2( 16, 15 ), 80, Vector2( 17, 0 ), 185, Vector2( 17, 1 ), 16, Vector2( 17, 3 ), 186, Vector2( 17, 4 ), 470, Vector2( 17, 5 ), 467, Vector2( 17, 6 ), 407, Vector2( 17, 7 ), 215, Vector2( 17, 8 ), 317, Vector2( 17, 9 ), 380, Vector2( 17, 10 ), 377, Vector2( 17, 11 ), 125, Vector2( 17, 12 ), 281, Vector2( 17, 13 ), 92, Vector2( 17, 14 ), 20, Vector2( 17, 15 ), 272 ]
0/autotile/icon_coordinate = Vector2( 1, 2 )
0/autotile/tile_size = Vector2( 8, 8 )
0/autotile/spacing = 0
0/autotile/occluder_map = [  ]
0/autotile/navpoly_map = [  ]
0/autotile/priority_map = [  ]
0/autotile/z_index_map = [  ]
0/occluder_offset = Vector2( 0, 0 )
0/navigation_offset = Vector2( 0, 0 )
0/shape_offset = Vector2( 0, 0 )
0/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
0/shape_one_way = false
0/shape_one_way_margin = 0.0
0/shapes = [  ]
0/z_index = 0
1/name = "area_nitro"
1/texture = ExtResource( 1 )
1/tex_offset = Vector2( 0, 0 )
1/material = SubResource( 2 )
1/modulate = Color( 1, 1, 1, 1 )
1/region = Rect2( 0, 0, 144, 160 )
1/tile_mode = 1
1/autotile/bitmask_mode = 2
1/autotile/bitmask_flags = [ Vector2( 0, 1 ), 432, Vector2( 0, 2 ), 438, Vector2( 0, 3 ), 54, Vector2( 0, 6 ), 223, Vector2( 0, 7 ), 479, Vector2( 0, 8 ), 475, Vector2( 0, 14 ), 213, Vector2( 0, 15 ), 342, Vector2( 0, 18 ), 209, Vector2( 0, 19 ), 278, Vector2( 1, 0 ), 315, Vector2( 1, 1 ), 504, Vector2( 1, 2 ), 511, Vector2( 1, 3 ), 63, Vector2( 1, 5 ), 95, Vector2( 1, 9 ), 473, Vector2( 1, 11 ), 123, Vector2( 1, 12 ), 433, Vector2( 1, 13 ), 118, Vector2( 1, 14 ), 405, Vector2( 1, 15 ), 339, Vector2( 1, 18 ), 404, Vector2( 1, 19 ), 83, Vector2( 2, 0 ), 246, Vector2( 2, 1 ), 216, Vector2( 2, 2 ), 219, Vector2( 2, 3 ), 27, Vector2( 2, 4 ), 127, Vector2( 2, 7 ), 501, Vector2( 2, 8 ), 375, Vector2( 2, 10 ), 505, Vector2( 2, 11 ), 183, Vector2( 2, 12 ), 220, Vector2( 2, 13 ), 283, Vector2( 2, 14 ), 212, Vector2( 2, 15 ), 86, Vector2( 2, 16 ), 465, Vector2( 2, 17 ), 279, Vector2( 2, 18 ), 469, Vector2( 2, 19 ), 343, Vector2( 3, 4 ), 383, Vector2( 3, 7 ), 477, Vector2( 3, 8 ), 351, Vector2( 3, 10 ), 509, Vector2( 3, 11 ), 444, Vector2( 3, 14 ), 401, Vector2( 3, 15 ), 275, Vector2( 3, 16 ), 468, Vector2( 3, 17 ), 87, Vector2( 4, 0 ), 222, Vector2( 4, 4 ), 319, Vector2( 4, 7 ), 181, Vector2( 4, 8 ), 370, Vector2( 4, 10 ), 508, Vector2( 4, 11 ), 474, Vector2( 4, 14 ), 368, Vector2( 4, 15 ), 53, Vector2( 4, 16 ), 117, Vector2( 4, 17 ), 369, Vector2( 4, 18 ), 373, Vector2( 5, 0 ), 126, Vector2( 5, 5 ), 311, Vector2( 5, 7 ), 157, Vector2( 5, 8 ), 346, Vector2( 5, 9 ), 500, Vector2( 5, 11 ), 318, Vector2( 5, 14 ), 344, Vector2( 5, 15 ), 29, Vector2( 5, 16 ), 285, Vector2( 5, 17 ), 348, Vector2( 5, 18 ), 349, Vector2( 6, 0 ), 435, Vector2( 6, 1 ), 144, Vector2( 6, 2 ), 146, Vector2( 6, 3 ), 18, Vector2( 6, 6 ), 439, Vector2( 6, 7 ), 503, Vector2( 6, 8 ), 502, Vector2( 6, 11 ), 498, Vector2( 7, 0 ), 252, Vector2( 7, 1 ), 464, Vector2( 7, 2 ), 466, Vector2( 7, 3 ), 23, Vector2( 7, 5 ), 180, Vector2( 7, 6 ), 306, Vector2( 7, 9 ), 184, Vector2( 7, 10 ), 178, Vector2( 7, 11 ), 249, Vector2( 7, 12 ), 497, Vector2( 7, 13 ), 119, Vector2( 8, 0 ), 411, Vector2( 8, 1 ), 400, Vector2( 8, 2 ), 151, Vector2( 8, 3 ), 22, Vector2( 8, 4 ), 314, Vector2( 8, 5 ), 153, Vector2( 8, 6 ), 90, Vector2( 8, 9 ), 154, Vector2( 8, 10 ), 58, Vector2( 8, 11 ), 159, Vector2( 8, 12 ), 476, Vector2( 8, 13 ), 287, Vector2( 8, 14 ), 245, Vector2( 8, 15 ), 371, Vector2( 8, 16 ), 241, Vector2( 8, 17 ), 115, Vector2( 9, 0 ), 379, Vector2( 9, 1 ), 208, Vector2( 9, 2 ), 471, Vector2( 9, 3 ), 19, Vector2( 9, 5 ), 240, Vector2( 9, 6 ), 51, Vector2( 9, 7 ), 189, Vector2( 9, 8 ), 243, Vector2( 9, 9 ), 179, Vector2( 9, 10 ), 122, Vector2( 9, 11 ), 314, Vector2( 9, 14 ), 413, Vector2( 9, 15 ), 350, Vector2( 9, 16 ), 412, Vector2( 9, 17 ), 286, Vector2( 10, 0 ), 247, Vector2( 10, 1 ), 148, Vector2( 10, 2 ), 82, Vector2( 10, 3 ), 149, Vector2( 10, 4 ), 338, Vector2( 10, 5 ), 408, Vector2( 10, 6 ), 30, Vector2( 10, 7 ), 414, Vector2( 10, 8 ), 378, Vector2( 10, 9 ), 188, Vector2( 10, 10 ), 410, Vector2( 10, 11 ), 242, Vector2( 10, 14 ), 177, Vector2( 10, 15 ), 114, Vector2( 10, 16 ), 496, Vector2( 10, 17 ), 55, Vector2( 11, 0 ), 445, Vector2( 11, 1 ), 145, Vector2( 11, 2 ), 274, Vector2( 11, 5 ), 176, Vector2( 11, 6 ), 50, Vector2( 11, 7 ), 182, Vector2( 11, 8 ), 59, Vector2( 11, 9 ), 248, Vector2( 11, 10 ), 434, Vector2( 11, 11 ), 441, Vector2( 11, 12 ), 309, Vector2( 11, 13 ), 372, Vector2( 11, 14 ), 156, Vector2( 11, 15 ), 282, Vector2( 11, 16 ), 472, Vector2( 11, 17 ), 31, Vector2( 12, 0 ), 478, Vector2( 12, 1 ), 48, Vector2( 12, 2 ), 308, Vector2( 12, 3 ), 304, Vector2( 12, 4 ), 52, Vector2( 12, 5 ), 152, Vector2( 12, 6 ), 26, Vector2( 12, 7 ), 440, Vector2( 12, 8 ), 218, Vector2( 12, 9 ), 155, Vector2( 12, 10 ), 62, Vector2( 12, 11 ), 158, Vector2( 12, 12 ), 345, Vector2( 12, 13 ), 93, Vector2( 12, 14 ), 21, Vector2( 12, 15 ), 336, Vector2( 12, 16 ), 277, Vector2( 12, 17 ), 337, Vector2( 13, 0 ), 382, Vector2( 13, 1 ), 56, Vector2( 13, 2 ), 121, Vector2( 13, 3 ), 316, Vector2( 13, 5 ), 244, Vector2( 13, 6 ), 307, Vector2( 13, 7 ), 436, Vector2( 13, 8 ), 310, Vector2( 13, 10 ), 61, Vector2( 13, 11 ), 376, Vector2( 13, 12 ), 437, Vector2( 13, 13 ), 374, Vector2( 13, 14 ), 81, Vector2( 13, 15 ), 276, Vector2( 13, 16 ), 85, Vector2( 13, 17 ), 340, Vector2( 14, 0 ), 499, Vector2( 14, 1 ), 24, Vector2( 14, 2 ), 89, Vector2( 14, 3 ), 88, Vector2( 14, 4 ), 25, Vector2( 14, 5 ), 409, Vector2( 14, 6 ), 94, Vector2( 14, 7 ), 217, Vector2( 14, 8 ), 91, Vector2( 14, 10 ), 211, Vector2( 14, 11 ), 406, Vector2( 14, 12 ), 221, Vector2( 14, 13 ), 347, Vector2( 14, 14 ), 273, Vector2( 14, 15 ), 84, Vector2( 14, 16 ), 255, Vector2( 14, 17 ), 507, Vector2( 15, 0 ), 253, Vector2( 15, 1 ), 112, Vector2( 15, 2 ), 49, Vector2( 15, 3 ), 113, Vector2( 15, 5 ), 381, Vector2( 15, 6 ), 313, Vector2( 15, 7 ), 124, Vector2( 15, 8 ), 57, Vector2( 15, 9 ), 120, Vector2( 15, 10 ), 60, Vector2( 15, 11 ), 312, Vector2( 15, 14 ), 341, Vector2( 15, 16 ), 447, Vector2( 15, 17 ), 510, Vector2( 16, 0 ), 415, Vector2( 16, 1 ), 28, Vector2( 16, 2 ), 280, Vector2( 16, 3 ), 284, Vector2( 16, 5 ), 470, Vector2( 16, 6 ), 214, Vector2( 16, 7 ), 403, Vector2( 16, 8 ), 210, Vector2( 16, 9 ), 402, Vector2( 16, 10 ), 147, Vector2( 16, 11 ), 150, Vector2( 16, 12 ), 305, Vector2( 16, 13 ), 116, Vector2( 16, 14 ), 17, Vector2( 16, 15 ), 80, Vector2( 17, 0 ), 185, Vector2( 17, 1 ), 16, Vector2( 17, 3 ), 186, Vector2( 17, 4 ), 470, Vector2( 17, 5 ), 467, Vector2( 17, 6 ), 407, Vector2( 17, 7 ), 215, Vector2( 17, 8 ), 317, Vector2( 17, 9 ), 380, Vector2( 17, 10 ), 377, Vector2( 17, 11 ), 125, Vector2( 17, 12 ), 281, Vector2( 17, 13 ), 92, Vector2( 17, 14 ), 20, Vector2( 17, 15 ), 272 ]
1/autotile/icon_coordinate = Vector2( 1, 2 )
1/autotile/tile_size = Vector2( 8, 8 )
1/autotile/spacing = 0
1/autotile/occluder_map = [  ]
1/autotile/navpoly_map = [  ]
1/autotile/priority_map = [  ]
1/autotile/z_index_map = [  ]
1/occluder_offset = Vector2( 0, 0 )
1/navigation_offset = Vector2( 0, 0 )
1/shape_offset = Vector2( 0, 0 )
1/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
1/shape_one_way = false
1/shape_one_way_margin = 0.0
1/shapes = [  ]
1/z_index = 0
2/name = "area_gravel"
2/texture = ExtResource( 2 )
2/tex_offset = Vector2( 0, 0 )
2/modulate = Color( 1, 1, 1, 1 )
2/region = Rect2( 0, 0, 144, 160 )
2/tile_mode = 1
2/autotile/bitmask_mode = 2
2/autotile/bitmask_flags = [ Vector2( 0, 1 ), 432, Vector2( 0, 2 ), 438, Vector2( 0, 3 ), 54, Vector2( 0, 6 ), 223, Vector2( 0, 7 ), 479, Vector2( 0, 8 ), 475, Vector2( 0, 14 ), 213, Vector2( 0, 15 ), 342, Vector2( 0, 18 ), 209, Vector2( 0, 19 ), 278, Vector2( 1, 0 ), 315, Vector2( 1, 1 ), 504, Vector2( 1, 2 ), 511, Vector2( 1, 3 ), 63, Vector2( 1, 5 ), 95, Vector2( 1, 9 ), 473, Vector2( 1, 11 ), 123, Vector2( 1, 12 ), 433, Vector2( 1, 13 ), 118, Vector2( 1, 14 ), 405, Vector2( 1, 15 ), 339, Vector2( 1, 18 ), 404, Vector2( 1, 19 ), 83, Vector2( 2, 0 ), 246, Vector2( 2, 1 ), 216, Vector2( 2, 2 ), 219, Vector2( 2, 3 ), 27, Vector2( 2, 4 ), 127, Vector2( 2, 7 ), 501, Vector2( 2, 8 ), 375, Vector2( 2, 10 ), 505, Vector2( 2, 11 ), 183, Vector2( 2, 12 ), 220, Vector2( 2, 13 ), 283, Vector2( 2, 14 ), 212, Vector2( 2, 15 ), 86, Vector2( 2, 16 ), 465, Vector2( 2, 17 ), 279, Vector2( 2, 18 ), 469, Vector2( 2, 19 ), 343, Vector2( 3, 4 ), 383, Vector2( 3, 7 ), 477, Vector2( 3, 8 ), 351, Vector2( 3, 10 ), 509, Vector2( 3, 11 ), 444, Vector2( 3, 14 ), 401, Vector2( 3, 15 ), 275, Vector2( 3, 16 ), 468, Vector2( 3, 17 ), 87, Vector2( 4, 0 ), 222, Vector2( 4, 4 ), 319, Vector2( 4, 7 ), 181, Vector2( 4, 8 ), 370, Vector2( 4, 10 ), 508, Vector2( 4, 11 ), 474, Vector2( 4, 14 ), 368, Vector2( 4, 15 ), 53, Vector2( 4, 16 ), 117, Vector2( 4, 17 ), 369, Vector2( 4, 18 ), 373, Vector2( 5, 0 ), 126, Vector2( 5, 5 ), 311, Vector2( 5, 7 ), 157, Vector2( 5, 8 ), 346, Vector2( 5, 9 ), 500, Vector2( 5, 11 ), 318, Vector2( 5, 14 ), 344, Vector2( 5, 15 ), 29, Vector2( 5, 16 ), 285, Vector2( 5, 17 ), 348, Vector2( 5, 18 ), 349, Vector2( 6, 0 ), 435, Vector2( 6, 1 ), 144, Vector2( 6, 2 ), 146, Vector2( 6, 3 ), 18, Vector2( 6, 6 ), 439, Vector2( 6, 7 ), 503, Vector2( 6, 8 ), 502, Vector2( 6, 11 ), 498, Vector2( 7, 0 ), 252, Vector2( 7, 1 ), 464, Vector2( 7, 2 ), 466, Vector2( 7, 3 ), 23, Vector2( 7, 5 ), 180, Vector2( 7, 6 ), 306, Vector2( 7, 9 ), 184, Vector2( 7, 10 ), 178, Vector2( 7, 11 ), 249, Vector2( 7, 12 ), 497, Vector2( 7, 13 ), 119, Vector2( 8, 0 ), 411, Vector2( 8, 1 ), 400, Vector2( 8, 2 ), 151, Vector2( 8, 3 ), 22, Vector2( 8, 4 ), 314, Vector2( 8, 5 ), 153, Vector2( 8, 6 ), 90, Vector2( 8, 9 ), 154, Vector2( 8, 10 ), 58, Vector2( 8, 11 ), 159, Vector2( 8, 12 ), 476, Vector2( 8, 13 ), 287, Vector2( 8, 14 ), 245, Vector2( 8, 15 ), 371, Vector2( 8, 16 ), 241, Vector2( 8, 17 ), 115, Vector2( 9, 0 ), 379, Vector2( 9, 1 ), 208, Vector2( 9, 2 ), 471, Vector2( 9, 3 ), 19, Vector2( 9, 5 ), 240, Vector2( 9, 6 ), 51, Vector2( 9, 7 ), 189, Vector2( 9, 8 ), 243, Vector2( 9, 9 ), 179, Vector2( 9, 10 ), 122, Vector2( 9, 11 ), 314, Vector2( 9, 14 ), 413, Vector2( 9, 15 ), 350, Vector2( 9, 16 ), 412, Vector2( 9, 17 ), 286, Vector2( 10, 0 ), 247, Vector2( 10, 1 ), 148, Vector2( 10, 2 ), 82, Vector2( 10, 3 ), 149, Vector2( 10, 4 ), 338, Vector2( 10, 5 ), 408, Vector2( 10, 6 ), 30, Vector2( 10, 7 ), 414, Vector2( 10, 8 ), 378, Vector2( 10, 9 ), 188, Vector2( 10, 10 ), 410, Vector2( 10, 11 ), 242, Vector2( 10, 14 ), 177, Vector2( 10, 15 ), 114, Vector2( 10, 16 ), 496, Vector2( 10, 17 ), 55, Vector2( 11, 0 ), 445, Vector2( 11, 1 ), 145, Vector2( 11, 2 ), 274, Vector2( 11, 5 ), 176, Vector2( 11, 6 ), 50, Vector2( 11, 7 ), 182, Vector2( 11, 8 ), 59, Vector2( 11, 9 ), 248, Vector2( 11, 10 ), 434, Vector2( 11, 11 ), 441, Vector2( 11, 12 ), 309, Vector2( 11, 13 ), 372, Vector2( 11, 14 ), 156, Vector2( 11, 15 ), 282, Vector2( 11, 16 ), 472, Vector2( 11, 17 ), 31, Vector2( 12, 0 ), 478, Vector2( 12, 1 ), 48, Vector2( 12, 2 ), 308, Vector2( 12, 3 ), 304, Vector2( 12, 4 ), 52, Vector2( 12, 5 ), 152, Vector2( 12, 6 ), 26, Vector2( 12, 7 ), 440, Vector2( 12, 8 ), 218, Vector2( 12, 9 ), 155, Vector2( 12, 10 ), 62, Vector2( 12, 11 ), 158, Vector2( 12, 12 ), 345, Vector2( 12, 13 ), 93, Vector2( 12, 14 ), 21, Vector2( 12, 15 ), 336, Vector2( 12, 16 ), 277, Vector2( 12, 17 ), 337, Vector2( 13, 0 ), 382, Vector2( 13, 1 ), 56, Vector2( 13, 2 ), 121, Vector2( 13, 3 ), 316, Vector2( 13, 5 ), 244, Vector2( 13, 6 ), 307, Vector2( 13, 7 ), 436, Vector2( 13, 8 ), 310, Vector2( 13, 10 ), 61, Vector2( 13, 11 ), 376, Vector2( 13, 12 ), 437, Vector2( 13, 13 ), 374, Vector2( 13, 14 ), 81, Vector2( 13, 15 ), 276, Vector2( 13, 16 ), 85, Vector2( 13, 17 ), 340, Vector2( 14, 0 ), 499, Vector2( 14, 1 ), 24, Vector2( 14, 2 ), 89, Vector2( 14, 3 ), 88, Vector2( 14, 4 ), 25, Vector2( 14, 5 ), 409, Vector2( 14, 6 ), 94, Vector2( 14, 7 ), 217, Vector2( 14, 8 ), 91, Vector2( 14, 10 ), 211, Vector2( 14, 11 ), 406, Vector2( 14, 12 ), 221, Vector2( 14, 13 ), 347, Vector2( 14, 14 ), 273, Vector2( 14, 15 ), 84, Vector2( 14, 16 ), 255, Vector2( 14, 17 ), 507, Vector2( 15, 0 ), 253, Vector2( 15, 1 ), 112, Vector2( 15, 2 ), 49, Vector2( 15, 3 ), 113, Vector2( 15, 5 ), 381, Vector2( 15, 6 ), 313, Vector2( 15, 7 ), 124, Vector2( 15, 8 ), 57, Vector2( 15, 9 ), 120, Vector2( 15, 10 ), 60, Vector2( 15, 11 ), 312, Vector2( 15, 14 ), 341, Vector2( 15, 16 ), 447, Vector2( 15, 17 ), 510, Vector2( 16, 0 ), 415, Vector2( 16, 1 ), 28, Vector2( 16, 2 ), 280, Vector2( 16, 3 ), 284, Vector2( 16, 5 ), 470, Vector2( 16, 6 ), 214, Vector2( 16, 7 ), 403, Vector2( 16, 8 ), 210, Vector2( 16, 9 ), 402, Vector2( 16, 10 ), 147, Vector2( 16, 11 ), 150, Vector2( 16, 12 ), 305, Vector2( 16, 13 ), 116, Vector2( 16, 14 ), 17, Vector2( 16, 15 ), 80, Vector2( 17, 0 ), 185, Vector2( 17, 1 ), 16, Vector2( 17, 3 ), 186, Vector2( 17, 4 ), 470, Vector2( 17, 5 ), 467, Vector2( 17, 6 ), 407, Vector2( 17, 7 ), 215, Vector2( 17, 8 ), 317, Vector2( 17, 9 ), 380, Vector2( 17, 10 ), 377, Vector2( 17, 11 ), 125, Vector2( 17, 12 ), 281, Vector2( 17, 13 ), 92, Vector2( 17, 14 ), 20, Vector2( 17, 15 ), 272 ]
2/autotile/icon_coordinate = Vector2( 1, 2 )
2/autotile/tile_size = Vector2( 8, 8 )
2/autotile/spacing = 0
2/autotile/occluder_map = [  ]
2/autotile/navpoly_map = [  ]
2/autotile/priority_map = [  ]
2/autotile/z_index_map = [  ]
2/occluder_offset = Vector2( 0, 0 )
2/navigation_offset = Vector2( 0, 0 )
2/shape_offset = Vector2( 0, 0 )
2/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
2/shape_one_way = false
2/shape_one_way_margin = 0.0
2/shapes = [  ]
2/z_index = 0
3/name = "area_hole"
3/texture = ExtResource( 3 )
3/tex_offset = Vector2( 0, 0 )
3/modulate = Color( 1, 1, 1, 1 )
3/region = Rect2( 0, 0, 144, 160 )
3/tile_mode = 1
3/autotile/bitmask_mode = 2
3/autotile/bitmask_flags = [ Vector2( 0, 1 ), 432, Vector2( 0, 2 ), 438, Vector2( 0, 3 ), 54, Vector2( 0, 6 ), 223, Vector2( 0, 7 ), 479, Vector2( 0, 8 ), 475, Vector2( 0, 14 ), 213, Vector2( 0, 15 ), 342, Vector2( 0, 18 ), 209, Vector2( 0, 19 ), 278, Vector2( 1, 0 ), 315, Vector2( 1, 1 ), 504, Vector2( 1, 2 ), 511, Vector2( 1, 3 ), 63, Vector2( 1, 5 ), 95, Vector2( 1, 9 ), 473, Vector2( 1, 11 ), 123, Vector2( 1, 12 ), 433, Vector2( 1, 13 ), 118, Vector2( 1, 14 ), 405, Vector2( 1, 15 ), 339, Vector2( 1, 18 ), 404, Vector2( 1, 19 ), 83, Vector2( 2, 0 ), 246, Vector2( 2, 1 ), 216, Vector2( 2, 2 ), 219, Vector2( 2, 3 ), 27, Vector2( 2, 4 ), 127, Vector2( 2, 7 ), 501, Vector2( 2, 8 ), 375, Vector2( 2, 10 ), 505, Vector2( 2, 11 ), 183, Vector2( 2, 12 ), 220, Vector2( 2, 13 ), 283, Vector2( 2, 14 ), 212, Vector2( 2, 15 ), 86, Vector2( 2, 16 ), 465, Vector2( 2, 17 ), 279, Vector2( 2, 18 ), 469, Vector2( 2, 19 ), 343, Vector2( 3, 4 ), 383, Vector2( 3, 7 ), 477, Vector2( 3, 8 ), 351, Vector2( 3, 10 ), 509, Vector2( 3, 11 ), 444, Vector2( 3, 14 ), 401, Vector2( 3, 15 ), 275, Vector2( 3, 16 ), 468, Vector2( 3, 17 ), 87, Vector2( 4, 0 ), 222, Vector2( 4, 4 ), 319, Vector2( 4, 7 ), 181, Vector2( 4, 8 ), 370, Vector2( 4, 10 ), 508, Vector2( 4, 11 ), 474, Vector2( 4, 14 ), 368, Vector2( 4, 15 ), 53, Vector2( 4, 16 ), 117, Vector2( 4, 17 ), 369, Vector2( 4, 18 ), 373, Vector2( 5, 0 ), 126, Vector2( 5, 5 ), 311, Vector2( 5, 7 ), 157, Vector2( 5, 8 ), 346, Vector2( 5, 9 ), 500, Vector2( 5, 11 ), 318, Vector2( 5, 14 ), 344, Vector2( 5, 15 ), 29, Vector2( 5, 16 ), 285, Vector2( 5, 17 ), 348, Vector2( 5, 18 ), 349, Vector2( 6, 0 ), 435, Vector2( 6, 1 ), 144, Vector2( 6, 2 ), 146, Vector2( 6, 3 ), 18, Vector2( 6, 6 ), 439, Vector2( 6, 7 ), 503, Vector2( 6, 8 ), 502, Vector2( 6, 11 ), 498, Vector2( 7, 0 ), 252, Vector2( 7, 1 ), 464, Vector2( 7, 2 ), 466, Vector2( 7, 3 ), 23, Vector2( 7, 5 ), 180, Vector2( 7, 6 ), 306, Vector2( 7, 9 ), 184, Vector2( 7, 10 ), 178, Vector2( 7, 11 ), 249, Vector2( 7, 12 ), 497, Vector2( 7, 13 ), 119, Vector2( 8, 0 ), 411, Vector2( 8, 1 ), 400, Vector2( 8, 2 ), 151, Vector2( 8, 3 ), 22, Vector2( 8, 4 ), 314, Vector2( 8, 5 ), 153, Vector2( 8, 6 ), 90, Vector2( 8, 9 ), 154, Vector2( 8, 10 ), 58, Vector2( 8, 11 ), 159, Vector2( 8, 12 ), 476, Vector2( 8, 13 ), 287, Vector2( 8, 14 ), 245, Vector2( 8, 15 ), 371, Vector2( 8, 16 ), 241, Vector2( 8, 17 ), 115, Vector2( 9, 0 ), 379, Vector2( 9, 1 ), 208, Vector2( 9, 2 ), 471, Vector2( 9, 3 ), 19, Vector2( 9, 5 ), 240, Vector2( 9, 6 ), 51, Vector2( 9, 7 ), 189, Vector2( 9, 8 ), 243, Vector2( 9, 9 ), 179, Vector2( 9, 10 ), 122, Vector2( 9, 11 ), 314, Vector2( 9, 14 ), 413, Vector2( 9, 15 ), 350, Vector2( 9, 16 ), 412, Vector2( 9, 17 ), 286, Vector2( 10, 0 ), 247, Vector2( 10, 1 ), 148, Vector2( 10, 2 ), 82, Vector2( 10, 3 ), 149, Vector2( 10, 4 ), 338, Vector2( 10, 5 ), 408, Vector2( 10, 6 ), 30, Vector2( 10, 7 ), 414, Vector2( 10, 8 ), 378, Vector2( 10, 9 ), 188, Vector2( 10, 10 ), 410, Vector2( 10, 11 ), 242, Vector2( 10, 14 ), 177, Vector2( 10, 15 ), 114, Vector2( 10, 16 ), 496, Vector2( 10, 17 ), 55, Vector2( 11, 0 ), 445, Vector2( 11, 1 ), 145, Vector2( 11, 2 ), 274, Vector2( 11, 5 ), 176, Vector2( 11, 6 ), 50, Vector2( 11, 7 ), 182, Vector2( 11, 8 ), 59, Vector2( 11, 9 ), 248, Vector2( 11, 10 ), 434, Vector2( 11, 11 ), 441, Vector2( 11, 12 ), 309, Vector2( 11, 13 ), 372, Vector2( 11, 14 ), 156, Vector2( 11, 15 ), 282, Vector2( 11, 16 ), 472, Vector2( 11, 17 ), 31, Vector2( 12, 0 ), 478, Vector2( 12, 1 ), 48, Vector2( 12, 2 ), 308, Vector2( 12, 3 ), 304, Vector2( 12, 4 ), 52, Vector2( 12, 5 ), 152, Vector2( 12, 6 ), 26, Vector2( 12, 7 ), 440, Vector2( 12, 8 ), 218, Vector2( 12, 9 ), 155, Vector2( 12, 10 ), 62, Vector2( 12, 11 ), 158, Vector2( 12, 12 ), 345, Vector2( 12, 13 ), 93, Vector2( 12, 14 ), 21, Vector2( 12, 15 ), 336, Vector2( 12, 16 ), 277, Vector2( 12, 17 ), 337, Vector2( 13, 0 ), 382, Vector2( 13, 1 ), 56, Vector2( 13, 2 ), 121, Vector2( 13, 3 ), 316, Vector2( 13, 5 ), 244, Vector2( 13, 6 ), 307, Vector2( 13, 7 ), 436, Vector2( 13, 8 ), 310, Vector2( 13, 10 ), 61, Vector2( 13, 11 ), 376, Vector2( 13, 12 ), 437, Vector2( 13, 13 ), 374, Vector2( 13, 14 ), 81, Vector2( 13, 15 ), 276, Vector2( 13, 16 ), 85, Vector2( 13, 17 ), 340, Vector2( 14, 0 ), 499, Vector2( 14, 1 ), 24, Vector2( 14, 2 ), 89, Vector2( 14, 3 ), 88, Vector2( 14, 4 ), 25, Vector2( 14, 5 ), 409, Vector2( 14, 6 ), 94, Vector2( 14, 7 ), 217, Vector2( 14, 8 ), 91, Vector2( 14, 10 ), 211, Vector2( 14, 11 ), 406, Vector2( 14, 12 ), 221, Vector2( 14, 13 ), 347, Vector2( 14, 14 ), 273, Vector2( 14, 15 ), 84, Vector2( 14, 16 ), 255, Vector2( 14, 17 ), 507, Vector2( 15, 0 ), 253, Vector2( 15, 1 ), 112, Vector2( 15, 2 ), 49, Vector2( 15, 3 ), 113, Vector2( 15, 5 ), 381, Vector2( 15, 6 ), 313, Vector2( 15, 7 ), 124, Vector2( 15, 8 ), 57, Vector2( 15, 9 ), 120, Vector2( 15, 10 ), 60, Vector2( 15, 11 ), 312, Vector2( 15, 14 ), 341, Vector2( 15, 16 ), 447, Vector2( 15, 17 ), 510, Vector2( 16, 0 ), 415, Vector2( 16, 1 ), 28, Vector2( 16, 2 ), 280, Vector2( 16, 3 ), 284, Vector2( 16, 5 ), 470, Vector2( 16, 6 ), 214, Vector2( 16, 7 ), 403, Vector2( 16, 8 ), 210, Vector2( 16, 9 ), 402, Vector2( 16, 10 ), 147, Vector2( 16, 11 ), 150, Vector2( 16, 12 ), 305, Vector2( 16, 13 ), 116, Vector2( 16, 14 ), 17, Vector2( 16, 15 ), 80, Vector2( 17, 0 ), 185, Vector2( 17, 1 ), 16, Vector2( 17, 3 ), 186, Vector2( 17, 4 ), 470, Vector2( 17, 5 ), 467, Vector2( 17, 6 ), 407, Vector2( 17, 7 ), 215, Vector2( 17, 8 ), 317, Vector2( 17, 9 ), 380, Vector2( 17, 10 ), 377, Vector2( 17, 11 ), 125, Vector2( 17, 12 ), 281, Vector2( 17, 13 ), 92, Vector2( 17, 14 ), 20, Vector2( 17, 15 ), 272 ]
3/autotile/icon_coordinate = Vector2( 1, 2 )
3/autotile/tile_size = Vector2( 8, 8 )
3/autotile/spacing = 0
3/autotile/occluder_map = [  ]
3/autotile/navpoly_map = [  ]
3/autotile/priority_map = [  ]
3/autotile/z_index_map = [  ]
3/occluder_offset = Vector2( 0, 0 )
3/navigation_offset = Vector2( 0, 0 )
3/shape_offset = Vector2( 0, 0 )
3/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
3/shape_one_way = false
3/shape_one_way_margin = 0.0
3/shapes = [  ]
3/z_index = 0
4/name = "floor_monotile"
4/texture = ExtResource( 5 )
4/tex_offset = Vector2( 0, 0 )
4/modulate = Color( 1, 1, 1, 1 )
4/region = Rect2( 8, 16, 8, 8 )
4/tile_mode = 0
4/occluder_offset = Vector2( 0, 0 )
4/navigation_offset = Vector2( 0, 0 )
4/shape_offset = Vector2( 0, 0 )
4/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
4/shape_one_way = false
4/shape_one_way_margin = 0.0
4/shapes = [  ]
4/z_index = 0
5/name = "tile_floor"
5/texture = ExtResource( 4 )
5/tex_offset = Vector2( 0, 0 )
5/material = SubResource( 538 )
5/modulate = Color( 1, 1, 1, 1 )
5/region = Rect2( 0, 0, 8, 8 )
5/tile_mode = 0
5/occluder_offset = Vector2( 0, 0 )
5/navigation_offset = Vector2( 0, 0 )
5/shape_offset = Vector2( 0, 0 )
5/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
5/shape_one_way = false
5/shape_one_way_margin = 0.0
5/shapes = [  ]
5/z_index = 0
