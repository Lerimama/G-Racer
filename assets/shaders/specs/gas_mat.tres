[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform sampler2D noise;
uniform mat4 view_to_local;

varying vec2 local;

//void vertex()
//{
//    local = (view_to_local * WORLD_MATRIX * vec4(VERTEX, 0.0, 1.0)).xy;
//}

void fragment()
{
    vec2 uv = local / vec2(textureSize(noise, 0));
//    COLOR = vec4(vec4(1.0,0.5,1.0,1.0).rgb, texture(TEXTURE, UV).a);
    COLOR = vec4(texture(noise, uv).rgb, texture(TEXTURE, UV).a);
}"

[sub_resource type="OpenSimplexNoise" id=2]
period = 2.8
persistence = 0.058
lacunarity = 0.29

[sub_resource type="NoiseTexture" id=3]
seamless = true
noise = SubResource( 2 )

[resource]
shader = SubResource( 1 )
shader_param/view_to_local = null
shader_param/noise = SubResource( 3 )
