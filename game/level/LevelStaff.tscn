[gd_scene load_steps=149 format=2]

[ext_resource path="res://common/tex/cross.png" type="Texture" id=1]
[ext_resource path="res://addons/versatile_atlas/resource.gd" type="Script" id=2]
[ext_resource path="res://assets/theme/main_theme.tres" type="Theme" id=3]
[ext_resource path="res://assets/textures/atlas_level.png" type="Texture" id=4]
[ext_resource path="res://game/level/terrain/ObjectMountain_SS2D.tscn" type="PackedScene" id=5]
[ext_resource path="res://addons/rmsmartshape/shapes/point_array.gd" type="Script" id=6]
[ext_resource path="res://addons/rmsmartshape/shapes/point.gd" type="Script" id=7]
[ext_resource path="res://game/level/terrain/surfaces/SurfaceGravel_SS2D.tscn" type="PackedScene" id=8]
[ext_resource path="res://game/level/breakers/BreakerConcrete.tscn" type="PackedScene" id=9]
[ext_resource path="res://game/level/objects/GoalPillar.tscn" type="PackedScene" id=10]
[ext_resource path="res://assets/materials/ground_dirt.material" type="Material" id=11]
[ext_resource path="res://game/level/terrain/surfaces/SurfaceNitro_SS2D.tscn" type="PackedScene" id=12]
[ext_resource path="res://addons/rmsmartshape/vertex_properties.gd" type="Script" id=13]
[ext_resource path="res://common/tex/noise/7547.jpg" type="Texture" id=14]
[ext_resource path="res://game/level/pickables/PickableHealth.tscn" type="PackedScene" id=15]
[ext_resource path="res://common/shader_rect/ShaderCanvasRect.tscn" type="PackedScene" id=16]
[ext_resource path="res://assets/materials/ground_linart.material" type="Material" id=17]
[ext_resource path="res://game/level/pickables/PickableCash.tscn" type="PackedScene" id=18]
[ext_resource path="res://assets/materials/ground_dust.material" type="Material" id=19]
[ext_resource path="res://game/level/racing/BoltTracker.gd" type="Script" id=20]
[ext_resource path="res://game/level/StartPosition.tscn" type="PackedScene" id=21]
[ext_resource path="res://game/level/racing/StartLights.tscn" type="PackedScene" id=22]
[ext_resource path="res://common/shader_rect/ShaderTextureRect.tscn" type="PackedScene" id=23]
[ext_resource path="res://game/level/racing/LevelTrack.gd" type="Script" id=24]
[ext_resource path="res://game/level/pickables/PickableGas.tscn" type="PackedScene" id=25]
[ext_resource path="res://game/level/tileset_level_objects.tres" type="TileSet" id=26]
[ext_resource path="res://game/level/Level.gd" type="Script" id=27]
[ext_resource path="res://game/level/pickables/PickableMina.tscn" type="PackedScene" id=28]
[ext_resource path="res://game/level/pickables/PickableMisile.tscn" type="PackedScene" id=29]
[ext_resource path="res://game/level/pickables/PickableShield.tscn" type="PackedScene" id=30]
[ext_resource path="res://game/level/pickables/PickableNitro.tscn" type="PackedScene" id=31]
[ext_resource path="res://game/level/pickables/PickableLife.tscn" type="PackedScene" id=32]
[ext_resource path="res://game/level/pickables/PickableBullet.tscn" type="PackedScene" id=33]
[ext_resource path="res://game/level/pickables/PickableRandom.tscn" type="PackedScene" id=34]
[ext_resource path="res://game/level/buildings/Building_SS2D.tscn" type="PackedScene" id=35]
[ext_resource path="res://game/level/terrain/streets/StreetConcrete_SS2D.tscn" type="PackedScene" id=36]
[ext_resource path="res://game/level/terrain/surfaces/SurfaceHole_SS2D.tscn" type="PackedScene" id=37]
[ext_resource path="res://game/level/terrain/streets/StreetAsphalt_SS2D.tscn" type="PackedScene" id=38]
[ext_resource path="res://game/level/breakers/breaker_versions/Breaker_ClosedSS2D.tscn" type="PackedScene" id=39]
[ext_resource path="res://game/level/breakers/breaker_versions/Breaker_OpenSS2D.tscn" type="PackedScene" id=40]
[ext_resource path="res://addons/rmsmartshape/materials/shape_material.gd" type="Script" id=41]
[ext_resource path="res://assets/tileset_pallete.png" type="Texture" id=42]
[ext_resource path="res://game/level/breakers/BreakerRigidConcrete.tscn" type="PackedScene" id=43]
[ext_resource path="res://common/shadows/ShadowPolygon.tscn" type="PackedScene" id=44]
[ext_resource path="res://game/level/breakers/breaker/Kintest.gd" type="Script" id=45]
[ext_resource path="res://game/level/breakers/breaker/BreakerShape.tscn" type="PackedScene" id=46]
[ext_resource path="res://game/level/breakers/breaker/BreakerRigid.tscn" type="PackedScene" id=47]

[sub_resource type="OpenSimplexNoise" id=10546]
seed = 7
octaves = 5
period = 208.6
persistence = 0.341
lacunarity = 2.1

[sub_resource type="NoiseTexture" id=10547]
width = 2000
height = 2000
seamless = true
noise = SubResource( 10546 )

[sub_resource type="Resource" id=11693]
script = ExtResource( 13 )
texture_idx = 4
flip = false
width = 1.0

[sub_resource type="Resource" id=11694]
script = ExtResource( 7 )
position = Vector2( -2657.71, 3732.75 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11693 )

[sub_resource type="Resource" id=11695]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11696]
script = ExtResource( 7 )
position = Vector2( -2808.02, -1970.45 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11695 )

[sub_resource type="Resource" id=11697]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11698]
script = ExtResource( 7 )
position = Vector2( 371.508, -359.83 )
point_in = Vector2( -370.614, 655.701 )
point_out = Vector2( 712.719, -1824.56 )
properties = SubResource( 11697 )

[sub_resource type="Resource" id=11699]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11700]
script = ExtResource( 7 )
position = Vector2( -301.621, 1387.09 )
point_in = Vector2( 0, 413.376 )
point_out = Vector2( -64.1445, -1147.48 )
properties = SubResource( 11699 )

[sub_resource type="Resource" id=11701]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11702]
script = ExtResource( 7 )
position = Vector2( 33.3569, 2855.29 )
point_in = Vector2( -726.973, 1047.7 )
point_out = Vector2( 484.648, -719.846 )
properties = SubResource( 11701 )

[sub_resource type="Resource" id=11703]
script = ExtResource( 6 )
_points = {
0: SubResource( 11694 ),
41: SubResource( 11696 ),
76: SubResource( 11698 ),
77: SubResource( 11700 ),
78: SubResource( 11702 )
}
_point_order = [ 0, 78, 77, 76, 41 ]
_constraints = {
}
_next_key = 79
_material_overrides = {
}

[sub_resource type="Resource" id=11704]
script = ExtResource( 13 )
texture_idx = 4
flip = false
width = 1.0

[sub_resource type="Resource" id=11705]
script = ExtResource( 7 )
position = Vector2( 2195.91, 3725.62 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11704 )

[sub_resource type="Resource" id=11706]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11707]
script = ExtResource( 7 )
position = Vector2( 1138.92, 2375.63 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11706 )

[sub_resource type="Resource" id=11708]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11709]
script = ExtResource( 7 )
position = Vector2( 3054.92, 2355.63 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11708 )

[sub_resource type="Resource" id=11710]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11711]
script = ExtResource( 7 )
position = Vector2( 3030.92, 571.627 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11710 )

[sub_resource type="Resource" id=11712]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11713]
script = ExtResource( 7 )
position = Vector2( 1082.92, 555.627 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11712 )

[sub_resource type="Resource" id=11714]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11715]
script = ExtResource( 7 )
position = Vector2( 1105.39, -2547.93 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11714 )

[sub_resource type="Resource" id=11716]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11717]
script = ExtResource( 7 )
position = Vector2( 1115.46, 3726.19 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11716 )

[sub_resource type="Resource" id=11718]
script = ExtResource( 6 )
_points = {
0: SubResource( 11705 ),
77: SubResource( 11707 ),
78: SubResource( 11709 ),
79: SubResource( 11711 ),
80: SubResource( 11713 ),
81: SubResource( 11715 ),
82: SubResource( 11717 )
}
_point_order = [ 0, 82, 77, 78, 79, 80, 81 ]
_constraints = {
}
_next_key = 83
_material_overrides = {
}

[sub_resource type="Resource" id=11719]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11720]
script = ExtResource( 7 )
position = Vector2( 448, 640 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11719 )

[sub_resource type="Resource" id=11721]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11722]
script = ExtResource( 7 )
position = Vector2( 448, 0 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11721 )

[sub_resource type="Resource" id=11723]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11724]
script = ExtResource( 7 )
position = Vector2( 0, 640 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11723 )

[sub_resource type="Resource" id=11725]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11726]
script = ExtResource( 7 )
position = Vector2( 0, 0 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11725 )

[sub_resource type="Resource" id=11727]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11728]
script = ExtResource( 7 )
position = Vector2( 448, 0 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11727 )

[sub_resource type="Resource" id=11729]
script = ExtResource( 6 )
_points = {
4: SubResource( 11720 ),
5: SubResource( 11722 ),
7: SubResource( 11724 ),
8: SubResource( 11726 ),
9: SubResource( 11728 )
}
_point_order = [ 5, 4, 7, 8, 9 ]
_constraints = {
[ 5, 9 ]: 15
}
_next_key = 11
_material_overrides = {
}

[sub_resource type="Resource" id=11730]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11731]
script = ExtResource( 7 )
position = Vector2( 1344, 320 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11730 )

[sub_resource type="Resource" id=11732]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11733]
script = ExtResource( 7 )
position = Vector2( 1344, 0 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11732 )

[sub_resource type="Resource" id=11734]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11735]
script = ExtResource( 7 )
position = Vector2( 0, 320 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11734 )

[sub_resource type="Resource" id=11736]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11737]
script = ExtResource( 7 )
position = Vector2( 0, 0 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11736 )

[sub_resource type="Resource" id=11738]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11739]
script = ExtResource( 7 )
position = Vector2( 1344, 0 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11738 )

[sub_resource type="Resource" id=11740]
script = ExtResource( 6 )
_points = {
4: SubResource( 11731 ),
5: SubResource( 11733 ),
7: SubResource( 11735 ),
8: SubResource( 11737 ),
9: SubResource( 11739 )
}
_point_order = [ 5, 4, 7, 8, 9 ]
_constraints = {
[ 5, 9 ]: 15
}
_next_key = 11
_material_overrides = {
}

[sub_resource type="Resource" id=11741]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11742]
script = ExtResource( 7 )
position = Vector2( 53.8174, 2028.79 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11741 )

[sub_resource type="Resource" id=11743]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11744]
script = ExtResource( 7 )
position = Vector2( 384, 0 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11743 )

[sub_resource type="Resource" id=11745]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11746]
script = ExtResource( 7 )
position = Vector2( 0, 0 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11745 )

[sub_resource type="Resource" id=11747]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11748]
script = ExtResource( 7 )
position = Vector2( 53.8174, 2028.79 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11747 )

[sub_resource type="Resource" id=11749]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11750]
script = ExtResource( 7 )
position = Vector2( 343.637, 629.542 )
point_in = Vector2( 158.089, -406.994 )
point_out = Vector2( -158.089, 406.994 )
properties = SubResource( 11749 )

[sub_resource type="Resource" id=11751]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11752]
script = ExtResource( 7 )
position = Vector2( 413.497, 1677.01 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11751 )

[sub_resource type="Resource" id=11753]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11754]
script = ExtResource( 7 )
position = Vector2( 295.772, 1381.01 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11753 )

[sub_resource type="Resource" id=11755]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11756]
script = ExtResource( 7 )
position = Vector2( 295.772, 1182.56 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11755 )

[sub_resource type="Resource" id=11757]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11758]
script = ExtResource( 7 )
position = Vector2( 477.405, 967.292 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11757 )

[sub_resource type="Resource" id=11759]
script = ExtResource( 6 )
_points = {
0: SubResource( 11742 ),
1: SubResource( 11744 ),
2: SubResource( 11746 ),
3: SubResource( 11748 ),
4: SubResource( 11750 ),
31: SubResource( 11752 ),
32: SubResource( 11754 ),
33: SubResource( 11756 ),
34: SubResource( 11758 )
}
_point_order = [ 3, 2, 1, 4, 34, 33, 32, 31, 0 ]
_constraints = {
[ 0, 3 ]: 15
}
_next_key = 35
_material_overrides = {
}

[sub_resource type="Resource" id=1823]
script = ExtResource( 41 )
_edge_meta_materials = [  ]
fill_textures = [ ExtResource( 42 ) ]
fill_texture_normals = [  ]
fill_texture_z_index = 0
fill_texture_show_behind_parent = false
fill_mesh_offset = 0.0
render_offset = 0.0

[sub_resource type="PhysicsMaterial" id=1]
friction = 0.0

[sub_resource type="GDScript" id=11692]
script/source = "extends RigidBody2D
# breaker je cel
# chunk je odlomljeni del breakerja
# debry so bejkerji, delčki narezanega chunka
# crackers so animirane razpoke (self destruct)


enum MATERIAL {STONE, GLASS, GRAVEL, WOOD } # GHOST, WOOD, METAL, TILES, SOIL
export (MATERIAL) var current_material: int = MATERIAL.STONE

enum MOTION {STILL, EXPLODE, FALL, MINIMIZE, DISSAPEAR} # SLIDE, CRACK, SHATTER
var current_motion: int = MOTION.STILL setget _on_change_motion

enum HIT_BY_TYPE {KNIFE, HAMMER, PAINT, EXPLODING} # _temp ... ujema se z demotom
var current_hit_by_type: int = HIT_BY_TYPE.KNIFE

enum BREAK_SIZE {XSMALL, SMALL, MEDIUM, LARGE, XLARGE} # za razmerje brejkanja
var current_break_size: int = BREAK_SIZE.MEDIUM

enum SLICE_STYLE {ERASE, BLAST, GRID_SQ, GRID_HEX, SPIDERWEB, FRAGMENTS, NONE}

export var height = 500 # setget
export var elevation = 0 # setget
export var transparency: float = 1 # setget
export var is_breakable: bool = true
export (int) var shape_edge_width: float = 0 setget _on_change_shape_edge_width

var breaker_base_polygon: PoolVector2Array = [] setget _on_change_breaker_shape # !!! polygon menjam samo prek tega setgeta

var crack_color: Color = Color.black
var cut_breaks_shapes: int = 1 # nobena, spodnja ali vse
var breaking_round: int = 0 # kolikokrat je bil brejker že nalomljen
var break_origin_global: Vector2 = Vector2.ZERO # se inherita skozi vse spawne
var current_breaker_velocity: Vector2 = Vector2.ZERO

# polygons
onready var breaker_base: Polygon2D = $BreakerBase
onready var edge_shape: Polygon2D = $BreakerBase/EdgeShape
onready var breaker_tool: Polygon2D = $BreakerTool
onready var collision_shape: CollisionPolygon2D = $CollisionPolygon2D

# nodes
export (NodePath) var breaker_world_path: String # če je svet kaj drugega kot njegov parent
onready var operator: Node = $Operator
onready var Breaker: PackedScene = load(\"res://game/level/breakers/breaker/Breaker.tscn\")
onready var CrackerBox: PackedScene = preload(\"res://game/level/breakers/breaker/CrackerBox.tscn\") # krekerji so po animaciji spucani

var breaker_world: Node # če ni podan ob spananju, je get_parent()


func _ready() -> void:

	# določim svet spawnanja
	if breaker_world == null:
		breaker_world = get_parent()

	# če ni podana oblika, izbere defaultno
	if breaker_base_polygon.empty():
		#		print(\"breaker_base_polygon empty\")
		self.breaker_base_polygon = breaker_base.polygon
	# če je podana oblika, jo prevzame
	else:
		#		print(\"breaker_base_polygon true\")
		self.breaker_base_polygon = breaker_base_polygon

	self.current_motion = current_motion
	self.shape_edge_width = shape_edge_width
	edge_shape.color =  crack_color
	breaker_tool.hide()

	# SS2D breaker
	# SS2D shape spremeni brejker koližn in signalizira spremembo brejkerju
	# brejker spremeni bazna oblika
	# po prejkerju se spremeni senčka
	if has_node(\"SS2D_Shape_Closed\"):
		$SS2D_Shape_Closed.connect(\"on_dirty_update\", self, \"_on_SS2D_dirty_update\") # po spremembi, ko je vse apdejtano
		$SS2D_Shape_Closed.hide()
	elif has_node(\"SS2D_Shape_Open\"):
		$SS2D_Shape_Open.connect(\"on_dirty_update\", self, \"_on_SS2D_dirty_update\") # po spremembi, ko je vse apdejtano
		$SS2D_Shape_Open.hide()


func _integrate_forces(state: Physics2DDirectBodyState) -> void:

	current_breaker_velocity = state.get_linear_velocity()


func on_hit(hitting_node: Node2D, hit_global_position: Vector2):
	# shape je lahko: polygon2D, collision_shape
	# če se pojavi kaj novega vneseš tukaj

	# opredelim data za celotno slajsanje: origin, smer, območje vpliva in moč

	#	break_origin_global = Vector2.ZERO
	#	printt (\"origin\", break_origin_global, hitting_node.position, hitting_node.global_position)

	if not is_breakable:
		return

	if hitting_node is Line2D:
		_cut_it(hitting_node)
		return

	var hit_by_type: int = HIT_BY_TYPE.HAMMER

	# hitter properties
	var hit_shape = hitting_node.influence_area.get_child(0)
	var hit_shape_scale = hitting_node.influence_area.scale
	var hit_by_direction: Vector2 = Vector2.ZERO
	if \"direction\" in hitting_node:
		hit_by_direction = hitting_node.direction
	current_hit_by_type = hitting_node.object_type

	# slicing polygon
	var hit_by_polygon: PoolVector2Array = []
	if hit_shape is Polygon2D or hit_shape is CollisionPolygon2D:
		hit_by_polygon = hit_shape.polygon
	elif hit_shape is CollisionShape2D:
		print (\"Hit shape je CollShape ... Uporabim Breaker tool ... naštimaj to\")
		hit_by_polygon = breaker_tool.polygon

	# break origin ... vector intersection or closest point
	#	var intersection_vector_length: float = operator.get_polygon_radius(hit_by_polygon) * hit_shape_scale.x
	var influence_radius: float = operator.get_polygon_radius(hit_by_polygon) * hit_shape_scale.x
	var intersection_vector_start: Vector2 = hit_global_position - position
	var intersection_vector_end: Vector2 = intersection_vector_start + hit_by_direction * influence_radius
	var intersection_vector_pool: PoolVector2Array = [intersection_vector_start, intersection_vector_end]
	var intersection_data: Array = operator.get_outline_intersecting_segments(intersection_vector_pool, breaker_base_polygon) # [[vector2, index], ...]
	var intersection_point: Vector2

	if intersection_data.empty():
		# poiščem najbližjo štartni točki
		var closest_point_on_closest_edge: Vector2 = operator.get_outline_segment_closest_to_point(intersection_vector_start, breaker_base_polygon)[1]
		intersection_point = closest_point_on_closest_edge
		printt(\"No intersection on hit vector ...  new closest point\", intersection_point, intersection_vector_start)
	if intersection_data.size() == 1:
		intersection_point = intersection_data[0][0]
	elif intersection_data.size() > 1: # več presečišč > izberem najbližjo štartu hit vektorja
		var closest_point_to_hit_start: Vector2
		var shortest_dist_to_hit_start: float = 0
		for intersection in intersection_data:
			var point: Vector2 = intersection[0]
			var point_to_hit_start_dist: float = (intersection_vector_pool[0] - point).length()
			if point_to_hit_start_dist < shortest_dist_to_hit_start or shortest_dist_to_hit_start == 0:
				shortest_dist_to_hit_start = point_to_hit_start_dist
				closest_point_to_hit_start = point
		intersection_point = closest_point_to_hit_start
	break_origin_global = intersection_point + global_position

	# opredelim velikost prilagodim hit polygon
	var influence_radius_per_unit: float = influence_radius / Sets.unit_one
	var simplify_round_count: int = 0
	if influence_radius_per_unit < 0.5:
		current_break_size = BREAK_SIZE.XSMALL
		simplify_round_count = 3
	elif influence_radius_per_unit < 1:
		current_break_size = BREAK_SIZE.SMALL
		simplify_round_count = 3
	elif influence_radius_per_unit < 2:
		current_break_size = BREAK_SIZE.MEDIUM
		simplify_round_count = 2
	elif influence_radius_per_unit < 3.5:
		current_break_size = BREAK_SIZE.LARGE
		simplify_round_count = 1
	else:
		current_break_size = BREAK_SIZE.XLARGE
		simplify_round_count = 1

	var simple_hit_polygon = operator.simplify_outline(hit_by_polygon, simplify_round_count)
#	printt (\"rad\", influence_radius_per_unit, influence_radius / Sets.unit_one)

	#		0:
	#			pass

		#	Mets.spawn_line_2d(intersection_vector_start + position, intersection_vector_end + position, get_parent())

	# break
	var transformed_hit_polygon: PoolVector2Array = operator.adapt_transforms_and_add_origin(simple_hit_polygon, break_origin_global, hit_shape_scale)
	#	var transformed_hit_polygon: PoolVector2Array = operator.adapt_transforms_and_add_origin(hit_by_polygon, break_origin_global, hit_shape_scale)
	_break_it(transformed_hit_polygon)


# BREJK (chunkization) ------------------------------------------------------------------------------------------------


func _break_it(slicing_polygon: PoolVector2Array):
	# podam
	var chunks_to_slice: Array = []

	# klipam, da dobim shape
	var clipped_polygons: Array = Geometry.clip_polygons_2d(breaker_base_polygon, slicing_polygon) # prazen je kadar se ne sekata ali pa je breaker znotraj šejpa (luknja)
	breaking_round += 1

	# break whole
	if clipped_polygons.empty(): # če slicer prekrije celoten shape > chunk
		print(\"Clipped_polygons je prazen >> brejkam celega\")
		chunks_to_slice.append(breaker_base_polygon)
		call_deferred(\"_slice_chunks\", [breaker_base_polygon], true)
	# break apart
	else:
		# dobim chunk shape
		var interecting_polygons: Array = Geometry.intersect_polygons_2d(slicing_polygon, breaker_base_polygon)
		if interecting_polygons.empty():  # zazih ... težko, da bilo prazno
			printt(\"Intersection empty ... no chunks. Clipped size \", clipped_polygons.size())
		self.breaker_base_polygon = clipped_polygons.pop_front()

		# hole, chunk, new breaker
		for poly in clipped_polygons:
			# hole
			if Geometry.is_polygon_clockwise(poly): # luknja ... operiram glavni poligon
				var holed_polygons: Array = operator.apply_hole(breaker_base_polygon, poly)
				self.breaker_base_polygon = holed_polygons[0]
				_break_it(holed_polygons[1])
				return
			# breaker
			else:
				_spawn_new_breaker(poly)
		# chunks
		if not current_hit_by_type == HIT_BY_TYPE.PAINT:
			for poly in interecting_polygons: # zazih ... skoraj ni mogoče, da bi bil notri več kot eden
				chunks_to_slice.append(poly)

		call_deferred(\"_slice_chunks\", chunks_to_slice)


func _cut_it(slice_line: Line2D):

	# adaptiram pozicijo poligon ... kot, da bi bil na poziciji cutting polija
	var slicing_line_adapted: PoolVector2Array = []
	for point in slice_line.points:
		# od globalne pozicije pike odštejem globalno pozicijo breakerja
		var point_to_local_position: Vector2 = point - position
		slicing_line_adapted.append(point_to_local_position)

	# je šel cut skozi?
	var cut_is_successful: bool = true
	for point in [slicing_line_adapted[0], slicing_line_adapted[slicing_line_adapted.size()-1]]:
		if Geometry.is_point_in_polygon(point, breaker_base_polygon):
			cut_is_successful = false
			return

	# odebelim linijo in jo klipam kot poligon
	var split_line_offset: float = 1
	var fat_split_line: PoolVector2Array = Geometry.offset_polyline_2d(slicing_line_adapted, split_line_offset)[0]
	var clipped_polygons: Array = Geometry.clip_polygons_2d(breaker_base_polygon, fat_split_line)

	# spawnam
	cut_breaks_shapes = 1
	match cut_breaks_shapes:
		0:
			self.breaker_base_polygon = clipped_polygons.pop_front()
			for poly in clipped_polygons:
				_spawn_new_breaker(poly)
		1:
			# opredelim index najvišjega, ki ga ostane trnueten braker
			var highest_center_y: float = 0
			var highest_polygon_index: int = 0
			for poly in clipped_polygons:
				var poly_center: Vector2 = operator.get_polygon_center(poly)
				if poly_center.y < highest_center_y or highest_center_y == 0 : # najvišji ima najnižji y
					highest_center_y = poly_center.y
					highest_polygon_index = clipped_polygons.find(poly)
			self.breaker_base_polygon = clipped_polygons.pop_at(highest_polygon_index)
			for poly in clipped_polygons:
				_spawn_new_breaker(poly, true)
		2:
			for poly in clipped_polygons:
				_spawn_new_breaker(poly, true)
			queue_free()


# SLAJS (debrization) -----------------------------------------------------------------------------------------------


func _slice_chunks(chunk_polygons: Array, slice_whole_breaker: bool = false, slice_with_crackers: bool = true):

#	var current_slicing_style: int = _get_slicing_style()

	# debug
	slice_with_crackers = true

	var spawned_chunks: Array = [] # da ji lahko potem zbriešm
	for chunk in chunk_polygons:
		var chunk_debry_polygons: Array
		#		var current_slicing_style = SLICE_STYLE.FRAGMENTS
		#		match current_slicing_style:
		#			SLICE_STYLE.NONE:
		#				chunk_derby_polygons.append(chunk)
		##			SLICE_STYLE.GRID_SQ:
		##				var grid_sliced_polygons: Array = operator.split_grid(chunk, 4)
		##				chunk_derby_polygons = grid_sliced_polygons[0]
		##				chunk_derby_polygons.append(grid_sliced_polygons[1])
		##			SLICE_STYLE.GRID_HEX:
		##				var grid_sliced_polygons: Array = operator.split_grid(chunk, 4)
		##				chunk_derby_polygons = grid_sliced_polygons[0]
		##				chunk_derby_polygons.append(grid_sliced_polygons[1])
		#			SLICE_STYLE.FRAGMENTS:
		#				chunk_derby_polygons = _split_chunk_to_polygons(chunk) # izbira stila glede na orodje in material
		#			SLICE_STYLE.BLAST:
		#				chunk_derby_polygons = _split_chunk_to_polygons(chunk)
		chunk_debry_polygons = _split_chunk_to_polygons(chunk)
		if slice_with_crackers:
			spawned_chunks.append(_spawn_chunk(chunk))
			var crackers_reveal
			var new_crackers = _spawn_cracers(chunk_debry_polygons, chunk) # _temp ne dela s signalom, a bi bilo bolje
			#			yield(new_crackers, \"cracks_animation_finished\")
			yield(get_tree().create_timer(new_crackers.crackers_reveal_time), \"timeout\")
		for debry_polygon in chunk_debry_polygons:
			_spawn_new_breaker(debry_polygon, false, true)
#		_spawn_debry(chunk_debry_polygons)


	for chunk in spawned_chunks:
		chunk.queue_free()

	if slice_whole_breaker:
		queue_free()


func _split_chunk_to_polygons(chunk_polygon: PoolVector2Array):
	# izbira stila glede na orodje in material

	var origin_position: Vector2 = break_origin_global - global_position
	var is_on_edge_distance: float = 10

	# origin type (edge index)
	var origin_edge_index: int
	var origin_location_on_shape: int = -1 # -1 = out, 1 = in, 0 = edge
	if Geometry.is_point_in_polygon(origin_position, chunk_polygon):
		origin_edge_index = operator.get_outline_segment_closest_to_point(origin_position, chunk_polygon, is_on_edge_distance)[0]
		if origin_edge_index == - 1: # -1 pomeni, da je znotraj poligona in ni na robu
			origin_location_on_shape = 1
		else:
			origin_location_on_shape = 0

	# origin location
	var sliced_chunk_polygons: Array
	var polygon_with_origin: PoolVector2Array = chunk_polygon
	match origin_location_on_shape:
		-1: # zunaj ... dodam origin in reclipam slicane poligone
			polygon_with_origin.append(origin_position)
			#			print(\"slice origin OUTSIDE\")
			#			sliced_chunk_polygons = operator.split_delaunay(chunk_polygon, 10)
		0: # edge ... splitam edge na origin točki
			#			print(\"slice origin EDGE\")
			polygon_with_origin.insert(origin_edge_index + 1, origin_position)
		1: # notri ... dodam origin
			polygon_with_origin.append(origin_position)
			#			print(\"slice on origin INSIDE\")
			#			var split_edge_length: int = 150
			#			chunk_polygon = operator.split_outline_to_length(chunk_polygon, split_edge_length)
			#			sliced_chunk_polygons = operator.split_spiderweb(chunk_polygon)

	# za delaunay
	var delaunay_add_points_count: int = 0
	var daisy_side_split_count: int = 0
	match current_break_size:
		BREAK_SIZE.XSMALL:
			delaunay_add_points_count = 0
			daisy_side_split_count = 0
		BREAK_SIZE.SMALL:
			delaunay_add_points_count = 2
			daisy_side_split_count = 0
		BREAK_SIZE.MEDIUM:
			delaunay_add_points_count = 6
			daisy_side_split_count = 1
		BREAK_SIZE.LARGE:
			delaunay_add_points_count = 10
			daisy_side_split_count = 3
		BREAK_SIZE.XLARGE:
			delaunay_add_points_count = 14
			daisy_side_split_count = 6

	# tool type

	#	var side_sliced_polygons: Array
	#	for poly in first_slice_polys:
	#		var new_poly = operator.split_outline_on_part(poly)
	#		side_sliced_polygons.append_array(operator.split_delaunay(new_poly))
	#	sliced_chunk_polygons = side_sliced_polygons
	#	sliced_chunk_polygons = operator.split_daisy(desplit_chunk_polygon, origin_edge_index + 1)[0]
	#	sliced_chunk_polygons = operator.split_spiderweb(desplit_chunk_polygon)

	var tool_slice_polygons: Array
	match current_hit_by_type:
		HIT_BY_TYPE.KNIFE: # delunay
			tool_slice_polygons = operator.split_delaunay(chunk_polygon, delaunay_add_points_count)
			pass
		HIT_BY_TYPE.HAMMER: # delunay
			tool_slice_polygons = operator.split_delaunay(chunk_polygon, delaunay_add_points_count)
		HIT_BY_TYPE.PAINT:#erase
			pass
		HIT_BY_TYPE.EXPLODING: # daisy / spiderweb
			tool_slice_polygons = operator.split_daisy(polygon_with_origin, origin_edge_index + 1)[0]
			pass

	sliced_chunk_polygons = tool_slice_polygons

	return sliced_chunk_polygons


# SPAWN ----------------------------------------------------------------------------------------------------------------


func _spawn_new_breaker(new_braker_polygon: PoolVector2Array, spawn_and_slice: bool = false, spawn_as_debry: bool = false):

	# spawn
	var new_breaker = Breaker.instance()
	if spawn_as_debry:
		# centraliziram polygon in globaliziram pozicijo
		var centralized_polygon_data: Array = operator.centralize_polygon_position(new_braker_polygon)
		var centralized_global_position: Vector2 = centralized_polygon_data[1] + position
		var centralized_breaker_polygon: PoolVector2Array = centralized_polygon_data[0]
		new_braker_polygon = centralized_polygon_data[0]
		new_breaker.name =  name + \"_Debry\"
		new_breaker.position = centralized_global_position
		new_breaker.is_breakable = false
		new_breaker.height = 0 # _temo debryshadows
		new_breaker.elevation = 0 # _temo debryshadows
	else:
		new_breaker.name = name + \"_Round_%d\" % breaking_round
		new_breaker.position = position
	new_breaker.breaker_world = breaker_world
	breaker_world.add_child(new_breaker)

	# setup
	if breaker_base.texture:
		_copy_texture_between_shapes(new_breaker.breaker_base, breaker_base)
		new_breaker.breaker_base.texture_offset = new_breaker.position - position # ne-debry je ZERO
	new_breaker.breaker_base.color = breaker_base.color
	new_breaker.break_origin_global = break_origin_global # za animacijo debryja

	# setgets ... mora bit po spawnu, da se izvede setget
	if spawn_as_debry: # _temp
		new_breaker.shape_edge_width = 2
		#		new_breaker.current_motion = new_breaker.MOTION.STILL
		new_breaker.current_motion = new_breaker.MOTION.EXPLODE
	new_breaker.breaker_base_polygon = new_braker_polygon
	if spawn_and_slice:
		new_breaker.call_deferred(\"_slice_chunks\", [new_breaker.breaker_base_polygon], true)


func _spawn_chunk(new_chunk_polygon: PoolVector2Array):

	var new_poly: Polygon2D = Polygon2D.new()
	new_poly.polygon = new_chunk_polygon
	new_poly.color = breaker_base.color
	add_child(new_poly)

	if breaker_base.texture:
		_copy_texture_between_shapes(new_poly, breaker_base)

	return new_poly


func _spawn_cracers(cracked_polygons: Array, chunk_polygon: PoolVector2Array):
	# po animaciji se kvefrijajo

	var new_cracers = CrackerBox.instance()
	new_cracers.breaker_position =  position
	new_cracers.break_origin_global = break_origin_global
	new_cracers.cracked_polygons = cracked_polygons
	new_cracers.chunk_polygon = chunk_polygon
	new_cracers.breaker_shape = breaker_base
	add_child(new_cracers)

	return new_cracers


# UTILITI ----------------------------------------------------------------------------------------------------------------


func _on_SS2D_dirty_update(): # samo SS2D breaker

	self.breaker_base_polygon = collision_shape.polygon


func _copy_texture_between_shapes(copy_to: Polygon2D, copy_from: Polygon2D):

	copy_to.texture = copy_from.texture
	copy_to.texture_offset = copy_from.texture_offset
	copy_to.rotation_degrees = copy_from.rotation_degrees
	copy_to.texture_scale = copy_from.texture_scale


func _get_slicing_style(sliced_by_type: int = current_hit_by_type):

	var material_tool_combo: Array = [current_material, sliced_by_type]
	var slice_style: int

	match sliced_by_type:
		HIT_BY_TYPE.HAMMER:
			slice_style = SLICE_STYLE.FRAGMENTS
		HIT_BY_TYPE.KNIFE:
			slice_style = SLICE_STYLE.FRAGMENTS
		HIT_BY_TYPE.PAINT:
			slice_style = SLICE_STYLE.FRAGMENTS
		HIT_BY_TYPE.ROCKET:
			pass

	return slice_style


func _on_change_breaker_shape(new_breaker_polygon: PoolVector2Array):

	breaker_base_polygon = new_breaker_polygon
	breaker_base.polygon = breaker_base_polygon
	edge_shape.polygon = breaker_base_polygon
	self.shape_edge_width = shape_edge_width
	collision_shape.set_deferred(\"polygon\", breaker_base_polygon)

	$PolygonShadow._update_shadow_polygon()


func _on_change_motion(new_motion_state: int):

	current_motion =  new_motion_state

	# _temp
	if not current_motion == MOTION.STILL:
		current_motion =  MOTION.MINIMIZE

	match current_motion:
		MOTION.STILL:
#			mode = RigidBody2D.MODE_STATIC
			set_deferred(\"mode\", RigidBody2D.MODE_STATIC)
		MOTION.FALL:
			gravity_scale = 1
			set_deferred(\"mode\", RigidBody2D.MODE_RIGID)
		MOTION.EXPLODE:
			gravity_scale = 0
#			mode = RigidBody2D.MODE_RIGID
			set_deferred(\"mode\", RigidBody2D.MODE_RIGID)
			linear_damp = 2
			var force_vector = global_position - break_origin_global
			apply_central_impulse(force_vector * 20)
		MOTION.DISSAPEAR:
			set_deferred(\"mode\", RigidBody2D.MODE_RIGID)
			gravity_scale = 0
			randomize()
			var random_duration: float = (randi() % 5 + 5)/10.0
			var random_delay: float = (randi() % 3)/10
			var dissolve_tween = get_tree().create_tween()
			dissolve_tween.tween_property(self, \"modulate:a\", 0, random_duration).set_delay(random_delay)
			yield(dissolve_tween, \"finished\")
			queue_free()
		MOTION.MINIMIZE:
			set_deferred(\"mode\", RigidBody2D.MODE_RIGID)
			gravity_scale = 0
			randomize()
			var random_duration: float = (randi() % 5 + 5)/10.0
			var random_delay: float = (randi() % 3)/10
			var minimize_tween = get_tree().create_tween()
			minimize_tween.tween_property(self, \"scale\", Vector2.ZERO, random_duration).set_delay(random_delay)
			yield(minimize_tween, \"finished\")
			queue_free()
		MOTION.CRACK:
			pass


func _on_change_shape_edge_width(new_width: float):

	if edge_shape:
		var offset_polygons: Array = Geometry.offset_polygon_2d(edge_shape.polygon, new_width)
		if offset_polygons.size() == 1:
			edge_shape.polygon = offset_polygons[0]
			shape_edge_width = new_width # šele tukaj, da ne morem setat, če je error
		else:
			shape_edge_width = new_width / 2
			#			printt(\"Breaker offset to big (multiple inset_polygons) ... polovička\", shape_edge_width)


func _on_VisibilityNotifier2D_screen_exited() -> void:

	pass
"

[sub_resource type="PhysicsMaterial" id=11777]
friction = 0.0

[sub_resource type="Resource" id=11760]
script = ExtResource( 13 )
texture_idx = 3
flip = false
width = 1.0

[sub_resource type="Resource" id=11761]
script = ExtResource( 7 )
position = Vector2( -256.439, -192.178 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11760 )

[sub_resource type="Resource" id=11762]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11763]
script = ExtResource( 7 )
position = Vector2( 1408, -192 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11762 )

[sub_resource type="Resource" id=11764]
script = ExtResource( 13 )
texture_idx = -1
flip = false
width = 1.0

[sub_resource type="Resource" id=11765]
script = ExtResource( 7 )
position = Vector2( 1408, 264 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11764 )

[sub_resource type="Resource" id=11766]
script = ExtResource( 13 )
texture_idx = 3
flip = false
width = 1.0

[sub_resource type="Resource" id=11767]
script = ExtResource( 7 )
position = Vector2( -256.439, -192.178 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11766 )

[sub_resource type="Resource" id=11768]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11769]
script = ExtResource( 7 )
position = Vector2( -256, 1152 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11768 )

[sub_resource type="Resource" id=11770]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11771]
script = ExtResource( 7 )
position = Vector2( 320, 264 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11770 )

[sub_resource type="Resource" id=11772]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11773]
script = ExtResource( 7 )
position = Vector2( 128, 1152 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11772 )

[sub_resource type="Resource" id=11774]
script = ExtResource( 13 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=11775]
script = ExtResource( 7 )
position = Vector2( 128, 448 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 11774 )

[sub_resource type="Resource" id=11776]
script = ExtResource( 6 )
_points = {
0: SubResource( 11761 ),
1: SubResource( 11763 ),
2: SubResource( 11765 ),
3: SubResource( 11767 ),
4: SubResource( 11769 ),
6: SubResource( 11771 ),
7: SubResource( 11773 ),
8: SubResource( 11775 )
}
_point_order = [ 0, 1, 2, 6, 8, 7, 4, 3 ]
_constraints = {
[ 0, 3 ]: 15
}
_next_key = 10
_material_overrides = {
}

[sub_resource type="NavigationPolygon" id=10545]
vertices = PoolVector2Array( 3933, 1480, 5836, 418, 5851, 1566, 3862, 1537, 505, 1587, 505, 461, 3149, 1038, 3606, 1131, 2838, 1542, 2708, 1459, 2693, 1209 )
polygons = [ PoolIntArray( 0, 1, 2, 3 ), PoolIntArray( 4, 5, 1, 6 ), PoolIntArray( 1, 0, 7 ), PoolIntArray( 3, 2, 4, 8 ), PoolIntArray( 9, 8, 4 ), PoolIntArray( 10, 9, 4 ), PoolIntArray( 1, 7, 6 ), PoolIntArray( 4, 6, 10 ) ]
outlines = [ PoolVector2Array( 505, 461, 505, 1587, 5851, 1566, 5836, 418 ), PoolVector2Array( 2693, 1209, 2708, 1459, 2838, 1542, 3862, 1537, 3933, 1480, 3606, 1131, 3149, 1038 ) ]

[sub_resource type="RectangleShape2D" id=622]
extents = Vector2( 144, 4 )

[sub_resource type="Curve2D" id=11208]
_data = {
"points": PoolVector2Array(  )
}

[sub_resource type="Image" id=11778]
data = {
"data": PoolByteArray
"format": "RGBA8",
"height": 32,
"mipmaps": false,
"width": 32
}

[sub_resource type="ImageTexture" id=11379]
flags = 3
flags = 3
image = SubResource( 11778 )
size = Vector2( 32, 32 )
script = ExtResource( 2 )
atlas = ExtResource( 4 )
region = Rect2( 0, 0, 32, 32 )
margin = Rect2( 0, 0, 0, 0 )
margin_color = Color( 1, 0, 0, 0 )
repeat = true

[sub_resource type="RectangleShape2D" id=2923]
extents = Vector2( 512, 24 )

[sub_resource type="CanvasItemMaterial" id=11038]
blend_mode = 1

[sub_resource type="Image" id=11779]
data = {
"data": PoolByteArray
"format": "RGBA8",
"height": 32,
"mipmaps": false,
"width": 32
}

[sub_resource type="ImageTexture" id=11624]
flags = 3
flags = 3
image = SubResource( 11779 )
size = Vector2( 32, 32 )
script = ExtResource( 2 )
atlas = ExtResource( 4 )
region = Rect2( 32, 0, 32, 32 )
margin = Rect2( 0, 0, 0, 0 )
margin_color = Color( 1, 0, 0, 0 )
repeat = true

[sub_resource type="RectangleShape2D" id=514]
extents = Vector2( 512, 16 )

[sub_resource type="StyleBoxFlat" id=613]
bg_color = Color( 0.6, 0.6, 0.6, 0.294118 )
draw_center = false
border_width_left = 4
border_width_top = 4
border_width_right = 4
border_width_bottom = 4

[node name="Level" type="Node2D"]
script = ExtResource( 27 )
__meta__ = {
"_edit_vertical_guides_": [ 1152.0 ],
"_editor_description_": ""
}
level_type = 3

[node name="Background" type="Node2D" parent="."]
z_index = -4
__meta__ = {
"_edit_lock_": true
}

[node name="Background" type="ColorRect" parent="Background"]
show_behind_parent = true
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 31.0
margin_top = 25.0
margin_right = 3031.0
margin_bottom = 2049.0
color = Color( 0.882353, 0.85098, 0.835294, 1 )

[node name="Background2" type="ColorRect" parent="Background"]
visible = false
show_behind_parent = true
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 31.0
margin_top = 25.0
margin_right = 3031.0
margin_bottom = 2049.0
color = Color( 0.882353, 0.85098, 0.835294, 1 )

[node name="Ground" type="Node2D" parent="."]
z_index = -1

[node name="BackColor" type="ColorRect" parent="Ground"]
show_behind_parent = true
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = -888.0
margin_top = -1016.0
margin_right = 11283.0
margin_bottom = 10012.0
color = Color( 0.490196, 0.443137, 0.423529, 1 )

[node name="ShaderCanvasRect_SidewalkDirt" parent="Ground" instance=ExtResource( 16 )]
visible = false
modulate = Color( 0.764706, 0.717647, 0.694118, 1 )
material = ExtResource( 11 )
margin_left = 4834.0
margin_top = 641.0
margin_right = 6915.0
margin_bottom = 2466.0

[node name="ShaderTextureRect_LineartTerrain" parent="Ground" instance=ExtResource( 23 )]
visible = false
material = ExtResource( 17 )
margin_left = 2554.0
margin_top = -1473.0
margin_right = 4554.0
margin_bottom = 527.0
texture = SubResource( 10547 )

[node name="ShaderTextureRect_Dust" parent="Ground" instance=ExtResource( 23 )]
visible = false
material = ExtResource( 19 )
margin_left = 1842.0
margin_top = -1513.0
margin_right = 3842.0
margin_bottom = 2215.0
texture = ExtResource( 14 )

[node name="StreetAsphalt" parent="Ground" instance=ExtResource( 38 )]
position = Vector2( 4831, 3644 )
__meta__ = {
"_edit_group_": true
}

[node name="StreetSS2D" parent="Ground/StreetAsphalt" index="0"]
_points = SubResource( 11703 )

[node name="CollisionPolygon2D" parent="Ground/StreetAsphalt" index="1"]
polygon = PoolVector2Array( -2641.65, 3233.01, -2339.93, 3242.98, -2033.19, 3232.61, -1662.83, 3193.04, -1263.58, 3109.47, -1081.48, 3052.32, -903.557, 2980.51, -741.397, 2896.1, -591.573, 2794.23, -534.497, 2746.38, -476.772, 2690.92, -424.52, 2632.41, -382.717, 2578.01, -335.717, 2497.09, -327.774, 2478.31, -320.321, 2457.21, -316.125, 2441.09, -314.096, 2428.92, -313.403, 2419.43, -313.572, 2411.14, -314.518, 2402.65, -316.48, 2392.76, -319.904, 2380.56, -322.67, 2372.12, -344.607, 2324.57, -371.072, 2279.58, -594.661, 1970.71, -663.252, 1862.55, -792.792, 1483.92, -806.085, 994.313, -792.125, 801.68, -766.988, 629.726, -729.912, 470.207, -680.964, 322.824, -621.561, 188.541, -546.059, 54.7991, -176.158, -430.178, -80.6963, -573.164, -57.4717, -655.863, -49.6309, -692.919, -43.8867, -732.003, -41.502, -765.846, -41.7773, -795.008, -44.126, -820.247, -48.1426, -842.479, -53.6523, -862.699, -60.7266, -881.88, -69.6504, -900.88, -80.8584, -920.362, -94.8525, -940.76, -106.691, -956.066, -158.841, -1009.35, -221.429, -1058.75, -300.914, -1109.33, -396.371, -1159.14, -499.995, -1204.27, -762.27, -1291.64, -1043.04, -1357.9, -1662.67, -1444.29, -2222.92, -1475.51, -2803.9, -1470.47, -2812.14, -2470.43, -2199.06, -2475.23, -1565.48, -2439.56, -858.93, -2340.8, -489.225, -2253.64, -142.621, -2138.23, 34.8159, -2061.4, 200.685, -1974.43, 359.679, -1872.58, 509.611, -1753.1, 640.912, -1620.21, 708.924, -1535.69, 766.347, -1451.63, 817.732, -1361.91, 862.189, -1266.88, 898.895, -1167.09, 927.174, -1063.29, 946.568, -956.356, 956.861, -847.18, 958.069, -736.573, 950.393, -625.189, 934.14, -513.487, 907.659, -394.095, 823.712, -146.496, 643.251, 143.031, 289.877, 603.627, 273.202, 635.082, 251.868, 683.136, 232.771, 740.84, 215.742, 814.771, 201.965, 910.243, 193.456, 1024.62, 199.756, 1362.06, 204.9, 1366.25, 232.407, 1408.61, 466.294, 1732.94, 541.357, 1860.82, 603.366, 1994.68, 634.036, 2080.57, 657.319, 2165.35, 674.557, 2255.24, 684.527, 2349.52, 686.212, 2447.16, 678.919, 2546.9, 662.344, 2647.48, 636.542, 2747.75, 601.822, 2846.89, 554.642, 2952.35, 449.431, 3132.57, 347.873, 3267.56, 243.438, 3384.68, 132.325, 3491.59, 9.58203, 3593.36, -228.485, 3754.54, -484.071, 3888.27, -744.365, 3993.79, -1011.59, 4077.2, -1506.75, 4180.78, -1962.65, 4230.12, -2339, 4242.98, -2673.77, 4232.49 )

[node name="StreetConcrete" parent="Ground" instance=ExtResource( 36 )]
position = Vector2( 0, 3664 )
__meta__ = {
"_edit_group_": true
}

[node name="StreetSS2D" parent="Ground/StreetConcrete" index="0"]
_points = SubResource( 11718 )

[node name="CollisionPolygon2D" parent="Ground/StreetConcrete" index="1"]
polygon = PoolVector2Array( 2196.17, 4225.62, 758.942, 4076.75, 786.594, 2020.85, 2697.17, 2006.32, 2678.29, 926.105, 726.645, 906.438, 605.403, -2551.55, 1605.38, -2544.31, 1439.19, 204.816, 3383.55, 217.149, 3412.67, 2704.94, 1491.25, 2730.41, 1471.98, 3375.63, 2195.65, 3225.62 )

[node name="Surfaces" type="Node2D" parent="Ground"]

[node name="SurfaceGravel" parent="Ground/Surfaces" instance=ExtResource( 8 )]
position = Vector2( 2048, 448 )

[node name="SS2D_Shape_Closed" parent="Ground/Surfaces/SurfaceGravel" index="0"]
_points = SubResource( 11729 )

[node name="CollisionPolygon2D" parent="Ground/Surfaces/SurfaceGravel" index="1"]
polygon = PoolVector2Array( 448.104, -0.103546, 448.104, 640.104, -0.103516, 640.104, -0.103516, -0.103546 )

[node name="SurfaceNitro" parent="Ground/Surfaces" instance=ExtResource( 12 )]
position = Vector2( 2688, 448 )

[node name="SS2D_Shape_Closed" parent="Ground/Surfaces/SurfaceNitro" index="0"]
_points = SubResource( 11740 )

[node name="CollisionPolygon2D" parent="Ground/Surfaces/SurfaceNitro" index="1"]
polygon = PoolVector2Array( 1344.1, -0.103546, 1344.1, 320.104, -0.103516, 320.104, -0.103516, -0.103546 )

[node name="SurfaceHole" parent="Ground/Surfaces" instance=ExtResource( 37 )]
position = Vector2( 2944, 640 )

[node name="CameraLimits" type="Panel" parent="."]
margin_right = 6160.0
margin_bottom = 8384.0
theme = ExtResource( 3 )
__meta__ = {
"_edit_lock_": true
}

[node name="Terrain" type="Node2D" parent="."]

[node name="TerrainMountain" parent="Terrain" instance=ExtResource( 5 )]
position = Vector2( 88, 2088 )
height = 50.0

[node name="ObjectShapeSS2D" parent="Terrain/TerrainMountain" index="1"]
_points = SubResource( 11759 )
shape_material = SubResource( 1823 )

[node name="CollisionPolygon2D" parent="Terrain/TerrainMountain" index="2"]
polygon = PoolVector2Array( 53.7048, 2029.07, -0.108299, -0.105469, 384.043, -0.0666504, 388.75, 10.3574, 399.925, 41.1323, 412.913, 91.8779, 423.103, 162.148, 425.882, 251.496, 416.638, 359.476, 390.761, 485.64, 343.637, 629.542, 319.087, 700.406, 303.997, 760.906, 297.278, 811.844, 296.719, 833.975, 297.845, 854.016, 300.521, 872.065, 304.611, 888.223, 309.98, 902.588, 316.49, 915.263, 324.007, 926.345, 332.394, 935.935, 341.517, 944.133, 351.238, 951.039, 361.422, 956.753, 371.934, 961.374, 382.637, 965.002, 393.396, 967.738, 414.538, 970.931, 434.272, 971.751, 465.173, 969.472, 477.691, 967.127, 295.801, 1182.57, 295.781, 1381.01, 413.579, 1677.03 )

[node name="BreakerConcrete" parent="Terrain" instance=ExtResource( 9 )]
position = Vector2( 1373, 2122 )
physics_material_override = SubResource( 1 )
script = SubResource( 11692 )

[node name="BreakerClosedSS2D" parent="Terrain" instance=ExtResource( 39 )]
position = Vector2( 1419, 2511 )
physics_material_override = SubResource( 1 )
script = SubResource( 11692 )

[node name="BreakerOpenSS2D" parent="Terrain" instance=ExtResource( 40 )]
position = Vector2( 901, 2154 )
physics_material_override = SubResource( 1 )
script = SubResource( 11692 )

[node name="RigidObject" parent="Terrain" instance=ExtResource( 47 )]
position = Vector2( -486, 2827 )

[node name="BreakerRigid" parent="Terrain" instance=ExtResource( 47 )]
position = Vector2( -522, 2311 )

[node name="KinematicBody2D" type="KinematicBody2D" parent="Terrain"]
position = Vector2( -469, 3392 )
script = ExtResource( 45 )
__meta__ = {
"_edit_group_": true
}

[node name="PolygonShadow" parent="Terrain/KinematicBody2D" instance=ExtResource( 44 )]
shadow_casting_polygon_path = NodePath("../BreakerShape")

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="Terrain/KinematicBody2D"]
polygon = PoolVector2Array( 7, -5, 247, -1, 409, 150, 186, 337, 7, 339 )

[node name="BreakerShape" parent="Terrain/KinematicBody2D" instance=ExtResource( 46 )]
visible = false

[node name="BreakerRigidConcrete" parent="Terrain" instance=ExtResource( 43 )]
position = Vector2( 672, 2858 )
physics_material_override = SubResource( 11777 )

[node name="Objects" type="Node2D" parent="."]
z_index = 1

[node name="Objects" type="TileMap" parent="Objects"]
position = Vector2( -3, 0 )
tile_set = ExtResource( 26 )
bake_navigation = true
format = 1
tile_data = PoolIntArray( 1179675, 45, 0, 1179676, 45, 0, 1179677, 45, 0, 1245211, 45, 0, 1245212, 45, 0, 1245213, 45, 0, 1310747, 45, 0, 1310748, 45, 0, 1310749, 45, 0, 1376283, 45, 0, 1376284, 45, 0, 1376285, 45, 0, 1441819, 45, 0, 1441820, 45, 0, 1441821, 45, 0, 1507355, 45, 0, 1507356, 45, 0, 1507357, 45, 0, 1572891, 45, 0, 1572892, 45, 0, 1572893, 45, 0, 1638427, 45, 0, 1638428, 45, 0, 1638429, 45, 0, 1703963, 45, 0, 1703964, 45, 0, 1703965, 45, 0, 1769499, 45, 0, 1769500, 45, 0, 1769501, 45, 0, 1835035, 45, 0, 1835036, 45, 0, 1835037, 45, 0, 1900571, 45, 0, 1900572, 45, 0, 1900573, 45, 0, 1966107, 45, 0, 1966108, 45, 0, 1966109, 45, 0, 2031643, 45, 0, 2031644, 45, 0, 2031645, 45, 0, 2162715, 41, 0, 2162716, 41, 0, 2162717, 41, 0, 2228251, 41, 0, 2228252, 41, 0, 2228253, 41, 0, 2293787, 41, 0, 2293788, 41, 0, 2293789, 41, 0, 2293792, 44, 0, 2293793, 44, 0, 2293794, 44, 0, 2359323, 41, 0, 2359324, 41, 0, 2359325, 41, 0, 2359328, 44, 0, 2359329, 44, 0, 2359330, 44, 0, 2424859, 41, 0, 2424860, 41, 0, 2424861, 41, 0, 2424864, 44, 0, 2424865, 44, 0, 2424866, 44, 0, 2752539, 43, 0, 2752540, 43, 0, 2752541, 43, 0, 2752544, 42, 0, 2752545, 42, 0, 2752546, 42, 0, 2818075, 43, 0, 2818076, 43, 0, 2818077, 43, 0, 2818080, 42, 0, 2818081, 42, 0, 2818082, 42, 0, 2883611, 43, 0, 2883612, 43, 0, 2883613, 43, 0, 2883616, 42, 0, 2883617, 42, 0, 2883618, 42, 0, 2949147, 43, 0, 2949148, 43, 0, 2949149, 43, 0, 2949152, 42, 0, 2949153, 42, 0, 2949154, 42, 0, 3014683, 43, 0, 3014684, 43, 0, 3014685, 43, 0, 3014688, 42, 0, 3014689, 42, 0, 3014690, 42, 0, 4522070, 14, 0, 4522075, 15, 0, 4522080, 17, 0, 4849750, 18, 0, 4849755, 19, 0, 4849760, 20, 0, 5177430, 27, 0, 5177435, 31, 0, 5177440, 35, 0, 5505110, 30, 0, 5505115, 22, 0 )

[node name="GoalPillar" parent="Objects" instance=ExtResource( 10 )]
position = Vector2( 4288, 600 )

[node name="Pickables" type="Node2D" parent="."]

[node name="PickableBullet" parent="Pickables" instance=ExtResource( 33 )]
position = Vector2( 2693, 2430 )

[node name="PickableCash" parent="Pickables" instance=ExtResource( 18 )]
position = Vector2( 2680, 2607 )

[node name="PickableGas" parent="Pickables" instance=ExtResource( 25 )]
position = Vector2( 2872, 2609 )

[node name="PickableHealth" parent="Pickables" instance=ExtResource( 15 )]
position = Vector2( 2682, 2791 )

[node name="PickableLife" parent="Pickables" instance=ExtResource( 32 )]
position = Vector2( 2880, 2791 )

[node name="PickableMina" parent="Pickables" instance=ExtResource( 28 )]
position = Vector2( 2493, 2426 )

[node name="PickableMisile" parent="Pickables" instance=ExtResource( 29 )]
position = Vector2( 2878, 2434 )

[node name="PickableNitro" parent="Pickables" instance=ExtResource( 31 )]
position = Vector2( 2493, 2608 )

[node name="PickableRandom" parent="Pickables" instance=ExtResource( 34 )]
position = Vector2( 2882, 2959 )

[node name="PickableRandom3" parent="Pickables" instance=ExtResource( 34 )]
position = Vector2( 2482, 2955 )

[node name="PickableRandom2" parent="Pickables" instance=ExtResource( 34 )]
position = Vector2( 2681, 2958 )

[node name="PickableShield" parent="Pickables" instance=ExtResource( 30 )]
position = Vector2( 2487, 2788 )

[node name="Building" parent="." instance=ExtResource( 35 )]
position = Vector2( 72, 560 )

[node name="SS2D_Shape_Closed" parent="Building" index="1"]
_points = SubResource( 11776 )

[node name="CollisionPolygon2D" parent="Building" index="2"]
polygon = PoolVector2Array( -0.542603, -0.281555, 1664.1, -0.103516, 1664.1, 456.104, 576.013, 456.033, 384.037, 640.016, 384.104, 1344.1, -0.103455, 1344.1 )

[node name="NavigationPolygonInstance" type="NavigationPolygonInstance" parent="."]
visible = false
position = Vector2( 0, 8 )
navpoly = SubResource( 10545 )

[node name="Racing" type="Node" parent="."]

[node name="LevelStart" type="Node2D" parent="Racing"]
position = Vector2( 1152, 3200 )

[node name="StartLights" parent="Racing/LevelStart" instance=ExtResource( 22 )]
position = Vector2( -7.62939e-06, -120 )

[node name="StartLine" type="Area2D" parent="Racing/LevelStart"]
monitoring = false
monitorable = false
__meta__ = {
"_edit_group_": true
}

[node name="CollisionPolygon2D" type="CollisionShape2D" parent="Racing/LevelStart/StartLine"]
visible = false
position = Vector2( 0, 4 )
shape = SubResource( 622 )
disabled = true

[node name="ColorRect" type="ColorRect" parent="Racing/LevelStart/StartLine"]
margin_left = -496.0
margin_top = -24.0
margin_right = 496.0
margin_bottom = 24.0
grow_horizontal = 2

[node name="CameraPosition" type="Position2D" parent="Racing/LevelStart"]

[node name="DriveInPosition" type="Position2D" parent="Racing/LevelStart"]
position = Vector2( 0, 1024 )
__meta__ = {
"_edit_group_": true
}

[node name="Line2d" type="Line2D" parent="Racing/LevelStart/DriveInPosition"]
position = Vector2( -72, 0 )
points = PoolVector2Array( -376, 0, 520, 0 )
default_color = Color( 1, 0, 1, 1 )

[node name="StartPositions" type="Node2D" parent="Racing/LevelStart"]
modulate = Color( 1, 1, 1, 0.470588 )
position = Vector2( 0, 192 )

[node name="StartPosition1" parent="Racing/LevelStart/StartPositions" instance=ExtResource( 21 )]
position = Vector2( -335, 5 )

[node name="StartPosition2" parent="Racing/LevelStart/StartPositions" instance=ExtResource( 21 )]
position = Vector2( -104, 0 )

[node name="StartPosition3" parent="Racing/LevelStart/StartPositions" instance=ExtResource( 21 )]
position = Vector2( 104, 0 )

[node name="StartPosition4" parent="Racing/LevelStart/StartPositions" instance=ExtResource( 21 )]
position = Vector2( 312, 0 )

[node name="LevelTrack" type="Path2D" parent="Racing"]
curve = SubResource( 11208 )
script = ExtResource( 24 )

[node name="BoltTracker" type="PathFollow2D" parent="Racing/LevelTrack"]
position = Vector2( 624, 1104 )
rotation = -1.46016
script = ExtResource( 20 )

[node name="CrossIndicator" type="Sprite" parent="Racing/LevelTrack/BoltTracker"]
scale = Vector2( 2, 2 )
texture = ExtResource( 1 )

[node name="LevelFinish" type="Node2D" parent="Racing"]
position = Vector2( 1152, 1576 )
__meta__ = {
"_edit_group_": true
}

[node name="FinishLine" type="Area2D" parent="Racing/LevelFinish"]
monitoring = false
monitorable = false
__meta__ = {
"_edit_group_": true
}

[node name="Line" type="TextureRect" parent="Racing/LevelFinish/FinishLine"]
margin_left = -512.0
margin_top = -24.0
margin_right = 512.0
margin_bottom = 24.0
grow_horizontal = 2
texture = SubResource( 11379 )
stretch_mode = 2

[node name="CollisionPolygon2D" type="CollisionShape2D" parent="Racing/LevelFinish/FinishLine"]
shape = SubResource( 2923 )

[node name="CameraPosition" type="Position2D" parent="Racing/LevelFinish"]

[node name="DriveOutPosition" type="Position2D" parent="Racing/LevelFinish"]
position = Vector2( 0, -1024 )
__meta__ = {
"_edit_group_": true
}

[node name="Line2d" type="Line2D" parent="Racing/LevelFinish/DriveOutPosition"]
position = Vector2( -72, 0 )
points = PoolVector2Array( -320, 0, 472, 0 )
default_color = Color( 1, 0, 1, 1 )

[node name="Checkpoint" type="Area2D" parent="Racing"]
position = Vector2( 2249, 3424 )
monitoring = false
monitorable = false
__meta__ = {
"_edit_group_": true
}

[node name="Line" type="TextureRect" parent="Racing/Checkpoint"]
material = SubResource( 11038 )
margin_left = -512.0
margin_top = -16.0
margin_right = 512.0
margin_bottom = 16.0
grow_horizontal = 2
texture = SubResource( 11624 )
stretch_mode = 2

[node name="CollisionPolygon2D" type="CollisionShape2D" parent="Racing/Checkpoint"]
shape = SubResource( 514 )

[node name="__StartPositions" type="Node2D" parent="Racing"]
visible = false
modulate = Color( 1, 1, 1, 0.470588 )
position = Vector2( 1152, 3392 )

[node name="StartPosition1" parent="Racing/__StartPositions" instance=ExtResource( 21 )]
position = Vector2( -312, 0 )

[node name="StartPosition2" parent="Racing/__StartPositions" instance=ExtResource( 21 )]
position = Vector2( -104, 0 )

[node name="StartPosition3" parent="Racing/__StartPositions" instance=ExtResource( 21 )]
position = Vector2( 104, 0 )

[node name="StartPosition4" parent="Racing/__StartPositions" instance=ExtResource( 21 )]
position = Vector2( 312, 0 )

[node name="__ScreenSize" type="Panel" parent="."]
modulate = Color( 0.952941, 0.356863, 0.498039, 1 )
margin_right = 2560.0
margin_bottom = 1440.0
custom_styles/panel = SubResource( 613 )
__meta__ = {
"_edit_lock_": true
}

[node name="Labels" type="Node2D" parent="."]

[node name="_note" type="Label" parent="Labels"]
margin_left = 64.0
margin_top = 80.0
margin_right = 714.0
margin_bottom = 383.0
theme = ExtResource( 3 )
text = "Z INDEX
- background = -10
- ground terrain < -1
- flat objects and default = 0
- not flat or floating object = 1 - 9
- sky > 10"

[node name="Label" type="Label" parent="Labels"]
margin_left = 2064.0
margin_top = 168.0
margin_right = 3581.0
margin_bottom = 369.0
theme = ExtResource( 3 )
text = "Surfaces
- plain podlagi podaš SURFACE_TYPE za lastnosti
- plain podlaga je inherit parent (lahko tudi samo menjaš material v exportu)
- bolt zazna na kateri podlagi je in prilagodi vožnjo "

[node name="Label2" type="Label" parent="Labels"]
margin_left = 1752.0
margin_top = 3127.0
margin_right = 3162.0
margin_bottom = 3370.0
theme = ExtResource( 3 )
text = "Čekpojnts
- player beleži prevožene čekpointe (čekpoint mu pošlje samo sebe)
- če je čekpoint že zabeležen za ta krog, se ne zgodi nič
- ko plejer prevozi ciljno črto, GM preveri, če so vsi čekpointi prevoženi"

[node name="Label3" type="Label" parent="Labels"]
margin_left = 2992.0
margin_top = 2832.0
margin_right = 3933.0
margin_bottom = 3016.0
theme = ExtResource( 3 )
text = "Pikables
- ob pobiranju kliče na plejerju on item picked 
- pleyer aplicira posledice glede na PICKABLE"

[node name="BreakerRigid" parent="." instance=ExtResource( 47 )]
position = Vector2( -619, 1779 )

[connection signal="body_entered" from="Racing/LevelFinish/FinishLine" to="." method="_on_FinishLine_body_entered"]
[connection signal="body_entered" from="Racing/Checkpoint" to="." method="_on_Checkpoint_body_entered"]

[editable path="Ground/StreetAsphalt"]
[editable path="Ground/StreetConcrete"]
[editable path="Ground/Surfaces/SurfaceGravel"]
[editable path="Ground/Surfaces/SurfaceNitro"]
[editable path="Terrain/TerrainMountain"]
[editable path="Building"]
