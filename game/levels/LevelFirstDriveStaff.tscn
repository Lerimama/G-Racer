[gd_scene load_steps=247 format=2]

[ext_resource path="res://game/level/breakers/breaker_versions/Breaker_ClosedSS2D.tscn" type="PackedScene" id=1]
[ext_resource path="res://game/level/breakers/BreakerRigidConcrete.tscn" type="PackedScene" id=2]
[ext_resource path="res://game/level/Level.tscn" type="PackedScene" id=3]
[ext_resource path="res://game/level/pickables/PickableGun.tscn" type="PackedScene" id=4]
[ext_resource path="res://addons/rmsmartshape/shapes/point_array.gd" type="Script" id=5]
[ext_resource path="res://game/level/pickables/PickableLauncher.tscn" type="PackedScene" id=6]
[ext_resource path="res://game/level/pickables/PickableDropper.tscn" type="PackedScene" id=7]
[ext_resource path="res://game/level/pickables/PickableCash.tscn" type="PackedScene" id=8]
[ext_resource path="res://game/level/objects/GoalPillar.tscn" type="PackedScene" id=9]
[ext_resource path="res://assets/tileset_pallete.png" type="Texture" id=10]
[ext_resource path="res://game/level/ground/streets/StreetConcrete_SS2D.tscn" type="PackedScene" id=11]
[ext_resource path="res://addons/rmsmartshape/materials/shape_material.gd" type="Script" id=12]
[ext_resource path="res://addons/rmsmartshape/shapes/point.gd" type="Script" id=13]
[ext_resource path="res://game/level/pickables/PickableGas.tscn" type="PackedScene" id=14]
[ext_resource path="res://addons/rmsmartshape/vertex_properties.gd" type="Script" id=15]
[ext_resource path="res://game/level/ground/surfaces/SurfaceGravel_SS2D.tscn" type="PackedScene" id=16]
[ext_resource path="res://game/level/ground/streets/StreetAsphalt_SS2D.tscn" type="PackedScene" id=17]
[ext_resource path="res://game/level/ground/surfaces/SurfaceNitro_SS2D.tscn" type="PackedScene" id=18]
[ext_resource path="res://game/level/ground/surfaces/SurfaceHole_SS2D.tscn" type="PackedScene" id=19]
[ext_resource path="res://game/level/breakers/BreakerRigid.tscn" type="PackedScene" id=20]
[ext_resource path="res://game/level/breakers/breaker_versions/Breaker_OpenSS2D.tscn" type="PackedScene" id=21]
[ext_resource path="res://game/level/terrain/ObjectSS2D_Mountain.tscn" type="PackedScene" id=22]
[ext_resource path="res://game/level/ground/Bridge.tscn" type="PackedScene" id=23]
[ext_resource path="res://game/level/terrain/ObjectSS2D_Building.tscn" type="PackedScene" id=24]
[ext_resource path="res://game/level/breakers/BreakerConcrete.tscn" type="PackedScene" id=25]

[sub_resource type="Resource" id=102]
script = ExtResource( 15 )
texture_idx = 4
flip = false
width = 1.0

[sub_resource type="Resource" id=103]
script = ExtResource( 13 )
position = Vector2( -2657.71, 3732.75 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 102 )

[sub_resource type="Resource" id=104]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=105]
script = ExtResource( 13 )
position = Vector2( -2808.02, -1970.45 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 104 )

[sub_resource type="Resource" id=106]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=107]
script = ExtResource( 13 )
position = Vector2( 371.508, -359.83 )
point_in = Vector2( -370.614, 655.701 )
point_out = Vector2( 712.719, -1824.56 )
properties = SubResource( 106 )

[sub_resource type="Resource" id=108]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=109]
script = ExtResource( 13 )
position = Vector2( -301.621, 1387.09 )
point_in = Vector2( 0, 413.376 )
point_out = Vector2( -64.1445, -1147.48 )
properties = SubResource( 108 )

[sub_resource type="Resource" id=110]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=111]
script = ExtResource( 13 )
position = Vector2( 33.3569, 2855.29 )
point_in = Vector2( -726.973, 1047.7 )
point_out = Vector2( 484.648, -719.846 )
properties = SubResource( 110 )

[sub_resource type="Resource" id=112]
script = ExtResource( 5 )
_points = {
0: SubResource( 103 ),
41: SubResource( 105 ),
76: SubResource( 107 ),
77: SubResource( 109 ),
78: SubResource( 111 )
}
_point_order = [ 0, 78, 77, 76, 41 ]
_constraints = {
}
_next_key = 79
_material_overrides = {
}

[sub_resource type="Resource" id=113]
script = ExtResource( 15 )
texture_idx = 4
flip = false
width = 1.0

[sub_resource type="Resource" id=114]
script = ExtResource( 13 )
position = Vector2( 2195.91, 3725.62 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 113 )

[sub_resource type="Resource" id=115]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=116]
script = ExtResource( 13 )
position = Vector2( 1138.92, 2375.63 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 115 )

[sub_resource type="Resource" id=117]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=118]
script = ExtResource( 13 )
position = Vector2( 3054.92, 2355.63 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 117 )

[sub_resource type="Resource" id=119]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=120]
script = ExtResource( 13 )
position = Vector2( 3030.92, 571.627 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 119 )

[sub_resource type="Resource" id=121]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=122]
script = ExtResource( 13 )
position = Vector2( 1082.92, 555.627 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 121 )

[sub_resource type="Resource" id=123]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=124]
script = ExtResource( 13 )
position = Vector2( 2994, -2028 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 123 )

[sub_resource type="Resource" id=125]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=126]
script = ExtResource( 13 )
position = Vector2( 1115.46, 3726.19 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 125 )

[sub_resource type="Resource" id=127]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=128]
script = ExtResource( 13 )
position = Vector2( 1089.3, -2035.45 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 127 )

[sub_resource type="Resource" id=129]
script = ExtResource( 5 )
_points = {
0: SubResource( 114 ),
77: SubResource( 116 ),
78: SubResource( 118 ),
79: SubResource( 120 ),
80: SubResource( 122 ),
81: SubResource( 124 ),
82: SubResource( 126 ),
83: SubResource( 128 )
}
_point_order = [ 0, 82, 77, 78, 79, 80, 83, 81 ]
_constraints = {
}
_next_key = 84
_material_overrides = {
}

[sub_resource type="Resource" id=130]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=131]
script = ExtResource( 13 )
position = Vector2( 1376.35, 222.915 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 130 )

[sub_resource type="Resource" id=132]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=133]
script = ExtResource( 13 )
position = Vector2( 1369.62, -369.994 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 132 )

[sub_resource type="Resource" id=134]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=135]
script = ExtResource( 13 )
position = Vector2( -13.4543, 263.278 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 134 )

[sub_resource type="Resource" id=136]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=137]
script = ExtResource( 13 )
position = Vector2( 0, 0 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 136 )

[sub_resource type="Resource" id=138]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=139]
script = ExtResource( 13 )
position = Vector2( 1369.62, -369.994 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 138 )

[sub_resource type="Resource" id=140]
script = ExtResource( 5 )
_points = {
4: SubResource( 131 ),
5: SubResource( 133 ),
7: SubResource( 135 ),
8: SubResource( 137 ),
9: SubResource( 139 )
}
_point_order = [ 5, 4, 7, 8, 9 ]
_constraints = {
[ 5, 9 ]: 15
}
_next_key = 11
_material_overrides = {
}

[sub_resource type="Resource" id=141]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=142]
script = ExtResource( 13 )
position = Vector2( 1344, 320 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 141 )

[sub_resource type="Resource" id=143]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=144]
script = ExtResource( 13 )
position = Vector2( 1344, 0 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 143 )

[sub_resource type="Resource" id=145]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=146]
script = ExtResource( 13 )
position = Vector2( -6.72705, 703.449 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 145 )

[sub_resource type="Resource" id=147]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=148]
script = ExtResource( 13 )
position = Vector2( 0, 0 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 147 )

[sub_resource type="Resource" id=149]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=150]
script = ExtResource( 13 )
position = Vector2( 1344, 0 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 149 )

[sub_resource type="Resource" id=151]
script = ExtResource( 5 )
_points = {
4: SubResource( 142 ),
5: SubResource( 144 ),
7: SubResource( 146 ),
8: SubResource( 148 ),
9: SubResource( 150 )
}
_point_order = [ 5, 4, 7, 8, 9 ]
_constraints = {
[ 5, 9 ]: 15
}
_next_key = 11
_material_overrides = {
}

[sub_resource type="Resource" id=152]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=153]
script = ExtResource( 13 )
position = Vector2( 1362.9, 269.454 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 152 )

[sub_resource type="Resource" id=154]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=155]
script = ExtResource( 13 )
position = Vector2( 1389.8, -20.1814 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 154 )

[sub_resource type="Resource" id=156]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=157]
script = ExtResource( 13 )
position = Vector2( -6.72729, 975.807 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 156 )

[sub_resource type="Resource" id=158]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=159]
script = ExtResource( 13 )
position = Vector2( 0, 0 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 158 )

[sub_resource type="Resource" id=160]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=161]
script = ExtResource( 13 )
position = Vector2( 1389.8, -20.1814 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 160 )

[sub_resource type="Resource" id=162]
script = ExtResource( 5 )
_points = {
4: SubResource( 153 ),
5: SubResource( 155 ),
7: SubResource( 157 ),
8: SubResource( 159 ),
9: SubResource( 161 )
}
_point_order = [ 5, 4, 7, 8, 9 ]
_constraints = {
[ 5, 9 ]: 15
}
_next_key = 11
_material_overrides = {
}

[sub_resource type="GDScript" id=18]
script/source = "
extends StaticBody2D


export var height: float = 50 setget _change_shape_height
export var elevation: float = 0

onready var object_shape: Node2D = $ObjectShapeSS2D
onready var collision_shape: CollisionPolygon2D = $CollisionPolygon2D



func _change_shape_height(new_height: float):

	height = new_height


func _on_ObjectShapeSS2D_on_dirty_update() -> void:

	$ShapeShadows.update_all_shadows()
"

[sub_resource type="Resource" id=163]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=164]
script = ExtResource( 13 )
position = Vector2( -31.709, 4751.38 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 163 )

[sub_resource type="Resource" id=165]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=166]
script = ExtResource( 13 )
position = Vector2( 384, 0 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 165 )

[sub_resource type="Resource" id=167]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=168]
script = ExtResource( 13 )
position = Vector2( 0, 0 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 167 )

[sub_resource type="Resource" id=169]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=170]
script = ExtResource( 13 )
position = Vector2( -31.709, 4751.38 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 169 )

[sub_resource type="Resource" id=171]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=172]
script = ExtResource( 13 )
position = Vector2( 343.637, 629.542 )
point_in = Vector2( 158.089, -406.994 )
point_out = Vector2( -158.089, 406.994 )
properties = SubResource( 171 )

[sub_resource type="Resource" id=173]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=174]
script = ExtResource( 13 )
position = Vector2( 477.642, 3971.96 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 173 )

[sub_resource type="Resource" id=175]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=176]
script = ExtResource( 13 )
position = Vector2( 295.772, 1381.01 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 175 )

[sub_resource type="Resource" id=177]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=178]
script = ExtResource( 13 )
position = Vector2( 295.772, 1182.56 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 177 )

[sub_resource type="Resource" id=179]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=180]
script = ExtResource( 13 )
position = Vector2( 477.405, 967.292 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 179 )

[sub_resource type="Resource" id=181]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=182]
script = ExtResource( 13 )
position = Vector2( 249.765, 3509.59 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 181 )

[sub_resource type="Resource" id=183]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=184]
script = ExtResource( 13 )
position = Vector2( 463.581, 2540.29 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 183 )

[sub_resource type="Resource" id=185]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=186]
script = ExtResource( 13 )
position = Vector2( 292.528, 1998.63 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 185 )

[sub_resource type="Resource" id=187]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=188]
script = ExtResource( 13 )
position = Vector2( 449.327, 1606.63 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 187 )

[sub_resource type="Resource" id=189]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=190]
script = ExtResource( 13 )
position = Vector2( 508.156, 88.95 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 189 )

[sub_resource type="Resource" id=191]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=192]
script = ExtResource( 13 )
position = Vector2( 327.61, 4827.94 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 191 )

[sub_resource type="Resource" id=193]
script = ExtResource( 5 )
_points = {
0: SubResource( 164 ),
1: SubResource( 166 ),
2: SubResource( 168 ),
3: SubResource( 170 ),
4: SubResource( 172 ),
31: SubResource( 174 ),
32: SubResource( 176 ),
33: SubResource( 178 ),
34: SubResource( 180 ),
35: SubResource( 182 ),
36: SubResource( 184 ),
37: SubResource( 186 ),
38: SubResource( 188 ),
39: SubResource( 190 ),
40: SubResource( 192 )
}
_point_order = [ 3, 2, 1, 39, 4, 34, 33, 32, 38, 37, 36, 35, 31, 40, 0 ]
_constraints = {
[ 0, 3 ]: 15
}
_next_key = 41
_material_overrides = {
}

[sub_resource type="Resource" id=50]
script = ExtResource( 12 )
_edge_meta_materials = [  ]
fill_textures = [ ExtResource( 10 ) ]
fill_texture_normals = [  ]
fill_texture_z_index = 0
fill_texture_show_behind_parent = false
fill_mesh_offset = 0.0
render_offset = 0.0

[sub_resource type="Resource" id=194]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=195]
script = ExtResource( 13 )
position = Vector2( 5858.47, 45.3062 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 194 )

[sub_resource type="Resource" id=196]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=197]
script = ExtResource( 13 )
position = Vector2( 0, 0 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 196 )

[sub_resource type="Resource" id=198]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=199]
script = ExtResource( 13 )
position = Vector2( 16.7942, 348.11 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 198 )

[sub_resource type="Resource" id=200]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=201]
script = ExtResource( 13 )
position = Vector2( 5801.4, 390.99 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 200 )

[sub_resource type="Resource" id=202]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=203]
script = ExtResource( 13 )
position = Vector2( 5581.84, 8061.38 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 202 )

[sub_resource type="Resource" id=204]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=205]
script = ExtResource( 13 )
position = Vector2( -126.715, 8068.93 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 204 )

[sub_resource type="Resource" id=206]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=207]
script = ExtResource( 13 )
position = Vector2( 326.344, 7902.81 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 206 )

[sub_resource type="Resource" id=208]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=209]
script = ExtResource( 13 )
position = Vector2( 945.526, 7804.64 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 208 )

[sub_resource type="Resource" id=210]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=211]
script = ExtResource( 13 )
position = Vector2( 1851.65, 7872.6 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 210 )

[sub_resource type="Resource" id=212]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=213]
script = ExtResource( 13 )
position = Vector2( 2787.97, 7698.93 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 212 )

[sub_resource type="Resource" id=214]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=215]
script = ExtResource( 13 )
position = Vector2( 3331.64, 7200.56 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 214 )

[sub_resource type="Resource" id=216]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=217]
script = ExtResource( 13 )
position = Vector2( 4048.98, 6943.83 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 216 )

[sub_resource type="Resource" id=218]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=219]
script = ExtResource( 13 )
position = Vector2( 4320.82, 6800.36 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 218 )

[sub_resource type="Resource" id=220]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=221]
script = ExtResource( 13 )
position = Vector2( 4970.21, 6392.61 )
point_in = Vector2( -113.265, 309.591 )
point_out = Vector2( 113.265, -309.591 )
properties = SubResource( 220 )

[sub_resource type="Resource" id=222]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=223]
script = ExtResource( 13 )
position = Vector2( 5294.9, 5448.73 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 222 )

[sub_resource type="Resource" id=224]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=225]
script = ExtResource( 13 )
position = Vector2( 4622.86, 4202.82 )
point_in = Vector2( -67.959, 588.978 )
point_out = Vector2( 67.959, -588.978 )
properties = SubResource( 224 )

[sub_resource type="Resource" id=226]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=227]
script = ExtResource( 13 )
position = Vector2( 5211.84, 3402.41 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 226 )

[sub_resource type="Resource" id=228]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=229]
script = ExtResource( 13 )
position = Vector2( 5181.63, 2337.72 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 228 )

[sub_resource type="Resource" id=230]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=231]
script = ExtResource( 13 )
position = Vector2( 4902.25, 1076.71 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 230 )

[sub_resource type="Resource" id=232]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=233]
script = ExtResource( 13 )
position = Vector2( 4260.41, 789.769 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 232 )

[sub_resource type="Resource" id=234]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=235]
script = ExtResource( 13 )
position = Vector2( 0, 0 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 234 )

[sub_resource type="Resource" id=236]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=237]
script = ExtResource( 13 )
position = Vector2( 2576.54, 465.077 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 236 )

[sub_resource type="Resource" id=238]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=239]
script = ExtResource( 13 )
position = Vector2( 5340.21, 1424.05 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 238 )

[sub_resource type="Resource" id=240]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=241]
script = ExtResource( 13 )
position = Vector2( -323.039, 7812.2 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 240 )

[sub_resource type="Resource" id=242]
script = ExtResource( 5 )
_points = {
1: SubResource( 195 ),
2: SubResource( 197 ),
34: SubResource( 199 ),
39: SubResource( 201 ),
41: SubResource( 203 ),
43: SubResource( 205 ),
44: SubResource( 207 ),
45: SubResource( 209 ),
46: SubResource( 211 ),
47: SubResource( 213 ),
48: SubResource( 215 ),
49: SubResource( 217 ),
50: SubResource( 219 ),
51: SubResource( 221 ),
52: SubResource( 223 ),
53: SubResource( 225 ),
54: SubResource( 227 ),
55: SubResource( 229 ),
56: SubResource( 231 ),
57: SubResource( 233 ),
58: SubResource( 235 ),
59: SubResource( 237 ),
60: SubResource( 239 ),
61: SubResource( 241 )
}
_point_order = [ 2, 1, 39, 41, 43, 61, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 60, 56, 57, 59, 34, 58 ]
_constraints = {
[ 2, 58 ]: 15
}
_next_key = 62
_material_overrides = {
}

[sub_resource type="PhysicsMaterial" id=100]
friction = 0.0

[sub_resource type="GDScript" id=101]
script/source = "extends RigidBody2D
# breaker je cel
# chunk je odlomljeni del breakerja
# debry so bejkerji, delčki narezanega chunka
# crackers so animirane razpoke (self destruct)


enum MATERIAL {STONE, GLASS, GRAVEL, WOOD } # GHOST, WOOD, METAL, TILES, SOIL
export (MATERIAL) var current_material: int = MATERIAL.STONE

enum MOTION {STILL, EXPLODE, FALL, MINIMIZE, DISSAPEAR} # SLIDE, CRACK, SHATTER
var current_motion: int = MOTION.STILL setget _on_change_motion

enum HIT_BY_TYPE {KNIFE, HAMMER, PAINT, EXPLODING} # _temp ... ujema se z demotom
var current_hit_by_type: int = HIT_BY_TYPE.KNIFE

enum BREAK_SIZE {XSMALL, SMALL, MEDIUM, LARGE, XLARGE} # za razmerje brejkanja
var current_break_size: int = BREAK_SIZE.MEDIUM

enum SLICE_STYLE {ERASE, BLAST, GRID_SQ, GRID_HEX, SPIDERWEB, FRAGMENTS, NONE}

export var height = 500 # setget
export var elevation = 0 # setget
export var transparency: float = 1 # setget
export var is_breakable: bool = true
export (int) var shape_edge_width: float = 0 setget _on_change_shape_edge_width

var breaker_base_polygon: PoolVector2Array = [] setget _on_change_breaker_shape # !!! polygon menjam samo prek tega setgeta

var crack_color: Color = Color.black
var cut_breaks_shapes: int = 1 # nobena, spodnja ali vse
var breaking_round: int = 0 # kolikokrat je bil brejker že nalomljen
var break_origin_global: Vector2 = Vector2.ZERO # se inherita skozi vse spawne
var current_breaker_velocity: Vector2 = Vector2.ZERO

# polygons
onready var breaker_base: Polygon2D = $BreakerBase
onready var edge_shape: Polygon2D = $BreakerBase/EdgeShape
onready var breaker_tool: Polygon2D = $BreakerTool
onready var collision_shape: CollisionPolygon2D = $CollisionPolygon2D

# nodes
export (NodePath) var breaker_world_path: String # če je svet kaj drugega kot njegov parent
onready var operator: Node = $Operator
onready var Breaker: PackedScene = load(\"res://game/level/breakers/breaker/Breaker.tscn\")
onready var CrackerBox: PackedScene = preload(\"res://game/level/breakers/breaker/CrackerBox.tscn\") # krekerji so po animaciji spucani

var breaker_world: Node # če ni podan ob spananju, je get_parent()


func _ready() -> void:

	# določim svet spawnanja
	if breaker_world == null:
		breaker_world = get_parent()

	# če ni podana oblika, izbere defaultno
	if breaker_base_polygon.empty():
		#		print(\"breaker_base_polygon empty\")
		self.breaker_base_polygon = breaker_base.polygon
	# če je podana oblika, jo prevzame
	else:
		#		print(\"breaker_base_polygon true\")
		self.breaker_base_polygon = breaker_base_polygon

	self.current_motion = current_motion
	self.shape_edge_width = shape_edge_width
	edge_shape.color =  crack_color
	breaker_tool.hide()

	# SS2D breaker
	# SS2D shape spremeni brejker koližn in signalizira spremembo brejkerju
	# brejker spremeni bazna oblika
	# po prejkerju se spremeni senčka
	if has_node(\"SS2D_Shape_Closed\"):
		$SS2D_Shape_Closed.connect(\"on_dirty_update\", self, \"_on_SS2D_dirty_update\") # po spremembi, ko je vse apdejtano
		$SS2D_Shape_Closed.hide()
	elif has_node(\"SS2D_Shape_Open\"):
		$SS2D_Shape_Open.connect(\"on_dirty_update\", self, \"_on_SS2D_dirty_update\") # po spremembi, ko je vse apdejtano
		$SS2D_Shape_Open.hide()


func _integrate_forces(state: Physics2DDirectBodyState) -> void:

	current_breaker_velocity = state.get_linear_velocity()


func on_hit(hitting_node: Node2D, hit_global_position: Vector2):
	# shape je lahko: polygon2D, collision_shape
	# če se pojavi kaj novega vneseš tukaj

	# opredelim data za celotno slajsanje: origin, smer, območje vpliva in moč

	#	break_origin_global = Vector2.ZERO
	#	printt (\"origin\", break_origin_global, hitting_node.position, hitting_node.global_position)

	if not is_breakable:
		return

	if hitting_node is Line2D:
		_cut_it(hitting_node)
		return

	var hit_by_type: int = HIT_BY_TYPE.HAMMER

	# hitter properties
	var hit_shape = hitting_node.influence_area.get_child(0)
	var hit_shape_scale = hitting_node.influence_area.scale
	var hit_by_direction: Vector2 = Vector2.ZERO
	if \"direction\" in hitting_node:
		hit_by_direction = hitting_node.direction
	current_hit_by_type = hitting_node.damage_type

	# slicing polygon
	var hit_by_polygon: PoolVector2Array = []
	if hit_shape is Polygon2D or hit_shape is CollisionPolygon2D:
		hit_by_polygon = hit_shape.polygon
	elif hit_shape is CollisionShape2D:
		print (\"Hit shape je CollShape ... Uporabim Breaker tool ... naštimaj to\")
		hit_by_polygon = breaker_tool.polygon

	# break origin ... vector intersection or closest point
	#	var intersection_vector_length: float = operator.get_polygon_radius(hit_by_polygon) * hit_shape_scale.x
	var influence_radius: float = operator.get_polygon_radius(hit_by_polygon) * hit_shape_scale.x
	var intersection_vector_start: Vector2 = hit_global_position - position
	var intersection_vector_end: Vector2 = intersection_vector_start + hit_by_direction * influence_radius
	var intersection_vector_pool: PoolVector2Array = [intersection_vector_start, intersection_vector_end]
	var intersection_data: Array = operator.get_outline_intersecting_segments(intersection_vector_pool, breaker_base_polygon) # [[vector2, index], ...]
	var intersection_point: Vector2

	if intersection_data.empty():
		# poiščem najbližjo štartni točki
		var closest_point_on_closest_edge: Vector2 = operator.get_outline_segment_closest_to_point(intersection_vector_start, breaker_base_polygon)[1]
		intersection_point = closest_point_on_closest_edge
		printt(\"No intersection on hit vector ...  new closest point\", intersection_point, intersection_vector_start)
	if intersection_data.size() == 1:
		intersection_point = intersection_data[0][0]
	elif intersection_data.size() > 1: # več presečišč > izberem najbližjo štartu hit vektorja
		var closest_point_to_hit_start: Vector2
		var shortest_dist_to_hit_start: float = 0
		for intersection in intersection_data:
			var point: Vector2 = intersection[0]
			var point_to_hit_start_dist: float = (intersection_vector_pool[0] - point).length()
			if point_to_hit_start_dist < shortest_dist_to_hit_start or shortest_dist_to_hit_start == 0:
				shortest_dist_to_hit_start = point_to_hit_start_dist
				closest_point_to_hit_start = point
		intersection_point = closest_point_to_hit_start
	break_origin_global = intersection_point + global_position

	# opredelim velikost prilagodim hit polygon
	var influence_radius_per_unit: float = influence_radius / Sets.unit_one
	var simplify_round_count: int = 0
	if influence_radius_per_unit < 0.5:
		current_break_size = BREAK_SIZE.XSMALL
		simplify_round_count = 3
	elif influence_radius_per_unit < 1:
		current_break_size = BREAK_SIZE.SMALL
		simplify_round_count = 3
	elif influence_radius_per_unit < 2:
		current_break_size = BREAK_SIZE.MEDIUM
		simplify_round_count = 2
	elif influence_radius_per_unit < 3.5:
		current_break_size = BREAK_SIZE.LARGE
		simplify_round_count = 1
	else:
		current_break_size = BREAK_SIZE.XLARGE
		simplify_round_count = 1

	var simple_hit_polygon = operator.simplify_outline(hit_by_polygon, simplify_round_count)
#	printt (\"rad\", influence_radius_per_unit, influence_radius / Sts.unit_one)

	#		0:
	#			pass

		#	Mets.spawn_line_2d(intersection_vector_start + position, intersection_vector_end + position, get_parent())

	# break
	var transformed_hit_polygon: PoolVector2Array = operator.adapt_transforms_and_add_origin(simple_hit_polygon, break_origin_global, hit_shape_scale)
	#	var transformed_hit_polygon: PoolVector2Array = operator.adapt_transforms_and_add_origin(hit_by_polygon, break_origin_global, hit_shape_scale)
	_break_it(transformed_hit_polygon)


# BREJK (chunkization) ------------------------------------------------------------------------------------------------


func _break_it(slicing_polygon: PoolVector2Array):
	# podam
	var chunks_to_slice: Array = []

	# klipam, da dobim shape
	var clipped_polygons: Array = Geometry.clip_polygons_2d(breaker_base_polygon, slicing_polygon) # prazen je kadar se ne sekata ali pa je breaker znotraj šejpa (luknja)
	breaking_round += 1

	# break whole
	if clipped_polygons.empty(): # če slicer prekrije celoten shape > chunk
		print(\"Clipped_polygons je prazen >> brejkam celega\")
		chunks_to_slice.append(breaker_base_polygon)
		call_deferred(\"_slice_chunks\", [breaker_base_polygon], true)
	# break apart
	else:
		# dobim chunk shape
		var interecting_polygons: Array = Geometry.intersect_polygons_2d(slicing_polygon, breaker_base_polygon)
		if interecting_polygons.empty():  # zazih ... težko, da bilo prazno
			printt(\"Intersection empty ... no chunks. Clipped size \", clipped_polygons.size())
		self.breaker_base_polygon = clipped_polygons.pop_front()

		# hole, chunk, new breaker
		for poly in clipped_polygons:
			# hole
			if Geometry.is_polygon_clockwise(poly): # luknja ... operiram glavni poligon
				var holed_polygons: Array = operator.apply_hole(breaker_base_polygon, poly)
				self.breaker_base_polygon = holed_polygons[0]
				_break_it(holed_polygons[1])
				return
			# breaker
			else:
				_spawn_new_breaker(poly)
		# chunks
		if not current_hit_by_type == HIT_BY_TYPE.PAINT:
			for poly in interecting_polygons: # zazih ... skoraj ni mogoče, da bi bil notri več kot eden
				chunks_to_slice.append(poly)

		call_deferred(\"_slice_chunks\", chunks_to_slice)


func _cut_it(slice_line: Line2D):

	# adaptiram pozicijo poligon ... kot, da bi bil na poziciji cutting polija
	var slicing_line_adapted: PoolVector2Array = []
	for point in slice_line.points:
		# od globalne pozicije pike odštejem globalno pozicijo breakerja
		var point_to_local_position: Vector2 = point - position
		slicing_line_adapted.append(point_to_local_position)

	# je šel cut skozi?
	var cut_is_successful: bool = true
	for point in [slicing_line_adapted[0], slicing_line_adapted[slicing_line_adapted.size()-1]]:
		if Geometry.is_point_in_polygon(point, breaker_base_polygon):
			cut_is_successful = false
			return

	# odebelim linijo in jo klipam kot poligon
	var split_line_offset: float = 1
	var fat_split_line: PoolVector2Array = Geometry.offset_polyline_2d(slicing_line_adapted, split_line_offset)[0]
	var clipped_polygons: Array = Geometry.clip_polygons_2d(breaker_base_polygon, fat_split_line)

	# spawnam
	cut_breaks_shapes = 1
	match cut_breaks_shapes:
		0:
			self.breaker_base_polygon = clipped_polygons.pop_front()
			for poly in clipped_polygons:
				_spawn_new_breaker(poly)
		1:
			# opredelim index najvišjega, ki ga ostane trnueten braker
			var highest_center_y: float = 0
			var highest_polygon_index: int = 0
			for poly in clipped_polygons:
				var poly_center: Vector2 = operator.get_polygon_center(poly)
				if poly_center.y < highest_center_y or highest_center_y == 0 : # najvišji ima najnižji y
					highest_center_y = poly_center.y
					highest_polygon_index = clipped_polygons.find(poly)
			self.breaker_base_polygon = clipped_polygons.pop_at(highest_polygon_index)
			for poly in clipped_polygons:
				_spawn_new_breaker(poly, true)
		2:
			for poly in clipped_polygons:
				_spawn_new_breaker(poly, true)
			queue_free()


# SLAJS (debrization) -----------------------------------------------------------------------------------------------


func _slice_chunks(chunk_polygons: Array, slice_whole_breaker: bool = false, slice_with_crackers: bool = true):

#	var current_slicing_style: int = _get_slicing_style()

	# debug
	slice_with_crackers = true

	var spawned_chunks: Array = [] # da ji lahko potem zbriešm
	for chunk in chunk_polygons:
		var chunk_debry_polygons: Array
		#		var current_slicing_style = SLICE_STYLE.FRAGMENTS
		#		match current_slicing_style:
		#			SLICE_STYLE.NONE:
		#				chunk_derby_polygons.append(chunk)
		##			SLICE_STYLE.GRID_SQ:
		##				var grid_sliced_polygons: Array = operator.split_grid(chunk, 4)
		##				chunk_derby_polygons = grid_sliced_polygons[0]
		##				chunk_derby_polygons.append(grid_sliced_polygons[1])
		##			SLICE_STYLE.GRID_HEX:
		##				var grid_sliced_polygons: Array = operator.split_grid(chunk, 4)
		##				chunk_derby_polygons = grid_sliced_polygons[0]
		##				chunk_derby_polygons.append(grid_sliced_polygons[1])
		#			SLICE_STYLE.FRAGMENTS:
		#				chunk_derby_polygons = _split_chunk_to_polygons(chunk) # izbira stila glede na orodje in material
		#			SLICE_STYLE.BLAST:
		#				chunk_derby_polygons = _split_chunk_to_polygons(chunk)
		chunk_debry_polygons = _split_chunk_to_polygons(chunk)
		if slice_with_crackers:
			spawned_chunks.append(_spawn_chunk(chunk))
			var crackers_reveal
			var new_crackers = _spawn_cracers(chunk_debry_polygons, chunk) # _temp ne dela s signalom, a bi bilo bolje
			#			yield(new_crackers, \"cracks_animation_finished\")
			yield(get_tree().create_timer(new_crackers.crackers_reveal_time), \"timeout\")
		for debry_polygon in chunk_debry_polygons:
			_spawn_new_breaker(debry_polygon, false, true)
#		_spawn_debry(chunk_debry_polygons)


	for chunk in spawned_chunks:
		chunk.queue_free()

	if slice_whole_breaker:
		queue_free()


func _split_chunk_to_polygons(chunk_polygon: PoolVector2Array):
	# izbira stila glede na orodje in material

	var origin_position: Vector2 = break_origin_global - global_position
	var is_on_edge_distance: float = 10

	# origin type (edge index)
	var origin_edge_index: int
	var origin_location_on_shape: int = -1 # -1 = out, 1 = in, 0 = edge
	if Geometry.is_point_in_polygon(origin_position, chunk_polygon):
		origin_edge_index = operator.get_outline_segment_closest_to_point(origin_position, chunk_polygon, is_on_edge_distance)[0]
		if origin_edge_index == - 1: # -1 pomeni, da je znotraj poligona in ni na robu
			origin_location_on_shape = 1
		else:
			origin_location_on_shape = 0

	# origin location
	var sliced_chunk_polygons: Array
	var polygon_with_origin: PoolVector2Array = chunk_polygon
	match origin_location_on_shape:
		-1: # zunaj ... dodam origin in reclipam slicane poligone
			polygon_with_origin.append(origin_position)
			#			print(\"slice origin OUTSIDE\")
			#			sliced_chunk_polygons = operator.split_delaunay(chunk_polygon, 10)
		0: # edge ... splitam edge na origin točki
			#			print(\"slice origin EDGE\")
			polygon_with_origin.insert(origin_edge_index + 1, origin_position)
		1: # notri ... dodam origin
			polygon_with_origin.append(origin_position)
			#			print(\"slice on origin INSIDE\")
			#			var split_edge_length: int = 150
			#			chunk_polygon = operator.split_outline_to_length(chunk_polygon, split_edge_length)
			#			sliced_chunk_polygons = operator.split_spiderweb(chunk_polygon)

	# za delaunay
	var delaunay_add_points_count: int = 0
	var daisy_side_split_count: int = 0
	match current_break_size:
		BREAK_SIZE.XSMALL:
			delaunay_add_points_count = 0
			daisy_side_split_count = 0
		BREAK_SIZE.SMALL:
			delaunay_add_points_count = 2
			daisy_side_split_count = 0
		BREAK_SIZE.MEDIUM:
			delaunay_add_points_count = 6
			daisy_side_split_count = 1
		BREAK_SIZE.LARGE:
			delaunay_add_points_count = 10
			daisy_side_split_count = 3
		BREAK_SIZE.XLARGE:
			delaunay_add_points_count = 14
			daisy_side_split_count = 6

	# tool type

	#	var side_sliced_polygons: Array
	#	for poly in first_slice_polys:
	#		var new_poly = operator.split_outline_on_part(poly)
	#		side_sliced_polygons.append_array(operator.split_delaunay(new_poly))
	#	sliced_chunk_polygons = side_sliced_polygons
	#	sliced_chunk_polygons = operator.split_daisy(desplit_chunk_polygon, origin_edge_index + 1)[0]
	#	sliced_chunk_polygons = operator.split_spiderweb(desplit_chunk_polygon)

	var tool_slice_polygons: Array
	match current_hit_by_type:
		HIT_BY_TYPE.KNIFE: # delunay
			tool_slice_polygons = operator.split_delaunay(chunk_polygon, delaunay_add_points_count)
			pass
		HIT_BY_TYPE.HAMMER: # delunay
			tool_slice_polygons = operator.split_delaunay(chunk_polygon, delaunay_add_points_count)
		HIT_BY_TYPE.PAINT:#erase
			pass
		HIT_BY_TYPE.EXPLODING: # daisy / spiderweb
			tool_slice_polygons = operator.split_daisy(polygon_with_origin, origin_edge_index + 1)[0]
			pass

	sliced_chunk_polygons = tool_slice_polygons

	return sliced_chunk_polygons


# SPAWN ----------------------------------------------------------------------------------------------------------------


func _spawn_new_breaker(new_braker_polygon: PoolVector2Array, spawn_and_slice: bool = false, spawn_as_debry: bool = false):

	# spawn
	var new_breaker = Breaker.instance()
	if spawn_as_debry:
		# centraliziram polygon in globaliziram pozicijo
		var centralized_polygon_data: Array = operator.centralize_polygon_position(new_braker_polygon)
		var centralized_global_position: Vector2 = centralized_polygon_data[1] + position
		var centralized_breaker_polygon: PoolVector2Array = centralized_polygon_data[0]
		new_braker_polygon = centralized_polygon_data[0]
		new_breaker.name =  name + \"_Debry\"
		new_breaker.position = centralized_global_position
		new_breaker.is_breakable = false
		new_breaker.height = 0 # _temo debryshadows
		new_breaker.elevation = 0 # _temo debryshadows
	else:
		new_breaker.name = name + \"_Round_%d\" % breaking_round
		new_breaker.position = position
	new_breaker.breaker_world = breaker_world
	breaker_world.add_child(new_breaker)

	# setup
	if breaker_base.texture:
		_copy_texture_between_shapes(new_breaker.breaker_base, breaker_base)
		new_breaker.breaker_base.texture_offset = new_breaker.position - position # ne-debry je ZERO
	new_breaker.breaker_base.color = breaker_base.color
	new_breaker.break_origin_global = break_origin_global # za animacijo debryja

	# setgets ... mora bit po spawnu, da se izvede setget
	if spawn_as_debry: # _temp
		new_breaker.shape_edge_width = 2
		#		new_breaker.current_motion = new_breaker.MOTION.STILL
		new_breaker.current_motion = new_breaker.MOTION.EXPLODE
	new_breaker.breaker_base_polygon = new_braker_polygon
	if spawn_and_slice:
		new_breaker.call_deferred(\"_slice_chunks\", [new_breaker.breaker_base_polygon], true)


func _spawn_chunk(new_chunk_polygon: PoolVector2Array):

	var new_poly: Polygon2D = Polygon2D.new()
	new_poly.polygon = new_chunk_polygon
	new_poly.color = breaker_base.color
	add_child(new_poly)

	if breaker_base.texture:
		_copy_texture_between_shapes(new_poly, breaker_base)

	return new_poly


func _spawn_cracers(cracked_polygons: Array, chunk_polygon: PoolVector2Array):
	# po animaciji se kvefrijajo

	var new_cracers = CrackerBox.instance()
	new_cracers.breaker_position =  position
	new_cracers.break_origin_global = break_origin_global
	new_cracers.cracked_polygons = cracked_polygons
	new_cracers.chunk_polygon = chunk_polygon
	new_cracers.breaker_shape = breaker_base
	add_child(new_cracers)

	return new_cracers


# UTILITI ----------------------------------------------------------------------------------------------------------------


func _on_SS2D_dirty_update(): # samo SS2D breaker

	self.breaker_base_polygon = collision_shape.polygon


func _copy_texture_between_shapes(copy_to: Polygon2D, copy_from: Polygon2D):

	copy_to.texture = copy_from.texture
	copy_to.texture_offset = copy_from.texture_offset
	copy_to.rotation_degrees = copy_from.rotation_degrees
	copy_to.texture_scale = copy_from.texture_scale


func _get_slicing_style(sliced_by_type: int = current_hit_by_type):

	var material_tool_combo: Array = [current_material, sliced_by_type]
	var slice_style: int

	match sliced_by_type:
		HIT_BY_TYPE.HAMMER:
			slice_style = SLICE_STYLE.FRAGMENTS
		HIT_BY_TYPE.KNIFE:
			slice_style = SLICE_STYLE.FRAGMENTS
		HIT_BY_TYPE.PAINT:
			slice_style = SLICE_STYLE.FRAGMENTS
		HIT_BY_TYPE.ROCKET:
			pass

	return slice_style


func _on_change_breaker_shape(new_breaker_polygon: PoolVector2Array):

	breaker_base_polygon = new_breaker_polygon
	breaker_base.polygon = breaker_base_polygon
	edge_shape.polygon = breaker_base_polygon
	self.shape_edge_width = shape_edge_width
	collision_shape.set_deferred(\"polygon\", breaker_base_polygon)

	$ShapeShadows.update_all_shadows()


func _on_change_motion(new_motion_state: int):

	current_motion =  new_motion_state

	# _temp
	if not current_motion == MOTION.STILL:
		current_motion =  MOTION.MINIMIZE

	match current_motion:
		MOTION.STILL:
#			mode = RigidBody2D.MODE_STATIC
			set_deferred(\"mode\", RigidBody2D.MODE_STATIC)
		MOTION.FALL:
			gravity_scale = 1
			set_deferred(\"mode\", RigidBody2D.MODE_RIGID)
		MOTION.EXPLODE:
			gravity_scale = 0
#			mode = RigidBody2D.MODE_RIGID
			set_deferred(\"mode\", RigidBody2D.MODE_RIGID)
			linear_damp = 2
			var force_vector = global_position - break_origin_global
			apply_central_impulse(force_vector * 20)
		MOTION.DISSAPEAR:
			set_deferred(\"mode\", RigidBody2D.MODE_RIGID)
			gravity_scale = 0
			randomize()
			var random_duration: float = (randi() % 5 + 5)/10.0
			var random_delay: float = (randi() % 3)/10
			var dissolve_tween = get_tree().create_tween()
			dissolve_tween.tween_property(self, \"modulate:a\", 0, random_duration).set_delay(random_delay)
			yield(dissolve_tween, \"finished\")
			queue_free()
		MOTION.MINIMIZE:
			set_deferred(\"mode\", RigidBody2D.MODE_RIGID)
			gravity_scale = 0
			randomize()
			var random_duration: float = (randi() % 5 + 5)/10.0
			var random_delay: float = (randi() % 3)/10
			var minimize_tween = get_tree().create_tween()
			minimize_tween.tween_property(self, \"scale\", Vector2.ZERO, random_duration).set_delay(random_delay)
			yield(minimize_tween, \"finished\")
			queue_free()
		MOTION.CRACK:
			pass


func _on_change_shape_edge_width(new_width: float):

	if edge_shape:
		var offset_polygons: Array = Geometry.offset_polygon_2d(edge_shape.polygon, new_width)
		if offset_polygons.size() == 1:
			edge_shape.polygon = offset_polygons[0]
			shape_edge_width = new_width # šele tukaj, da ne morem setat, če je error
		else:
			shape_edge_width = new_width / 2
			#			printt(\"Breaker offset to big (multiple inset_polygons) ... polovička\", shape_edge_width)


func _on_VisibilityNotifier2D_screen_exited() -> void:

	pass
"

[sub_resource type="Resource" id=243]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=244]
script = ExtResource( 13 )
position = Vector2( 234.105, 28.793 )
point_in = Vector2( -152.563, 44.4974 )
point_out = Vector2( 152.563, -44.4974 )
properties = SubResource( 243 )

[sub_resource type="Resource" id=245]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=246]
script = ExtResource( 13 )
position = Vector2( 746.318, 286.746 )
point_in = Vector2( -91.1138, -269.104 )
point_out = Vector2( 91.1138, 269.104 )
properties = SubResource( 245 )

[sub_resource type="Resource" id=247]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=248]
script = ExtResource( 13 )
position = Vector2( -21.3967, 527.611 )
point_in = Vector2( 48.7353, 298.769 )
point_out = Vector2( -48.7353, -298.769 )
properties = SubResource( 247 )

[sub_resource type="Resource" id=249]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=250]
script = ExtResource( 13 )
position = Vector2( 234.105, 28.793 )
point_in = Vector2( -152.563, 44.4974 )
point_out = Vector2( 152.563, -44.4974 )
properties = SubResource( 249 )

[sub_resource type="Resource" id=251]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=252]
script = ExtResource( 13 )
position = Vector2( 341.559, 949.462 )
point_in = Vector2( 77.5082, -34.7451 )
point_out = Vector2( -77.5082, 34.7451 )
properties = SubResource( 251 )

[sub_resource type="Resource" id=253]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=254]
script = ExtResource( 13 )
position = Vector2( 731.892, 788.763 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 253 )

[sub_resource type="Resource" id=255]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=256]
script = ExtResource( 13 )
position = Vector2( 1002.61, 711.44 )
point_in = Vector2( 46.6165, -250.033 )
point_out = Vector2( -46.6165, 250.033 )
properties = SubResource( 255 )

[sub_resource type="Resource" id=257]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=258]
script = ExtResource( 13 )
position = Vector2( 201.925, 389.452 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 257 )

[sub_resource type="Resource" id=259]
script = ExtResource( 5 )
_points = {
1: SubResource( 244 ),
2: SubResource( 246 ),
5: SubResource( 248 ),
7: SubResource( 250 ),
8: SubResource( 252 ),
10: SubResource( 254 ),
11: SubResource( 256 ),
14: SubResource( 258 )
}
_point_order = [ 1, 2, 11, 10, 8, 5, 14, 7 ]
_constraints = {
[ 1, 7 ]: 15
}
_next_key = 15
_material_overrides = {
}

[sub_resource type="Animation" id=2]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("SplitCirco:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}

[sub_resource type="Animation" id=3]
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("SplitCirco:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 45.0 ]
}

[sub_resource type="PhysicsMaterial" id=4]
friction = 0.0

[sub_resource type="GDScript" id=5]
script/source = "extends RigidBody2D
# breaker je cel
# chunk je odlomljeni del breakerja
# debry so bejkerji, delčki narezanega chunka
# crackers so animirane razpoke (self destruct)


enum MATERIAL {STONE, GLASS, GRAVEL, WOOD } # GHOST, WOOD, METAL, TILES, SOIL
export (MATERIAL) var current_material: int = MATERIAL.STONE

enum MOTION {STILL, EXPLODE, FALL, MINIMIZE, DISSAPEAR} # SLIDE, CRACK, SHATTER
var current_motion: int = MOTION.STILL setget _on_change_motion

enum HIT_BY_TYPE {KNIFE, HAMMER, PAINT, EXPLODING} # _temp ... ujema se z demotom
var current_hit_by_type: int = HIT_BY_TYPE.KNIFE

enum BREAK_SIZE {XSMALL, SMALL, MEDIUM, LARGE, XLARGE} # za razmerje brejkanja
var current_break_size: int = BREAK_SIZE.MEDIUM

enum SLICE_STYLE {ERASE, BLAST, GRID_SQ, GRID_HEX, SPIDERWEB, FRAGMENTS, NONE}

export var height = 500 # setget
export var elevation = 0 # setget
export var transparency: float = 1 # setget
export var is_breakable: bool = true
export (int) var shape_edge_width: float = 0 setget _on_change_shape_edge_width

var breaker_base_polygon: PoolVector2Array = [] setget _on_change_breaker_shape # !!! polygon menjam samo prek tega setgeta

var crack_color: Color = Color.black
var cut_breaks_shapes: int = 1 # nobena, spodnja ali vse
var breaking_round: int = 0 # kolikokrat je bil brejker že nalomljen
var break_origin_global: Vector2 = Vector2.ZERO # se inherita skozi vse spawne
var current_breaker_velocity: Vector2 = Vector2.ZERO

# polygons
onready var breaker_base: Polygon2D = $BreakerBase
onready var edge_shape: Polygon2D = $BreakerBase/EdgeShape
onready var breaker_tool: Polygon2D = $BreakerTool
onready var collision_shape: CollisionPolygon2D = $CollisionPolygon2D

# nodes
export (NodePath) var breaker_world_path: String # če je svet kaj drugega kot njegov parent
onready var operator: Node = $Operator
onready var Breaker: PackedScene = load(\"res://game/level/breakers/breaker/Breaker.tscn\")
onready var CrackerBox: PackedScene = preload(\"res://game/level/breakers/breaker/CrackerBox.tscn\") # krekerji so po animaciji spucani

var breaker_world: Node # če ni podan ob spananju, je get_parent()


func _ready() -> void:

	# določim svet spawnanja
	if breaker_world == null:
		breaker_world = get_parent()

	# če ni podana oblika, izbere defaultno
	if breaker_base_polygon.empty():
		#		print(\"breaker_base_polygon empty\")
		self.breaker_base_polygon = breaker_base.polygon
	# če je podana oblika, jo prevzame
	else:
		#		print(\"breaker_base_polygon true\")
		self.breaker_base_polygon = breaker_base_polygon

	self.current_motion = current_motion
	self.shape_edge_width = shape_edge_width
	edge_shape.color =  crack_color
	breaker_tool.hide()

	# SS2D breaker
	# SS2D shape spremeni brejker koližn in signalizira spremembo brejkerju
	# brejker spremeni bazna oblika
	# po prejkerju se spremeni senčka
	if has_node(\"SS2D_Shape_Closed\"):
		$SS2D_Shape_Closed.connect(\"on_dirty_update\", self, \"_on_SS2D_dirty_update\") # po spremembi, ko je vse apdejtano
		$SS2D_Shape_Closed.hide()
	elif has_node(\"SS2D_Shape_Open\"):
		$SS2D_Shape_Open.connect(\"on_dirty_update\", self, \"_on_SS2D_dirty_update\") # po spremembi, ko je vse apdejtano
		$SS2D_Shape_Open.hide()


func _integrate_forces(state: Physics2DDirectBodyState) -> void:

	current_breaker_velocity = state.get_linear_velocity()


func on_hit(hitting_node: Node2D, hit_global_position: Vector2):
	# shape je lahko: polygon2D, collision_shape
	# če se pojavi kaj novega vneseš tukaj

	# opredelim data za celotno slajsanje: origin, smer, območje vpliva in moč

	#	break_origin_global = Vector2.ZERO
	#	printt (\"origin\", break_origin_global, hitting_node.position, hitting_node.global_position)

	if not is_breakable:
		return

	if hitting_node is Line2D:
		_cut_it(hitting_node)
		return

	var hit_by_type: int = HIT_BY_TYPE.HAMMER

	# hitter properties
	var hit_shape = hitting_node.influence_area.get_child(0)
	var hit_shape_scale = hitting_node.influence_area.scale
	var hit_by_direction: Vector2 = Vector2.ZERO
	if \"direction\" in hitting_node:
		hit_by_direction = hitting_node.direction
	current_hit_by_type = hitting_node.damage_type

	# slicing polygon
	var hit_by_polygon: PoolVector2Array = []
	if hit_shape is Polygon2D or hit_shape is CollisionPolygon2D:
		hit_by_polygon = hit_shape.polygon
	elif hit_shape is CollisionShape2D:
		print (\"Hit shape je CollShape ... Uporabim Breaker tool ... naštimaj to\")
		hit_by_polygon = breaker_tool.polygon

	# break origin ... vector intersection or closest point
	#	var intersection_vector_length: float = operator.get_polygon_radius(hit_by_polygon) * hit_shape_scale.x
	var influence_radius: float = operator.get_polygon_radius(hit_by_polygon) * hit_shape_scale.x
	var intersection_vector_start: Vector2 = hit_global_position - position
	var intersection_vector_end: Vector2 = intersection_vector_start + hit_by_direction * influence_radius
	var intersection_vector_pool: PoolVector2Array = [intersection_vector_start, intersection_vector_end]
	var intersection_data: Array = operator.get_outline_intersecting_segments(intersection_vector_pool, breaker_base_polygon) # [[vector2, index], ...]
	var intersection_point: Vector2

	if intersection_data.empty():
		# poiščem najbližjo štartni točki
		var closest_point_on_closest_edge: Vector2 = operator.get_outline_segment_closest_to_point(intersection_vector_start, breaker_base_polygon)[1]
		intersection_point = closest_point_on_closest_edge
		printt(\"No intersection on hit vector ...  new closest point\", intersection_point, intersection_vector_start)
	if intersection_data.size() == 1:
		intersection_point = intersection_data[0][0]
	elif intersection_data.size() > 1: # več presečišč > izberem najbližjo štartu hit vektorja
		var closest_point_to_hit_start: Vector2
		var shortest_dist_to_hit_start: float = 0
		for intersection in intersection_data:
			var point: Vector2 = intersection[0]
			var point_to_hit_start_dist: float = (intersection_vector_pool[0] - point).length()
			if point_to_hit_start_dist < shortest_dist_to_hit_start or shortest_dist_to_hit_start == 0:
				shortest_dist_to_hit_start = point_to_hit_start_dist
				closest_point_to_hit_start = point
		intersection_point = closest_point_to_hit_start
	break_origin_global = intersection_point + global_position

	# opredelim velikost prilagodim hit polygon
	var influence_radius_per_unit: float = influence_radius / Sets.unit_one
	var simplify_round_count: int = 0
	if influence_radius_per_unit < 0.5:
		current_break_size = BREAK_SIZE.XSMALL
		simplify_round_count = 3
	elif influence_radius_per_unit < 1:
		current_break_size = BREAK_SIZE.SMALL
		simplify_round_count = 3
	elif influence_radius_per_unit < 2:
		current_break_size = BREAK_SIZE.MEDIUM
		simplify_round_count = 2
	elif influence_radius_per_unit < 3.5:
		current_break_size = BREAK_SIZE.LARGE
		simplify_round_count = 1
	else:
		current_break_size = BREAK_SIZE.XLARGE
		simplify_round_count = 1

	var simple_hit_polygon = operator.simplify_outline(hit_by_polygon, simplify_round_count)
#	printt (\"rad\", influence_radius_per_unit, influence_radius / Sts.unit_one)

	#		0:
	#			pass

		#	Mets.spawn_line_2d(intersection_vector_start + position, intersection_vector_end + position, get_parent())

	# break
	var transformed_hit_polygon: PoolVector2Array = operator.adapt_transforms_and_add_origin(simple_hit_polygon, break_origin_global, hit_shape_scale)
	#	var transformed_hit_polygon: PoolVector2Array = operator.adapt_transforms_and_add_origin(hit_by_polygon, break_origin_global, hit_shape_scale)
	_break_it(transformed_hit_polygon)


# BREJK (chunkization) ------------------------------------------------------------------------------------------------


func _break_it(slicing_polygon: PoolVector2Array):
	# podam
	var chunks_to_slice: Array = []

	# klipam, da dobim shape
	var clipped_polygons: Array = Geometry.clip_polygons_2d(breaker_base_polygon, slicing_polygon) # prazen je kadar se ne sekata ali pa je breaker znotraj šejpa (luknja)
	breaking_round += 1

	# break whole
	if clipped_polygons.empty(): # če slicer prekrije celoten shape > chunk
		print(\"Clipped_polygons je prazen >> brejkam celega\")
		chunks_to_slice.append(breaker_base_polygon)
		call_deferred(\"_slice_chunks\", [breaker_base_polygon], true)
	# break apart
	else:
		# dobim chunk shape
		var interecting_polygons: Array = Geometry.intersect_polygons_2d(slicing_polygon, breaker_base_polygon)
		if interecting_polygons.empty():  # zazih ... težko, da bilo prazno
			printt(\"Intersection empty ... no chunks. Clipped size \", clipped_polygons.size())
		self.breaker_base_polygon = clipped_polygons.pop_front()

		# hole, chunk, new breaker
		for poly in clipped_polygons:
			# hole
			if Geometry.is_polygon_clockwise(poly): # luknja ... operiram glavni poligon
				var holed_polygons: Array = operator.apply_hole(breaker_base_polygon, poly)
				self.breaker_base_polygon = holed_polygons[0]
				_break_it(holed_polygons[1])
				return
			# breaker
			else:
				_spawn_new_breaker(poly)
		# chunks
		if not current_hit_by_type == HIT_BY_TYPE.PAINT:
			for poly in interecting_polygons: # zazih ... skoraj ni mogoče, da bi bil notri več kot eden
				chunks_to_slice.append(poly)

		call_deferred(\"_slice_chunks\", chunks_to_slice)


func _cut_it(slice_line: Line2D):

	# adaptiram pozicijo poligon ... kot, da bi bil na poziciji cutting polija
	var slicing_line_adapted: PoolVector2Array = []
	for point in slice_line.points:
		# od globalne pozicije pike odštejem globalno pozicijo breakerja
		var point_to_local_position: Vector2 = point - position
		slicing_line_adapted.append(point_to_local_position)

	# je šel cut skozi?
	var cut_is_successful: bool = true
	for point in [slicing_line_adapted[0], slicing_line_adapted[slicing_line_adapted.size()-1]]:
		if Geometry.is_point_in_polygon(point, breaker_base_polygon):
			cut_is_successful = false
			return

	# odebelim linijo in jo klipam kot poligon
	var split_line_offset: float = 1
	var fat_split_line: PoolVector2Array = Geometry.offset_polyline_2d(slicing_line_adapted, split_line_offset)[0]
	var clipped_polygons: Array = Geometry.clip_polygons_2d(breaker_base_polygon, fat_split_line)

	# spawnam
	cut_breaks_shapes = 1
	match cut_breaks_shapes:
		0:
			self.breaker_base_polygon = clipped_polygons.pop_front()
			for poly in clipped_polygons:
				_spawn_new_breaker(poly)
		1:
			# opredelim index najvišjega, ki ga ostane trnueten braker
			var highest_center_y: float = 0
			var highest_polygon_index: int = 0
			for poly in clipped_polygons:
				var poly_center: Vector2 = operator.get_polygon_center(poly)
				if poly_center.y < highest_center_y or highest_center_y == 0 : # najvišji ima najnižji y
					highest_center_y = poly_center.y
					highest_polygon_index = clipped_polygons.find(poly)
			self.breaker_base_polygon = clipped_polygons.pop_at(highest_polygon_index)
			for poly in clipped_polygons:
				_spawn_new_breaker(poly, true)
		2:
			for poly in clipped_polygons:
				_spawn_new_breaker(poly, true)
			queue_free()


# SLAJS (debrization) -----------------------------------------------------------------------------------------------


func _slice_chunks(chunk_polygons: Array, slice_whole_breaker: bool = false, slice_with_crackers: bool = true):

#	var current_slicing_style: int = _get_slicing_style()

	# debug
	slice_with_crackers = true

	var spawned_chunks: Array = [] # da ji lahko potem zbriešm
	for chunk in chunk_polygons:
		var chunk_debry_polygons: Array
		#		var current_slicing_style = SLICE_STYLE.FRAGMENTS
		#		match current_slicing_style:
		#			SLICE_STYLE.NONE:
		#				chunk_derby_polygons.append(chunk)
		##			SLICE_STYLE.GRID_SQ:
		##				var grid_sliced_polygons: Array = operator.split_grid(chunk, 4)
		##				chunk_derby_polygons = grid_sliced_polygons[0]
		##				chunk_derby_polygons.append(grid_sliced_polygons[1])
		##			SLICE_STYLE.GRID_HEX:
		##				var grid_sliced_polygons: Array = operator.split_grid(chunk, 4)
		##				chunk_derby_polygons = grid_sliced_polygons[0]
		##				chunk_derby_polygons.append(grid_sliced_polygons[1])
		#			SLICE_STYLE.FRAGMENTS:
		#				chunk_derby_polygons = _split_chunk_to_polygons(chunk) # izbira stila glede na orodje in material
		#			SLICE_STYLE.BLAST:
		#				chunk_derby_polygons = _split_chunk_to_polygons(chunk)
		chunk_debry_polygons = _split_chunk_to_polygons(chunk)
		if slice_with_crackers:
			spawned_chunks.append(_spawn_chunk(chunk))
			var crackers_reveal
			var new_crackers = _spawn_cracers(chunk_debry_polygons, chunk) # _temp ne dela s signalom, a bi bilo bolje
			#			yield(new_crackers, \"cracks_animation_finished\")
			yield(get_tree().create_timer(new_crackers.crackers_reveal_time), \"timeout\")
		for debry_polygon in chunk_debry_polygons:
			_spawn_new_breaker(debry_polygon, false, true)
#		_spawn_debry(chunk_debry_polygons)


	for chunk in spawned_chunks:
		chunk.queue_free()

	if slice_whole_breaker:
		queue_free()


func _split_chunk_to_polygons(chunk_polygon: PoolVector2Array):
	# izbira stila glede na orodje in material

	var origin_position: Vector2 = break_origin_global - global_position
	var is_on_edge_distance: float = 10

	# origin type (edge index)
	var origin_edge_index: int
	var origin_location_on_shape: int = -1 # -1 = out, 1 = in, 0 = edge
	if Geometry.is_point_in_polygon(origin_position, chunk_polygon):
		origin_edge_index = operator.get_outline_segment_closest_to_point(origin_position, chunk_polygon, is_on_edge_distance)[0]
		if origin_edge_index == - 1: # -1 pomeni, da je znotraj poligona in ni na robu
			origin_location_on_shape = 1
		else:
			origin_location_on_shape = 0

	# origin location
	var sliced_chunk_polygons: Array
	var polygon_with_origin: PoolVector2Array = chunk_polygon
	match origin_location_on_shape:
		-1: # zunaj ... dodam origin in reclipam slicane poligone
			polygon_with_origin.append(origin_position)
			#			print(\"slice origin OUTSIDE\")
			#			sliced_chunk_polygons = operator.split_delaunay(chunk_polygon, 10)
		0: # edge ... splitam edge na origin točki
			#			print(\"slice origin EDGE\")
			polygon_with_origin.insert(origin_edge_index + 1, origin_position)
		1: # notri ... dodam origin
			polygon_with_origin.append(origin_position)
			#			print(\"slice on origin INSIDE\")
			#			var split_edge_length: int = 150
			#			chunk_polygon = operator.split_outline_to_length(chunk_polygon, split_edge_length)
			#			sliced_chunk_polygons = operator.split_spiderweb(chunk_polygon)

	# za delaunay
	var delaunay_add_points_count: int = 0
	var daisy_side_split_count: int = 0
	match current_break_size:
		BREAK_SIZE.XSMALL:
			delaunay_add_points_count = 0
			daisy_side_split_count = 0
		BREAK_SIZE.SMALL:
			delaunay_add_points_count = 2
			daisy_side_split_count = 0
		BREAK_SIZE.MEDIUM:
			delaunay_add_points_count = 6
			daisy_side_split_count = 1
		BREAK_SIZE.LARGE:
			delaunay_add_points_count = 10
			daisy_side_split_count = 3
		BREAK_SIZE.XLARGE:
			delaunay_add_points_count = 14
			daisy_side_split_count = 6

	# tool type

	#	var side_sliced_polygons: Array
	#	for poly in first_slice_polys:
	#		var new_poly = operator.split_outline_on_part(poly)
	#		side_sliced_polygons.append_array(operator.split_delaunay(new_poly))
	#	sliced_chunk_polygons = side_sliced_polygons
	#	sliced_chunk_polygons = operator.split_daisy(desplit_chunk_polygon, origin_edge_index + 1)[0]
	#	sliced_chunk_polygons = operator.split_spiderweb(desplit_chunk_polygon)

	var tool_slice_polygons: Array
	match current_hit_by_type:
		HIT_BY_TYPE.KNIFE: # delunay
			tool_slice_polygons = operator.split_delaunay(chunk_polygon, delaunay_add_points_count)
			pass
		HIT_BY_TYPE.HAMMER: # delunay
			tool_slice_polygons = operator.split_delaunay(chunk_polygon, delaunay_add_points_count)
		HIT_BY_TYPE.PAINT:#erase
			pass
		HIT_BY_TYPE.EXPLODING: # daisy / spiderweb
			tool_slice_polygons = operator.split_daisy(polygon_with_origin, origin_edge_index + 1)[0]
			pass

	sliced_chunk_polygons = tool_slice_polygons

	return sliced_chunk_polygons


# SPAWN ----------------------------------------------------------------------------------------------------------------


func _spawn_new_breaker(new_braker_polygon: PoolVector2Array, spawn_and_slice: bool = false, spawn_as_debry: bool = false):

	# spawn
	var new_breaker = Breaker.instance()
	if spawn_as_debry:
		# centraliziram polygon in globaliziram pozicijo
		var centralized_polygon_data: Array = operator.centralize_polygon_position(new_braker_polygon)
		var centralized_global_position: Vector2 = centralized_polygon_data[1] + position
		var centralized_breaker_polygon: PoolVector2Array = centralized_polygon_data[0]
		new_braker_polygon = centralized_polygon_data[0]
		new_breaker.name =  name + \"_Debry\"
		new_breaker.position = centralized_global_position
		new_breaker.is_breakable = false
		new_breaker.height = 0 # _temo debryshadows
		new_breaker.elevation = 0 # _temo debryshadows
	else:
		new_breaker.name = name + \"_Round_%d\" % breaking_round
		new_breaker.position = position
	new_breaker.breaker_world = breaker_world
	breaker_world.add_child(new_breaker)

	# setup
	if breaker_base.texture:
		_copy_texture_between_shapes(new_breaker.breaker_base, breaker_base)
		new_breaker.breaker_base.texture_offset = new_breaker.position - position # ne-debry je ZERO
	new_breaker.breaker_base.color = breaker_base.color
	new_breaker.break_origin_global = break_origin_global # za animacijo debryja

	# setgets ... mora bit po spawnu, da se izvede setget
	if spawn_as_debry: # _temp
		new_breaker.shape_edge_width = 2
		#		new_breaker.current_motion = new_breaker.MOTION.STILL
		new_breaker.current_motion = new_breaker.MOTION.EXPLODE
	new_breaker.breaker_base_polygon = new_braker_polygon
	if spawn_and_slice:
		new_breaker.call_deferred(\"_slice_chunks\", [new_breaker.breaker_base_polygon], true)


func _spawn_chunk(new_chunk_polygon: PoolVector2Array):

	var new_poly: Polygon2D = Polygon2D.new()
	new_poly.polygon = new_chunk_polygon
	new_poly.color = breaker_base.color
	add_child(new_poly)

	if breaker_base.texture:
		_copy_texture_between_shapes(new_poly, breaker_base)

	return new_poly


func _spawn_cracers(cracked_polygons: Array, chunk_polygon: PoolVector2Array):
	# po animaciji se kvefrijajo

	var new_cracers = CrackerBox.instance()
	new_cracers.breaker_position =  position
	new_cracers.break_origin_global = break_origin_global
	new_cracers.cracked_polygons = cracked_polygons
	new_cracers.chunk_polygon = chunk_polygon
	new_cracers.breaker_shape = breaker_base
	add_child(new_cracers)

	return new_cracers


# UTILITI ----------------------------------------------------------------------------------------------------------------


func _on_SS2D_dirty_update(): # samo SS2D breaker

	self.breaker_base_polygon = collision_shape.polygon


func _copy_texture_between_shapes(copy_to: Polygon2D, copy_from: Polygon2D):

	copy_to.texture = copy_from.texture
	copy_to.texture_offset = copy_from.texture_offset
	copy_to.rotation_degrees = copy_from.rotation_degrees
	copy_to.texture_scale = copy_from.texture_scale


func _get_slicing_style(sliced_by_type: int = current_hit_by_type):

	var material_tool_combo: Array = [current_material, sliced_by_type]
	var slice_style: int

	match sliced_by_type:
		HIT_BY_TYPE.HAMMER:
			slice_style = SLICE_STYLE.FRAGMENTS
		HIT_BY_TYPE.KNIFE:
			slice_style = SLICE_STYLE.FRAGMENTS
		HIT_BY_TYPE.PAINT:
			slice_style = SLICE_STYLE.FRAGMENTS
		HIT_BY_TYPE.ROCKET:
			pass

	return slice_style


func _on_change_breaker_shape(new_breaker_polygon: PoolVector2Array):

	breaker_base_polygon = new_breaker_polygon
	breaker_base.polygon = breaker_base_polygon
	edge_shape.polygon = breaker_base_polygon
	self.shape_edge_width = shape_edge_width
	collision_shape.set_deferred(\"polygon\", breaker_base_polygon)

	$ShapeShadows.update_all_shadows()


func _on_change_motion(new_motion_state: int):

	current_motion =  new_motion_state

	# _temp
	if not current_motion == MOTION.STILL:
		current_motion =  MOTION.MINIMIZE

	match current_motion:
		MOTION.STILL:
#			mode = RigidBody2D.MODE_STATIC
			set_deferred(\"mode\", RigidBody2D.MODE_STATIC)
		MOTION.FALL:
			gravity_scale = 1
			set_deferred(\"mode\", RigidBody2D.MODE_RIGID)
		MOTION.EXPLODE:
			gravity_scale = 0
#			mode = RigidBody2D.MODE_RIGID
			set_deferred(\"mode\", RigidBody2D.MODE_RIGID)
			linear_damp = 2
			var force_vector = global_position - break_origin_global
			apply_central_impulse(force_vector * 20)
		MOTION.DISSAPEAR:
			set_deferred(\"mode\", RigidBody2D.MODE_RIGID)
			gravity_scale = 0
			randomize()
			var random_duration: float = (randi() % 5 + 5)/10.0
			var random_delay: float = (randi() % 3)/10
			var dissolve_tween = get_tree().create_tween()
			dissolve_tween.tween_property(self, \"modulate:a\", 0, random_duration).set_delay(random_delay)
			yield(dissolve_tween, \"finished\")
			queue_free()
		MOTION.MINIMIZE:
			set_deferred(\"mode\", RigidBody2D.MODE_RIGID)
			gravity_scale = 0
			randomize()
			var random_duration: float = (randi() % 5 + 5)/10.0
			var random_delay: float = (randi() % 3)/10
			var minimize_tween = get_tree().create_tween()
			minimize_tween.tween_property(self, \"scale\", Vector2.ZERO, random_duration).set_delay(random_delay)
			yield(minimize_tween, \"finished\")
			queue_free()
		MOTION.CRACK:
			pass


func _on_change_shape_edge_width(new_width: float):

	if edge_shape:
		var offset_polygons: Array = Geometry.offset_polygon_2d(edge_shape.polygon, new_width)
		if offset_polygons.size() == 1:
			edge_shape.polygon = offset_polygons[0]
			shape_edge_width = new_width # šele tukaj, da ne morem setat, če je error
		else:
			shape_edge_width = new_width / 2
			#			printt(\"Breaker offset to big (multiple inset_polygons) ... polovička\", shape_edge_width)


func _on_VisibilityNotifier2D_screen_exited() -> void:

	pass
"

[sub_resource type="Resource" id=260]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=261]
script = ExtResource( 13 )
position = Vector2( 21.0923, 14.2389 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 260 )

[sub_resource type="Resource" id=262]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 2.3

[sub_resource type="Resource" id=263]
script = ExtResource( 13 )
position = Vector2( 516.717, 32.5693 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 262 )

[sub_resource type="Resource" id=264]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=265]
script = ExtResource( 13 )
position = Vector2( 1221.64, 246.76 )
point_in = Vector2( -141.023, -180.842 )
point_out = Vector2( 128.309, 134.225 )
properties = SubResource( 264 )

[sub_resource type="Resource" id=266]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=267]
script = ExtResource( 13 )
position = Vector2( 951.496, 815.883 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 266 )

[sub_resource type="Resource" id=268]
script = ExtResource( 5 )
_points = {
0: SubResource( 261 ),
1: SubResource( 263 ),
2: SubResource( 265 ),
3: SubResource( 267 )
}
_point_order = [ 0, 1, 2, 3 ]
_constraints = {
}
_next_key = 0
_material_overrides = {
}

[sub_resource type="PhysicsMaterial" id=15]
friction = 0.0

[sub_resource type="GDScript" id=16]
script/source = "extends RigidBody2D


export var height = 500 # setget
export var elevation = 0 # setget

var rot = 0 setget _change_rotation


func on_hit(hitting_node: Node2D, hit_global_position: Vector2):

	$BreakerShape.on_hit(hitting_node, hit_global_position)


func _physics_process(delta: float) -> void:
#	printt (\"rotation\", rotation)

	rot = rotation

func _change_rotation(new_rot):

	if not new_rot == rot:
		rot = new_rot

		$ShapeShadows.update_all_shadows()
"

[sub_resource type="PhysicsMaterial" id=17]
friction = 0.0

[sub_resource type="Resource" id=269]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=270]
script = ExtResource( 13 )
position = Vector2( 384, 0 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 269 )

[sub_resource type="Resource" id=271]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=272]
script = ExtResource( 13 )
position = Vector2( 0, 0 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 271 )

[sub_resource type="Resource" id=273]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=274]
script = ExtResource( 13 )
position = Vector2( 1068, 384 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 273 )

[sub_resource type="Resource" id=275]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=276]
script = ExtResource( 13 )
position = Vector2( 548, 392 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 275 )

[sub_resource type="Resource" id=277]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=278]
script = ExtResource( 13 )
position = Vector2( 388, 1184 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 277 )

[sub_resource type="Resource" id=279]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=280]
script = ExtResource( 13 )
position = Vector2( 556, 1016 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 279 )

[sub_resource type="Resource" id=281]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=282]
script = ExtResource( 13 )
position = Vector2( 12, 1176 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 281 )

[sub_resource type="Resource" id=283]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=284]
script = ExtResource( 13 )
position = Vector2( 0, 0 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 283 )

[sub_resource type="Resource" id=285]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=286]
script = ExtResource( 13 )
position = Vector2( 1068, -232 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 285 )

[sub_resource type="Resource" id=287]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=288]
script = ExtResource( 13 )
position = Vector2( 380, -232 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 287 )

[sub_resource type="Resource" id=289]
script = ExtResource( 5 )
_points = {
1: SubResource( 270 ),
2: SubResource( 272 ),
4: SubResource( 274 ),
31: SubResource( 276 ),
32: SubResource( 278 ),
33: SubResource( 280 ),
34: SubResource( 282 ),
35: SubResource( 284 ),
36: SubResource( 286 ),
37: SubResource( 288 )
}
_point_order = [ 2, 1, 37, 36, 4, 31, 33, 32, 34, 35 ]
_constraints = {
[ 2, 35 ]: 15
}
_next_key = 38
_material_overrides = {
}

[sub_resource type="Resource" id=290]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=291]
script = ExtResource( 13 )
position = Vector2( 384, 0 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 290 )

[sub_resource type="Resource" id=292]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=293]
script = ExtResource( 13 )
position = Vector2( 0, 0 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 292 )

[sub_resource type="Resource" id=294]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=295]
script = ExtResource( 13 )
position = Vector2( 1068, 384 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 294 )

[sub_resource type="Resource" id=296]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=297]
script = ExtResource( 13 )
position = Vector2( 548, 392 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 296 )

[sub_resource type="Resource" id=298]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=299]
script = ExtResource( 13 )
position = Vector2( 388, 1184 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 298 )

[sub_resource type="Resource" id=300]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=301]
script = ExtResource( 13 )
position = Vector2( 556, 1016 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 300 )

[sub_resource type="Resource" id=302]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=303]
script = ExtResource( 13 )
position = Vector2( 12, 1176 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 302 )

[sub_resource type="Resource" id=304]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=305]
script = ExtResource( 13 )
position = Vector2( 0, 0 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 304 )

[sub_resource type="Resource" id=306]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=307]
script = ExtResource( 13 )
position = Vector2( 1068, -232 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 306 )

[sub_resource type="Resource" id=308]
script = ExtResource( 15 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=309]
script = ExtResource( 13 )
position = Vector2( 380, -232 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 308 )

[sub_resource type="Resource" id=310]
script = ExtResource( 5 )
_points = {
1: SubResource( 291 ),
2: SubResource( 293 ),
4: SubResource( 295 ),
31: SubResource( 297 ),
32: SubResource( 299 ),
33: SubResource( 301 ),
34: SubResource( 303 ),
35: SubResource( 305 ),
36: SubResource( 307 ),
37: SubResource( 309 )
}
_point_order = [ 2, 1, 37, 36, 4, 31, 33, 32, 34, 35 ]
_constraints = {
[ 2, 35 ]: 15
}
_next_key = 38
_material_overrides = {
}

[sub_resource type="Curve2D" id=1]
_data = {
"points": PoolVector2Array( 0, 0, 0, 0, -7, 64, 0, 0, 0, 0, -16, -3312 )
}

[node name="LevelFirstDrive" instance=ExtResource( 3 )]
__meta__ = {
"_edit_horizontal_guides_": [ -64026.0 ],
"_edit_vertical_guides_": [ -1904.0, 1904.0, -9.0 ],
"_editor_description_": "Z INDEX
- background = -10
- ground terrain < -1
- flat objects and default = 0
- not flat or floating object = 1 - 9
- sky > 10"
}
level_type = 1
level_goals_paths = [ NodePath("Pickables/PickableGas"), NodePath("Pickables/PickableBullet2"), NodePath("Pickables/PickableMina"), NodePath("Pickables/PickableBullet") ]

[node name="BackColor" parent="Ground" index="0"]
margin_top = -68248.0
__meta__ = {
"_edit_lock_": true
}

[node name="StreetAsphalt" parent="Surfaces" index="0" instance=ExtResource( 17 )]
position = Vector2( 2843, -1441 )
__meta__ = {
"_edit_group_": true
}

[node name="StreetSS2D" parent="Surfaces/StreetAsphalt" index="0"]
_points = SubResource( 112 )

[node name="CollisionPolygon2D" parent="Surfaces/StreetAsphalt" index="1"]
polygon = PoolVector2Array( -2641.65, 3233.01, -2339.93, 3242.98, -2033.19, 3232.61, -1662.83, 3193.04, -1263.58, 3109.47, -1081.48, 3052.32, -903.557, 2980.51, -741.397, 2896.1, -591.573, 2794.23, -534.497, 2746.38, -476.772, 2690.92, -424.52, 2632.41, -382.717, 2578.01, -335.717, 2497.09, -327.774, 2478.31, -320.321, 2457.21, -316.125, 2441.09, -314.096, 2428.92, -313.403, 2419.43, -313.572, 2411.14, -314.518, 2402.65, -316.48, 2392.76, -319.904, 2380.56, -322.67, 2372.12, -344.607, 2324.57, -371.073, 2279.58, -594.661, 1970.71, -663.253, 1862.55, -792.792, 1483.92, -806.085, 994.313, -792.125, 801.68, -766.988, 629.726, -729.912, 470.207, -680.964, 322.824, -621.561, 188.541, -546.059, 54.7991, -176.158, -430.178, -80.6963, -573.164, -57.4717, -655.863, -49.6309, -692.919, -43.8865, -732.003, -41.5017, -765.846, -41.7773, -795.008, -44.126, -820.247, -48.1423, -842.479, -53.6523, -862.699, -60.7263, -881.88, -69.6501, -900.88, -80.8586, -920.362, -94.8528, -940.76, -106.691, -956.066, -158.841, -1009.35, -221.429, -1058.75, -300.914, -1109.33, -396.371, -1159.14, -499.995, -1204.27, -762.27, -1291.64, -1043.04, -1357.9, -1662.67, -1444.29, -2222.92, -1475.51, -2803.9, -1470.47, -2812.14, -2470.43, -2199.06, -2475.23, -1565.48, -2439.56, -858.93, -2340.8, -489.225, -2253.64, -142.621, -2138.23, 34.8162, -2061.4, 200.685, -1974.43, 359.679, -1872.58, 509.611, -1753.1, 640.911, -1620.21, 708.924, -1535.69, 766.347, -1451.63, 817.732, -1361.91, 862.189, -1266.88, 898.895, -1167.09, 927.174, -1063.29, 946.568, -956.356, 956.861, -847.18, 958.07, -736.573, 950.392, -625.189, 934.139, -513.487, 907.659, -394.095, 823.712, -146.496, 643.251, 143.031, 289.877, 603.627, 273.202, 635.082, 251.868, 683.136, 232.771, 740.84, 215.742, 814.771, 201.965, 910.243, 193.455, 1024.62, 199.756, 1362.06, 204.9, 1366.25, 232.407, 1408.61, 466.294, 1732.94, 541.357, 1860.82, 603.366, 1994.68, 634.036, 2080.57, 657.319, 2165.35, 674.557, 2255.24, 684.527, 2349.52, 686.212, 2447.16, 678.919, 2546.9, 662.344, 2647.48, 636.542, 2747.75, 601.822, 2846.89, 554.642, 2952.35, 449.431, 3132.57, 347.873, 3267.56, 243.439, 3384.68, 132.325, 3491.59, 9.58179, 3593.36, -228.485, 3754.54, -484.071, 3888.27, -744.365, 3993.78, -1011.59, 4077.2, -1506.75, 4180.78, -1962.65, 4230.12, -2339, 4242.98, -2673.77, 4232.49 )

[node name="StreetConcrete" parent="Surfaces" index="1" instance=ExtResource( 11 )]
position = Vector2( -3034, -1380 )
__meta__ = {
"_edit_group_": true
}

[node name="StreetSS2D" parent="Surfaces/StreetConcrete" index="0"]
_points = SubResource( 129 )

[node name="CollisionPolygon2D" parent="Surfaces/StreetConcrete" index="1"]
polygon = PoolVector2Array( 2196.17, 4225.62, 758.942, 4076.75, 786.594, 2020.85, 2697.17, 2006.32, 2678.29, 926.105, 727.484, 907.288, 736.875, -2390.13, 2995.96, -2528, 2992.04, -1528, 1441.72, -1680.77, 1438.36, 203.966, 3383.55, 217.149, 3412.67, 2704.94, 1491.25, 2730.41, 1471.98, 3375.63, 2195.65, 3225.62 )

[node name="Bridge" parent="Surfaces" index="2" instance=ExtResource( 23 )]
position = Vector2( 2090, -889 )
node_to_bridge_path = NodePath("../StreetAsphalt")

[node name="SurfaceGravel" parent="Surfaces" index="3" instance=ExtResource( 16 )]
position = Vector2( -1377, -3144 )

[node name="SS2D_Shape_Closed" parent="Surfaces/SurfaceGravel" index="0"]
_points = SubResource( 140 )

[node name="CollisionPolygon2D" parent="Surfaces/SurfaceGravel" index="1"]
polygon = PoolVector2Array( 1369.74, -370.148, 1376.45, 223.014, -13.5693, 263.391, -0.0742188, -0.0598145 )

[node name="SurfaceNitro" parent="Surfaces" index="4" instance=ExtResource( 18 )]
position = Vector2( -1369, -3904 )

[node name="SS2D_Shape_Closed" parent="Surfaces/SurfaceNitro" index="0"]
_points = SubResource( 151 )

[node name="CollisionPolygon2D" parent="Surfaces/SurfaceNitro" index="1"]
polygon = PoolVector2Array( 1344.1, -0.103516, 1344.08, 320.061, -6.84863, 703.608, -0.101929, -0.102783 )

[node name="SurfaceHole" parent="Surfaces" index="5" instance=ExtResource( 19 )]
position = Vector2( -1391, -2830 )

[node name="SS2D_Shape_Closed" parent="Surfaces/SurfaceHole" index="0"]
_points = SubResource( 162 )

[node name="CollisionPolygon2D" parent="Surfaces/SurfaceHole" index="1"]
polygon = PoolVector2Array( 1389.92, -20.2939, 1362.95, 269.488, -6.85352, 976.013, -0.101318, -0.100586 )

[node name="TerrainMountain" parent="Terrain" index="0" instance=ExtResource( 22 )]
position = Vector2( -3098, -3107 )
script = SubResource( 18 )
height = 50.0

[node name="ObjectShapeSS2D" parent="Terrain/TerrainMountain" index="1"]
_points = SubResource( 193 )
shape_material = SubResource( 50 )

[node name="CollisionPolygon2D" parent="Terrain/TerrainMountain" index="2"]
visible = true
polygon = PoolVector2Array( -31.7966, 4751.45, -0.102295, -0.103027, 384.007, -0.0227051, 508.221, 88.9219, 504.682, 116.184, 485.181, 206.624, 343.637, 629.542, 319.087, 700.406, 303.997, 760.906, 297.278, 811.844, 296.719, 833.975, 297.845, 854.016, 300.521, 872.065, 304.611, 888.223, 309.979, 902.588, 316.49, 915.263, 324.007, 926.345, 332.395, 935.935, 341.517, 944.133, 351.238, 951.039, 361.422, 956.753, 371.934, 961.374, 382.637, 965.002, 393.396, 967.738, 414.538, 970.931, 434.272, 971.751, 465.173, 969.472, 477.691, 967.127, 295.801, 1182.57, 295.793, 1381, 449.385, 1606.62, 292.557, 1998.63, 463.598, 2540.29, 249.793, 3509.59, 477.667, 3971.96, 327.695, 4828.07 )

[node name="TerrainMountain2" parent="Terrain" index="1" instance=ExtResource( 22 )]
position = Vector2( -1280, -4552 )
script = SubResource( 18 )
height = 50.0

[node name="ObjectShapeSS2D" parent="Terrain/TerrainMountain2" index="1"]
_points = SubResource( 242 )
shape_material = SubResource( 50 )

[node name="CollisionPolygon2D" parent="Terrain/TerrainMountain2" index="2"]
visible = true
polygon = PoolVector2Array( -0.112793, -0.108398, 5858.6, 45.1934, 5801.4, 390.99, 5581.94, 8061.48, -126.738, 8068.98, -323.307, 7812.04, 326.344, 7902.8, 945.526, 7804.64, 1851.65, 7872.6, 2787.96, 7698.91, 3331.63, 7200.55, 4048.98, 6943.83, 4320.82, 6800.36, 4406.36, 6780.18, 4603.04, 6712.58, 4714.96, 6657.67, 4769.41, 6624.36, 4820.96, 6586.93, 4868.22, 6545.2, 4909.79, 6499.02, 4927.99, 6474.2, 4944.25, 6448.21, 4958.38, 6421.02, 4970.21, 6392.61, 5294.82, 5448.75, 5180.34, 5336.88, 4933.4, 5046.64, 4805.63, 4855.86, 4748.61, 4752.77, 4699.2, 4645.97, 4659.64, 4536.51, 4632.22, 4425.46, 4619.21, 4313.87, 4618.81, 4258.21, 4622.86, 4202.82, 4640.67, 4096.77, 4667.68, 3999.33, 4702.45, 3910.24, 4743.56, 3829.28, 4789.58, 3756.19, 4839.08, 3690.74, 4890.64, 3632.67, 4942.83, 3581.75, 5043.4, 3500.37, 5129.37, 3444.65, 5211.77, 3402.37, 5181.63, 2337.72, 5340.14, 1424.08, 4902.25, 1076.71, 4260.41, 789.772, 2576.54, 465.078, 16.7023, 348.202 )

[node name="BreakerClosedSS2D" parent="Terrain" index="2" instance=ExtResource( 1 )]
position = Vector2( 808, 0 )
physics_material_override = SubResource( 100 )
script = SubResource( 101 )
transparency = 1.0

[node name="CollisionPolygon2D" parent="Terrain/BreakerClosedSS2D" index="4"]
polygon = PoolVector2Array( 234.105, 27.7923, 263.998, 20.4001, 296.179, 15.0635, 330.219, 12.0139, 365.688, 11.4827, 402.156, 13.7013, 439.193, 18.9008, 476.369, 27.3128, 513.255, 39.1685, 549.421, 54.6991, 584.437, 74.1361, 617.874, 97.7109, 649.301, 125.655, 678.289, 158.199, 704.407, 195.574, 727.227, 238.013, 746.318, 285.746, 764.724, 332.115, 785.403, 371.001, 807.799, 403.441, 831.358, 430.471, 855.524, 453.13, 879.742, 472.454, 926.113, 505.245, 947.155, 520.786, 966.028, 537.141, 974.477, 545.948, 982.176, 555.347, 989.055, 565.469, 995.044, 576.441, 1000.07, 588.396, 1004.08, 601.461, 1006.98, 615.766, 1008.72, 631.442, 1009.22, 648.618, 1008.42, 667.423, 1002.61, 710.44, 997.732, 732.66, 991.888, 752.513, 985.151, 770.106, 977.594, 785.55, 969.292, 798.952, 960.317, 810.423, 950.743, 820.071, 940.644, 828.005, 930.094, 834.334, 919.165, 839.168, 907.932, 842.615, 896.467, 844.784, 884.845, 845.784, 873.14, 845.725, 861.423, 844.715, 849.77, 842.864, 826.946, 837.074, 805.257, 829.225, 767.636, 810.843, 731.887, 787.82, 341.559, 948.462, 337.811, 949.95, 333.837, 951.157, 329.646, 952.084, 325.245, 952.733, 315.848, 953.2, 305.709, 952.566, 294.891, 950.842, 283.458, 948.037, 259.001, 939.221, 232.848, 926.194, 205.506, 909.032, 177.484, 887.81, 149.291, 862.605, 121.435, 833.491, 94.4246, 800.544, 68.7686, 763.84, 44.9754, 723.455, 23.5537, 679.464, 5.01196, 631.942, -10.1412, 580.966, -21.3973, 526.611, -26.9207, 475.824, -27.134, 454.184, -25.7938, 434.895, -23.0081, 417.844, -18.8856, 402.916, -13.5342, 390, -10.4318, 384.26, -7.06317, 378.98, -3.44177, 374.146, 0.418823, 369.744, 4.50513, 365.759, 8.80353, 362.178, 13.3005, 358.986, 17.9824, 356.168, 22.8356, 353.712, 27.8466, 351.601, 38.2879, 348.363, 49.1978, 346.342, 60.4675, 345.423, 71.9885, 345.492, 95.3502, 348.144, 118.415, 353.389, 160.178, 368.024, 201.724, 388.222, 185.499, 338.356, 171.88, 286.07, 160.803, 224.809, 157.659, 192.966, 156.878, 161.462, 159.038, 131.159, 161.401, 116.727, 164.714, 102.918, 169.05, 89.8398, 174.482, 77.5997, 181.081, 66.3055, 188.919, 56.0653, 193.326, 51.374, 198.069, 46.9863, 203.158, 42.9158, 208.602, 39.176, 214.409, 35.7804, 220.59, 32.7419 )

[node name="SS2D_Shape_Closed" parent="Terrain/BreakerClosedSS2D" index="6"]
_points = SubResource( 259 )

[node name="GoalPillar4" parent="Objects" index="1" instance=ExtResource( 9 )]
position = Vector2( 696, -1271 )

[node name="AnimationPlayer" parent="Objects/GoalPillar4" index="8"]
anims/RESET = SubResource( 2 )
anims/edge_rotate = SubResource( 3 )

[node name="GoalPillar2" parent="Objects" index="2" instance=ExtResource( 9 )]
position = Vector2( 1816, 160 )

[node name="GoalPillar3" parent="Objects" index="3" instance=ExtResource( 9 )]
position = Vector2( 2200, 976 )

[node name="BreakerConcrete" parent="Objects" index="4" instance=ExtResource( 25 )]
position = Vector2( 2443, -1915 )
physics_material_override = SubResource( 4 )
script = SubResource( 5 )
transparency = 1.0

[node name="BreakerOpenSS2D" parent="Objects" index="5" instance=ExtResource( 21 )]
position = Vector2( 128, -2856 )
physics_material_override = SubResource( 4 )
script = SubResource( 5 )
transparency = 1.0

[node name="CollisionPolygon2D" parent="Objects/BreakerOpenSS2D" index="4"]
polygon = PoolVector2Array( 42.1846, 28.4778, 1033.44, 65.0903, 1631.69, 148.737, 1873.08, 199.668, 2104.17, 273.559, 2208.76, 319.017, 2302.14, 370.587, 2343.75, 398.742, 2381.49, 428.491, 2415.01, 459.899, 2443.86, 493.015, 2455.18, 506.04, 2464.5, 520.28, 2472.69, 535.045, 2479.54, 550.526, 2485.05, 566.738, 2489.23, 583.66, 2492.12, 601.259, 2493.78, 619.502, 2493.51, 657.791, 2488.74, 698.254, 2479.84, 740.622, 2467.15, 784.633, 2431.71, 876.484, 2385.13, 971.654, 2269.42, 1163.34, 1902.99, 1631.77, 1852.58, 1592.34, 2216.72, 1127.02, 2328.94, 941.016, 2373.06, 850.872, 2406.49, 764.224, 2417.73, 725.167, 2425.58, 687.934, 2429.64, 653.82, 2429.83, 622.153, 2428.63, 609.336, 2426.53, 596.545, 2423.63, 584.748, 2419.94, 573.893, 2415.46, 563.904, 2410.1, 554.709, 2403.54, 546.399, 2390.91, 539.052, 2358.04, 515.216, 2323.83, 495.824, 2286.12, 477.863, 2246.34, 461.998, 2157.5, 423.297, 2060.01, 390.375, 1838.08, 326.83, 1608.46, 278.858, 1022.68, 170.141, 39.8192, 92.4341 )

[node name="SS2D_Shape_Open" parent="Objects/BreakerOpenSS2D" index="6"]
scale = Vector2( 2, 2 )
_points = SubResource( 268 )

[node name="BreakerRigidConcrete" parent="Objects" index="6" instance=ExtResource( 2 )]
position = Vector2( -647, -559 )
rotation = 1.72223
collision_layer = 1
physics_material_override = SubResource( 15 )
script = SubResource( 16 )

[node name="BreakerShape" parent="Objects/BreakerRigidConcrete" index="1"]
color = Color( 0.4, 0.4, 0.4, 1 )
polygon = PoolVector2Array( 0, 0, -2, 461, 735, 443, 833, 268, 1020, 185, 1082, 449, 1237, 440, 1463, 394, 1796, 253, 1835, -7 )

[node name="CircoRandomShape" parent="Objects/BreakerRigidConcrete/BreakerShape/BreakerTool" index="1"]
visible = false

[node name="BreakerRigid" parent="Objects" index="7" instance=ExtResource( 20 )]
position = Vector2( 833, -2466 )

[node name="BreakerRigid2" parent="Objects" index="8" instance=ExtResource( 20 )]
position = Vector2( 1416, -1859 )

[node name="BreakerRigidConcrete2" parent="Objects" index="9" instance=ExtResource( 2 )]
position = Vector2( 882, -1951 )
rotation = -0.278363
physics_material_override = SubResource( 17 )
sleeping = false
test = true

[node name="PickableBullet" parent="Pickables" index="0" instance=ExtResource( 4 )]
position = Vector2( 584, -352 )

[node name="PickableMina" parent="Pickables" index="1" instance=ExtResource( 7 )]
position = Vector2( -248, -1128 )

[node name="PickableLauncher" parent="Pickables" index="2" instance=ExtResource( 6 )]
position = Vector2( -560, 152 )

[node name="PickableBullet2" parent="Pickables" index="3" instance=ExtResource( 4 )]
position = Vector2( -1136, -1176 )

[node name="PickableCash" parent="Pickables" index="4" instance=ExtResource( 8 )]
position = Vector2( 600, -1096 )

[node name="PickableGas" parent="Pickables" index="5" instance=ExtResource( 14 )]
position = Vector2( -1128, -184 )

[node name="Tracking@Line2D" type="Line2D" parent="." index="6"]
visible = false
points = PoolVector2Array( 20, -470, 1280, -746, 168, -1446, -1552, -1838, -1176, -2726, 596, -2662, 1024, -1934, -84, -1475, -1348, -1384, -1486, -838, -37, -473 )
default_color = Color( 1, 0.960938, 0, 1 )

[node name="ObjectSS2D_Building" parent="Buiildings" index="0" instance=ExtResource( 24 )]
position = Vector2( -3108, -4552 )

[node name="ObjectShapeSS2D" parent="Buiildings/ObjectSS2D_Building" index="1"]
_points = SubResource( 289 )

[node name="CollisionPolygon2D" parent="Buiildings/ObjectSS2D_Building" index="2"]
polygon = PoolVector2Array( -0.105469, -0.104492, 383.893, -0.10498, 379.893, -232.105, 1068.1, -232.104, 1068.1, 384.101, 548.105, 392.102, 556.036, 1016.01, 388.015, 1184.04, 11.8999, 1176.1 )

[node name="ObjectSS2D_Building2" parent="Buiildings" index="1" instance=ExtResource( 24 )]
position = Vector2( -3204, 3280 )
rotation = -1.21787

[node name="ObjectShapeSS2D" parent="Buiildings/ObjectSS2D_Building2" index="1"]
_points = SubResource( 310 )

[node name="CollisionPolygon2D" parent="Buiildings/ObjectSS2D_Building2" index="2"]
polygon = PoolVector2Array( -0.105289, -0.104314, 383.893, -0.104889, 379.893, -232.105, 1068.1, -232.104, 1068.1, 384.101, 548.105, 392.102, 556.036, 1016.01, 388.015, 1184.04, 11.8999, 1176.1 )

[node name="StartPosition" parent="Elements/StartLine" index="3"]
position = Vector2( -1, 776 )

[node name="PositionsGrid" parent="Elements/StartPositions" index="1"]
anchor_left = 0.5
anchor_right = 0.5
margin_left = -848.0
margin_right = 848.0
margin_bottom = 713.0

[node name="PositionsRandom" parent="Elements/StartPositions" index="2"]
margin_left = -752.0
margin_top = -1175.0
margin_right = 736.0
margin_bottom = 401.0

[node name="PositionsCirco" parent="Elements/StartPositions" index="3"]
margin_left = -544.0
margin_top = -983.0
margin_right = 600.0
margin_bottom = 233.0

[node name="FinishLine" parent="Elements" index="3"]
position = Vector2( -4, -3312 )

[node name="TrackingLine" parent="Elements" index="4"]
curve = SubResource( 1 )

[node name="Tracker" parent="Elements/TrackingLine" index="0"]
position = Vector2( -7, 64 )
rotation = -1.57346

[node name="__ScreenSize" parent="." index="14"]
margin_left = -2565.0
margin_top = -2900.0
margin_right = -5.0
margin_bottom = -1460.0
rect_scale = Vector2( 2, 2 )

[node name="__WorldMeters" parent="." index="15"]
margin_left = -982.0
margin_top = 3.0
margin_right = -678.0
margin_bottom = 3.0
__meta__ = {
"_edit_group_": true
}

[editable path="Surfaces/StreetAsphalt"]
[editable path="Surfaces/StreetConcrete"]
[editable path="Surfaces/SurfaceGravel"]
[editable path="Surfaces/SurfaceNitro"]
[editable path="Surfaces/SurfaceHole"]
[editable path="Terrain/TerrainMountain"]
[editable path="Terrain/TerrainMountain2"]
[editable path="Terrain/BreakerClosedSS2D"]
[editable path="Objects/GoalPillar4"]
[editable path="Objects/BreakerOpenSS2D"]
[editable path="Objects/BreakerRigidConcrete"]
[editable path="Buiildings/ObjectSS2D_Building"]
[editable path="Buiildings/ObjectSS2D_Building2"]
