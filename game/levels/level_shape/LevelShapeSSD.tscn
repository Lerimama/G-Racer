[gd_scene load_steps=30 format=2]

[ext_resource path="res://addons/rmsmartshape/shapes/point_array.gd" type="Script" id=1]
[ext_resource path="res://addons/rmsmartshape/shapes/point.gd" type="Script" id=2]
[ext_resource path="res://addons/rmsmartshape/shapes/shape_closed.gd" type="Script" id=3]
[ext_resource path="res://addons/rmsmartshape/vertex_properties.gd" type="Script" id=4]
[ext_resource path="res://addons/rmsmartshape/materials/shape_material.gd" type="Script" id=5]
[ext_resource path="res://addons/rmsmartshape/materials/edge_material_metadata.gd" type="Script" id=6]
[ext_resource path="res://addons/rmsmartshape/materials/edge_material.gd" type="Script" id=7]
[ext_resource path="res://addons/rmsmartshape/normal_range.gd" type="Script" id=8]
[ext_resource path="res://game/levels/level_shape/LevelShapeSSD.gd" type="Script" id=9]
[ext_resource path="res://game/levels/level_shape/edge.png" type="Texture" id=10]

[sub_resource type="Resource" id=1824]
script = ExtResource( 4 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=1825]
script = ExtResource( 2 )
position = Vector2( 8.0867, 488.734 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 1824 )

[sub_resource type="Resource" id=1826]
script = ExtResource( 4 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=1827]
script = ExtResource( 2 )
position = Vector2( 662.493, 4.45773 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 1826 )

[sub_resource type="Resource" id=1828]
script = ExtResource( 4 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=1829]
script = ExtResource( 2 )
position = Vector2( 3.41457, 2.68796 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 1828 )

[sub_resource type="Resource" id=1830]
script = ExtResource( 4 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=1831]
script = ExtResource( 2 )
position = Vector2( 8.0867, 488.734 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 1830 )

[sub_resource type="Resource" id=1832]
script = ExtResource( 4 )
texture_idx = 0
flip = false
width = 1.0

[sub_resource type="Resource" id=1833]
script = ExtResource( 2 )
position = Vector2( 654.739, 478.33 )
point_in = Vector2( 0, 0 )
point_out = Vector2( 0, 0 )
properties = SubResource( 1832 )

[sub_resource type="Resource" id=1834]
script = ExtResource( 1 )
_points = {
0: SubResource( 1825 ),
1: SubResource( 1827 ),
2: SubResource( 1829 ),
3: SubResource( 1831 ),
4: SubResource( 1833 )
}
_point_order = [ 3, 2, 1, 4, 0 ]
_constraints = {
[ 0, 3 ]: 15
}
_next_key = 31
_material_overrides = {
}

[sub_resource type="Resource" id=1821]
script = ExtResource( 7 )
textures = [ ExtResource( 10 ) ]
texture_normals = [  ]
textures_corner_outer = [  ]
textures_corner_inner = [  ]
texture_normals_corner_outer = [  ]
texture_normals_corner_inner = [  ]
textures_taper_left = [  ]
textures_taper_right = [  ]
texture_normals_taper_left = [  ]
texture_normals_taper_right = [  ]
randomize_texture = false
use_corner_texture = false
use_taper_texture = false
fit_mode = 0

[sub_resource type="Resource" id=1809]
script = ExtResource( 8 )
begin = 0.0
distance = 360.0
edgeRendering = Vector2( 0, 0 )

[sub_resource type="Resource" id=1822]
script = ExtResource( 6 )
edge_material = SubResource( 1821 )
normal_range = SubResource( 1809 )
weld = true
render = true
z_index = 0
z_as_relative = true
offset = 1.0

[sub_resource type="Gradient" id=650]
offsets = PoolRealArray( 0.465278 )
colors = PoolColorArray( 1, 1, 1, 1 )

[sub_resource type="GradientTexture" id=160]
gradient = SubResource( 650 )

[sub_resource type="Resource" id=1823]
script = ExtResource( 5 )
_edge_meta_materials = [ SubResource( 1822 ) ]
fill_textures = [ SubResource( 160 ) ]
fill_texture_normals = [  ]
fill_texture_z_index = 0
fill_texture_show_behind_parent = false
fill_mesh_offset = 0.0
render_offset = 0.0

[sub_resource type="Shader" id=12]
code = "shader_type canvas_item;
//render_mode blend_;

// KAJ ŠEJDER DELA?
// v prvem koraku naredi senco, jo zamakne ... potem jo izreže, da ne prekriva original barve 
// n-krat se kopira prvi korak, z vsako kopijo se poveča foktor zamika
// senca je tako zmeraj večja (barve se prekrivajo in na čuden način mešajo transparenco)
// po vseh kopiranjih na celotno nastalo senco ponovno apliciramo željeno barvo sence
// končno barvo senčenega objekta ali ozadja lahko poljubno nastavimo
// zaenkrat primeren predvsem za dvobarvno teksturo

// UPGRADE
// - multi barve
// - automatske mere ekrana
// - usklajevanje št. korakov s svetlostjo teksture

uniform vec2 node_size = vec2(320.0, 320.0); // setaj od zunaj
uniform vec2 screen_size = vec2(640.0, 360.0); // setaj od zunaj

uniform vec4 casting_color_1: hint_color = vec4(1.0, 1.0, 1.0, 1.0); // senčena barva
uniform vec4 casting_color_2: hint_color = vec4(1.0, 0.0, 0.0, 0.0); // senčena barva
uniform vec4 casting_color_3: hint_color = vec4(0.0, 1.0, 0.0, 0.0); // senčena barva

uniform bool casting_object_on_floor = true; // če je element dvignjen je njegova senca drugačna, kot če je do tal
uniform vec4 shadow_color: hint_color = vec4(1.0, 0.0, 0.0, 1.0);
uniform int shadow_distance = 3; // število pixlov ... imitira dolžino sence
//uniform float shadow_rotation_deg: hint_range(0.0, 360.0) = 90; // rotacija v stopinjah (dol)
uniform vec2 shadow_direction = vec2(1,1);
uniform float pixel_scale = 1.0; // 3.0 je fajn adaptacija, da je vsak korak en pixel

uniform bool switch_cast_and_receive = false;
uniform vec4 new_casting_color: hint_color = vec4(0.0, 0.0, 0.0, 0.0);
uniform vec4 new_receiving_color: hint_color = vec4(0.0, 0.0, 0.0, 0.0);



void fragment(){
	
	vec4 original_color = textureLod(SCREEN_TEXTURE, SCREEN_UV, 0.0);
	vec4 step_offset_color; // zamik teksture na korak
	vec4 offset_color; // barva vsek korakov skupaj
	
//	float shadow_rotation_rad = radians(shadow_rotation_deg);
//	float step_pixel_offset_y = cos(shadow_rotation_rad) ;//* pixel_scale;
//	float step_pixel_offset_x = sin(shadow_rotation_rad);// * pixel_scale;
	float step_pixel_offset_x = shadow_direction.x;// * pixel_scale;
	float step_pixel_offset_y = -shadow_direction.y;//* pixel_scale;
	
	float step_count = 0.0;
	
	// multiplikacija sence
	for (int i = 0; i < shadow_distance; i++) {
		
		step_count += 1.0; // štejemo korake ... pusti na ena
		
		// zamik texture v smeri (preračun texlov v pixle) ... z vsakim korakom se prišteje zamik-na-korak
		vec2 uvs;
		if (casting_object_on_floor == true){
			// če je metalec sence debel je senčka brez odmika
//			uvs = SCREEN_UV + vec2(step_pixel_offset_x / node_size.x, step_pixel_offset_y / node_size.y) * -1.0 * step_count; 
			uvs = SCREEN_UV + vec2(step_pixel_offset_x / screen_size.x, step_pixel_offset_y / screen_size.y) * -1.0 * step_count; 
		} else {
			// če je metalec sence ploščat ma senčka odmik
//			uvs = SCREEN_UV + vec2(step_pixel_offset_x * float(shadow_distance) / node_size.x, step_pixel_offset_y * float(shadow_distance) / node_size.y) * -1.0
			uvs = SCREEN_UV + vec2(step_pixel_offset_x * float(shadow_distance) / screen_size.x, step_pixel_offset_y * float(shadow_distance) / screen_size.y) * -1.0
		}
		step_offset_color = texture(SCREEN_TEXTURE, uvs); 
		
		// ne switchamo
		if (switch_cast_and_receive != true){
			// kjer je zamaknjena senčena barva, damo barvo sence
			if (length(step_offset_color - casting_color_1) < 0.01 || length(step_offset_color - casting_color_2) < 0.01 || length(step_offset_color - casting_color_3) < 0.01){
				step_offset_color = vec4(0.0, 0.0, 0.0, 1.0);
			}
			else {
				step_offset_color.a = 0.0;
			}
		}
		// switchamo ... samo obrnemo pogoj
		else if (switch_cast_and_receive == true){
			if (length(step_offset_color - casting_color_1) > 0.01){
				step_offset_color = vec4(0.0, 0.0, 0.0, 1.0);
			}
			else {
				step_offset_color.a = 0.0;
			}	
		}
		
		// dodajanje teksture korakov v skupno teksturo
		offset_color += step_offset_color; // barve se čudno mešajo ... zato dodam pravo barvo sence kasneje
	}
	
	
	// FINAL COLOR 
	
	// ne switchamo
	if (switch_cast_and_receive != true){
		// kjer je original barva enaka senčeni barvi, damo original barvo 
		if (length(original_color - casting_color_1) < 0.01 || length(original_color - casting_color_2) < 0.01 || length(original_color - casting_color_3) < 0.01){
		// alfa 100%, če ne se ne vidi ...  to bom popravil, da se aplcira alpha teksture	
			COLOR =  new_casting_color;
			}
		// kjer skupna zamaknjena tekstura NI transparentna, damo željeno barvo sence 
		else if (offset_color.a > 0.0){
			COLOR = mix(new_receiving_color, shadow_color , shadow_color.a);
		}
		// kjer skupna zamaknjena tekstura JE transparentna, damo željeno barvo ozadja
		else{
			COLOR = new_receiving_color; 
		}
	}
	// switchamo ... samo obrnemo pogoj
	else if (switch_cast_and_receive == true) {
		if (length(original_color - casting_color_1) > 0.01){
		// alfa 100%, če ne se ne vidi ...  to bom popravil, da se aplcira alpha teksture
			COLOR =  new_casting_color; // alfa 100%, če ne se ne vidi ...  to bom popravil, da se aplcira alpha teksture
			}
		else if (offset_color.a > 0.0){
			COLOR = mix(new_receiving_color, shadow_color , shadow_color.a);
		}
		else{
			COLOR = new_receiving_color; 
		}		
		
	}
}
"

[sub_resource type="ShaderMaterial" id=13]
shader = SubResource( 12 )
shader_param/node_size = Vector2( 320, 320 )
shader_param/screen_size = Vector2( 640, 360 )
shader_param/casting_color_1 = Color( 0, 1, 0, 1 )
shader_param/casting_color_2 = Color( 1, 0, 0, 0 )
shader_param/casting_color_3 = Color( 0, 1, 0, 0 )
shader_param/casting_object_on_floor = true
shader_param/shadow_color = Color( 0.0941176, 0.0941176, 0.0941176, 0.54902 )
shader_param/shadow_distance = 1
shader_param/shadow_direction = Vector2( 1, 1 )
shader_param/pixel_scale = 1.0
shader_param/switch_cast_and_receive = false
shader_param/new_casting_color = Color( 0, 0, 0, 0 )
shader_param/new_receiving_color = Color( 0, 0, 0, 0 )

[node name="LevelShapeSSD" type="StaticBody2D"]
modulate = Color( 0, 0, 0, 1 )
script = ExtResource( 9 )
__meta__ = {
"_edit_group_": true
}
use_shader_shadow = false

[node name="ObjectShapeSSD" type="Node2D" parent="."]
script = ExtResource( 3 )
_points = SubResource( 1834 )
shape_material = SubResource( 1823 )
tessellation_stages = 5
tessellation_tolerence = 4.0
flip_edges = false
render_edges = true
collision_size = 32.0
collision_offset = 0.0
collision_polygon_node_path = NodePath("../CollisionPolygon2D")

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="."]
visible = false
polygon = PoolVector2Array( 7.98367, 488.84, 3.30911, 2.58323, 662.599, 4.35345, 654.839, 478.43 )

[node name="ShadowShader" type="ColorRect" parent="."]
material = SubResource( 13 )
margin_left = -18.0
margin_top = -20.0
margin_right = 700.0
margin_bottom = 507.0
grow_horizontal = 0
grow_vertical = 0
__meta__ = {
"_edit_group_": true
}

[node name="ColorRect" type="ColorRect" parent="ShadowShader"]
visible = false
modulate = Color( 1, 1, 1, 0.129412 )
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 1, 0, 0, 1 )

[connection signal="resized" from="ShadowShader" to="." method="_on_EdgeShadows_resized"]
