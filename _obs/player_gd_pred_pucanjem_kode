extends RigidBody2D


## ----------------------------------------------------------------

## - gibanje plejerja sem hotel narediti bolj podobnega avtomobilu 
## - original koda je ful kompleksna in upošteva razdaljo me osmi pogona
## - na koncu sem stvari popreprostil in gibanje naredil precej simple
## - stvar, ki jih simuliram sta gradualno obračanje vozila z vožnjo (na mestu se tudi obrača, ker ni avto ampak "raketa")
## - ostal je tudi drift efekt

## ----------------------------------------------------------------




var wheel_base = 32  # distanca med kolesi, ki je v tem trenutku ne rabim

var fw_rotation_per_frame = 200  # rotacija je narejena tako, da na vsak frejm obrača za določeno kot (rad)
var fw_rotation

var velocity = Vector2.ZERO
var engine_power = 40  # Forward acceleration force.
var acceleration = Vector2.ZERO

var drag_coefficient = 0.95 # upor zraka
var drift_factor = 0.97 # prijemna cesti



func get_input():
	
	
	var fw_rotation_multiplier = 0  
	
	if Input.is_action_pressed("ui_right"):
		fw_rotation_multiplier = 1
	if Input.is_action_pressed("ui_left"):
		fw_rotation_multiplier -= 1
	
	# rotacija 
	fw_rotation = fw_rotation_multiplier * deg2rad(fw_rotation_per_frame)
	
#	velocity = Vector2.ZERO # na štartu je 0

	velocity *= drag_coefficient
	
	velocity = get_up_velocity() + (get_right_velocity() * drift_factor)

	if Input.is_action_pressed("ui_up"):
		velocity += get_up()* engine_power
#		acceleration = -transform.y * engine_power
		print ("velocity")
		print (velocity)
		
	if Input.is_action_pressed("ui_down"):
		velocity -= get_up()* engine_power
#		acceleration = transform.y * engine_power
	
	
func _physics_process(delta):
	
#	acceleration = Vector2.ZERO
	get_input()
#	calculate_steering(delta)
#	velocity += acceleration * delta
#	velocity = move_and_slide(velocity)
	
	
	
	
	# Apply the force
	set_linear_velocity(velocity)
	set_angular_velocity(fw_rotation)



# računanje vektorjev smeri

# izračun vektorja gor (vehicle's forward direction)
func get_up():
	return Vector2(cos(-get_rotation() + PI/2.0), sin(-get_rotation() - PI/2.0))

# izračun horizontalnega vektorja (right je +x)
func get_right():
	return Vector2(cos(-get_rotation()), sin(get_rotation()))

# Returns up velocity (vehicle's forward velocity)
func get_up_velocity():
	return get_up() * velocity.dot(get_up())

# Returns right velocity
func get_right_velocity():
	return get_right() * velocity.dot(get_right())



func calculate_steering(delta):
# izračun zavijanje z upoštevanjem dolžine med kolesi

	var rear_wheel = position - transform.x * wheel_base / 2.0
	var front_wheel = position + transform.x * wheel_base / 2.0
	rear_wheel += velocity * delta
	front_wheel += velocity.rotated(fw_rotation) * delta
	var new_heading = (front_wheel - rear_wheel).normalized()
	velocity = new_heading * velocity.length()
	rotation = new_heading.angle()


