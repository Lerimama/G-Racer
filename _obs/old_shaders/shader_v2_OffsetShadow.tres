[gd_resource type="Shader" format=2]

[resource]
code = "shader_type canvas_item;

// šejder v1 - prepoznava 100% transparenco in aplicira novo barvo na te pixle
// šejder v2 - prepoznava tudi cutout barvo, ki jo potem manipulira
// šejder v3 - prepoznava barvo, ki ji mora dodat senco
// šejder v4 - prepoznava različne barve, ki jim dodaj različne sence
// šejder v5 - dodaja sence za prizemljene objekte

uniform vec4 shadow_color : hint_color = vec4(0.0, 0.0, 0.0, 1.0);
uniform vec4 cutout_red : hint_color = vec4(1.0, 0.0, 0.0, 1.0);
uniform vec4 cutout_green : hint_color = vec4(0.0, 1.0, 0.0, 1.0);
uniform vec4 cutout_blue : hint_color = vec4(0.0, 0.0, 1.0, 1.0);
uniform vec4 cutout_alpha : hint_color = vec4(0.0, 0.0, 0.0, 0.5);

uniform float sprite_altitude = 2.0;

uniform float shadow_offset_x = 15.0; // to niso texli ampak pixli
uniform float shadow_offset_y = 15.0; // to niso texli ampak pixli
uniform float shadow_offset_x_2 = -10.0; // to niso texli ampak pixli
uniform float shadow_offset_y_2 = -10.0; // to niso texli ampak pixli

// dimenzija teksture za uskladitev texlov s pixli (1/texture original size)  
uniform float texture_width = 640.0;
uniform float texture_height = 360.0;



void fragment(){

	
	// preračun pravge offseta sence ... pixle konvertamo v texle
	vec2 shadow_offset = vec2(shadow_offset_x / texture_width, shadow_offset_y / texture_height);
	vec2 uvs = UV + shadow_offset;
	
	// poberemo prikaz texture in apliciramo samo offset še predno apliciramo barvo 
	vec4 color = texture(TEXTURE, uvs);


//	shadow_offset = vec2(0.10,0.10);
//	altitude = color.a;
//	color = texture(TEXTURE, UV + shadow_offset);
//	shadow_offset = vec2(1.0,0.10);
//	color = texture(TEXTURE, UV + altitude);
	
	
	
	if (color == cutout_red){
		color = vec4(0.2);
	}
	else if ( color == cutout_green){
		color = vec4(0.2);
	}
	else if ( color == cutout_green){
		color = vec4(0.5);
	}
	
	
	
	// barva sence, kjer transparenca ni 100%
//	if (color.a > 0.0){
//		// vse je v barvi sence ... z množenjem transparence, dobimo presentacijo transparence
//		color = shadow_color * color.a;
//	}
//	// transparenca, kjer je transparenca 100%
//	else {
//		color = cutout_alpha;
//	}
//

	
	COLOR = color;
}"
