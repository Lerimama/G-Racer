extends KinematicBody2D


# osnovno gibanje
export var axis_distance : int = 32  # medosna razdalja
export var engine_power : int = 800
export var turn_angle : int = 15  # kot obrata per frame (stopinje)
export var steer_free_multiplier : int = 10 # omogoča dovolj hitro rotacijo kadar je gas na 0
#export var max_speed_reverse : int = 300

# vpliv okolja
export var friction : float = -1 # vpliv trenja s podlago (raste linearno s hitrostjo in vpliva na pospešek)
export var drag : float = -0.0001 # vpliv upora zraka (raste kvadratno s hitrostjo in vpliva na končno hitrost)
export var side_traction : float = 0.2

# driftanje
#var slip_speed : int = 700 # hitrost nad katero začne driftat
#var traction_fast : float = 0.1 # ko drsi
#var traction_slow : float = 0.5 # ko ne drsi

# state machine
#var engine_on : bool = false
var fwd_motion : bool = false
var rev_motion : bool = false

# notranje
var steer_angle : float # "kot obrata per frame" v določeni smeri (levo ali desno)
var rotation_dir : float
var velocity : Vector2 = Vector2.ZERO
var acceleration : Vector2 = Vector2.ZERO


func _ready() -> void:
	# smer ob štartu
	rotation = deg2rad(-90)
	
func _physics_process(delta):
	
	acceleration = Vector2.ZERO # ko spustim gumb se resetira
	if Input.is_action_pressed("ui_up"):
		acceleration = transform.x * engine_power # transform.x je (-0, -1)
		fwd_motion = true
	elif Input.is_action_just_released("ui_up"):
		fwd_motion = false
		
	if Input.is_action_pressed("ui_down"):
		acceleration = transform.x * -engine_power
		rev_motion = true
	elif Input.is_action_just_released("ui_down"):
		rev_motion = false
	
	rotation_dir = 0 # ko spustim gumb se resetira
	rotation_dir = Input.get_axis("ui_left", "ui_right") # +1 ali -1
	
	steer_angle = rotation_dir * deg2rad(turn_angle) # vsak frejm se obrne za toliko
	
	apply_friction(delta)
	calculate_steering(delta)
	
	# rotacija 
	if rev_motion == false && fwd_motion == false: # ko pogon ne deluje
		rotate(delta * steer_angle * steer_free_multiplier)
	else:	# ko pogon ne deluje
		rotate(delta * steer_angle)	
	
	velocity += acceleration * delta
	velocity = move_and_slide(velocity)
	
	if Input.is_action_pressed("space"):
		transform.y += Vector2(10,0)
	
func apply_friction(delta):
	
	# če je hitrost res majhna naj se kar ustavi, da ne bo neskončno računal
	if velocity.length() < 5: 
		velocity = Vector2.ZERO
	
	# trenje in upor	
	var friction_force = velocity * friction # linearna rast s hitrostjo
	var drag_force = velocity * velocity.length() * drag # ekspotencialno naraščanje, zato je velocity na kvadrat
	
	# pri nižjih hitrostih je trenje bolj očitno ... počasen štart 
#	if velocity.length() < 100:
#		friction_force *= 5 # do 6.6 še deluje
	
	acceleration += drag_force + friction_force

	
# adaptcija za zavijanje po tirnici 
func calculate_steering(delta):
	
	# lokacija sprednje in zadnje osi
	var rear_axis_position = position - transform.x * axis_distance / 2.0 # sredinska pozicija vozila minus polovica medosne razdalje
	var front_axis_position = position + transform.x * axis_distance / 2.0 # sredinska pozicija vozila plus polovica medosne razdalje
	
	# sprememba lokacije osi ob gibanju (per frame)
	rear_axis_position += velocity * delta	
	front_axis_position += velocity.rotated(steer_angle) * delta
	
	# nova smer je seštevek smeri obeh osi
	var new_heading = (front_axis_position - rear_axis_position).normalized()
	
	# driftanje
#	var traction = traction_slow
#	if velocity.length() > slip_speed: # ko presežemo določeno hitrost začne drset
#		traction = traction_fast
#	if velocity.length() == 0: # ko presežemo določeno hitrost začne drset
#		traction = no_taction
#	print (traction)
	
	if fwd_motion == true: # gremo naprej
		velocity = velocity.linear_interpolate(new_heading * velocity.length(), side_traction) # željeno smer gibanja doseže z zamikom (ker slajda) glede na "traction"
	elif rev_motion == true:
		velocity = velocity.linear_interpolate(-new_heading * velocity.length(), side_traction)
#		velocity = -new_heading * min(velocity.length(), max_speed_reverse) # omejitev hitrosti
	
	rotation = new_heading.angle() # sprite se obrne v smeri
	
#	# dot produkt, da ugotovimo ali se gibamo rikverc ali naprej
#	var d = new_heading.dot(velocity.normalized()) # ugotavljamo ali gre rikverc al naprej
#	if engine_on:
#		if d > 0: # gremo naprej
##			velocity = new_heading * velocity.length() # moč gibanja pomnožimo z smerjo gibanja
#			velocity = velocity.linear_interpolate(new_heading * velocity.length(), traction) # željeno smer gibanja doseže z zamikom (ker slajda) glede na "traction"
#		if d < 0: # gremo v rikverc
#			velocity = -new_heading * min(velocity.length(), max_speed_reverse) # moč gibanja pomnožimo z smerjo
#		rotation = new_heading.angle() # sprite se obrne v smeri

