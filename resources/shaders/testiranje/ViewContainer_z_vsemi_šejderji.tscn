[gd_scene load_steps=25 format=2]

[ext_resource path="res://GameView.gd" type="Script" id=1]
[ext_resource path="res://arena/Arena.tscn" type="PackedScene" id=2]
[ext_resource path="res://_obs/old_shaders/lerimama_dropshadow.tres" type="Shader" id=3]
[ext_resource path="res://resources/shaders/testiranje/Camera2D.gd" type="Script" id=4]
[ext_resource path="res://resources/graphics/light.png" type="Texture" id=5]
[ext_resource path="res://resources/graphics/tile_raketa.png" type="Texture" id=6]
[ext_resource path="res://_obs/old_shaders/dropshadow.gdshader" type="Shader" id=7]
[ext_resource path="res://_obs/tuji resursi/godotea/Godotea.tscn" type="PackedScene" id=8]

[sub_resource type="ViewportTexture" id=11]
viewport_path = NodePath("Viewport")

[sub_resource type="ShaderMaterial" id=10]
shader = ExtResource( 7 )
shader_param/radius = 14.0
shader_param/offset = Vector2( 2, 5 )
shader_param/modulate = Color( 0.439216, 0.00784314, 0.219608, 1 )
shader_param/background_color = Color( 0, 0, 0, 1 )
shader_param/shadow_color = Color( 0.878431, 0.878431, 0.921569, 1 )
shader_param/offset_in_pixels = Vector2( 5, 5 )

[sub_resource type="Shader" id=13]
code = "shader_type canvas_item;
//render_mode blend_mix;

uniform float radius = 5.0;
uniform vec4 modulate: hint_color;

void fragment() {
	vec2 ps = TEXTURE_PIXEL_SIZE;

	vec4 shadow = texture(TEXTURE, UV + vec2(-radius, -radius) * ps);

	shadow += texture(TEXTURE, UV + vec2(-radius, 0.0) * ps);
	shadow += texture(TEXTURE, UV + vec2(-radius, radius) * ps);
	shadow += texture(TEXTURE, UV + vec2(0.0, -radius) * ps);
	shadow += texture(TEXTURE, UV + vec2(0.0, radius) * ps);
	shadow += texture(TEXTURE, UV + vec2(radius, -radius) * ps);
	shadow += texture(TEXTURE, UV + vec2(radius, 0.0) * ps);
	shadow += texture(TEXTURE, UV + vec2(radius, radius) * ps);
	shadow /= 8.0;
	shadow *= modulate;

	vec4 col = texture(TEXTURE, UV);
	COLOR = mix(shadow, col, col.a);
}
"

[sub_resource type="ShaderMaterial" id=14]
shader = SubResource( 13 )
shader_param/radius = 10.0
shader_param/modulate = Color( 1, 0, 0, 1 )

[sub_resource type="ShaderMaterial" id=6]
shader = ExtResource( 3 )
shader_param/max_edge_alpha = 1.0
shader_param/edge_alpha_multiplier = 1.0
shader_param/edge_color = Color( 0.294118, 1, 0.635294, 1 )
shader_param/offset_x = -0.01
shader_param/offset_y = -0.01

[sub_resource type="Shader" id=15]
code = "shader_type canvas_item;
render_mode unshaded;

uniform float color_outline_scale = 2.0; // Size of color outlines
uniform float edge_threshold : hint_range(0,1) = 0.04; // General threshold for values to be considered as edges
uniform float max_edge_alpha : hint_range(0,1) = 0.8; // Max edge alpha, lower values means edges blend more with background
uniform float edge_alpha_multiplier = 3.0; // General multiplier for edge alpha value, higher values mean harder edges

uniform vec4 edge_color : hint_color = vec4(0,0,0,1); // Outlines color
uniform sampler2D bgTex : hint_albedo; // BG texture

uniform bool color_use_laplace = false; // Sets color edges to use the laplace operator instead of sobel
uniform bool use_bg_texture = false; // Sets shader to use render the BG behind the edges

void fragment() {
	float halfScaleFloor_c = floor(color_outline_scale * 0.5);
	float halfScaleCeil_c = ceil(color_outline_scale * 0.5);
	vec2 texelSize = SCREEN_PIXEL_SIZE;
	
	vec2 bottomLeftUV_c = SCREEN_UV - vec2(texelSize.x, texelSize.y) * halfScaleFloor_c;
	vec2 topRightUV_c = SCREEN_UV + vec2(texelSize.x, texelSize.y) * halfScaleCeil_c;
	vec2 topUV_c = SCREEN_UV + vec2(0.0, texelSize.y * halfScaleCeil_c);
	vec2 bottomUV_c = SCREEN_UV + vec2(0.0, -texelSize.y * halfScaleFloor_c);
	vec2 rightUV_c = SCREEN_UV + vec2(texelSize.x * halfScaleCeil_c, 0.0);
	vec2 leftUV_c = SCREEN_UV + vec2(-texelSize.x * halfScaleFloor_c, 0.0);
	vec2 bottomRightUV_c = SCREEN_UV + vec2(texelSize.x * halfScaleCeil_c, -texelSize.y * halfScaleFloor_c);
	vec2 topLeftUV_c = SCREEN_UV + vec2(-texelSize.x * halfScaleFloor_c, texelSize.y * halfScaleCeil_c);
	vec2 centerUV_c = SCREEN_UV;
	
	vec4 n0 = texture(TEXTURE, topLeftUV_c);
	vec4 n1 = texture(TEXTURE, topUV_c);
	vec4 n2 = texture(TEXTURE, topRightUV_c);
	vec4 n3 = texture(TEXTURE, leftUV_c);
	vec4 n4 = texture(TEXTURE, centerUV_c);
	vec4 n5 = texture(TEXTURE, rightUV_c);
	vec4 n6 = texture(TEXTURE, bottomLeftUV_c);
	vec4 n7 = texture(TEXTURE, bottomUV_c);
	vec4 n8 = texture(TEXTURE, bottomRightUV_c);


	float color_edge;
	
	if (color_use_laplace) {
		vec4 laplace_edge = (8.0 * n4 - (n0+n1+n2+n3+n5+n6+n7+n8));
		color_edge = laplace_edge.r;
		color_edge += laplace_edge.g;
    	color_edge +=  laplace_edge.b;
    	color_edge /= 3.0;
	}
	else {
		vec4 sobel_edge_h = (n2 + (2.0*n5) + n8 - (n0 + (2.0*n3) + n6)) / 4.0;
		vec4 sobel_edge_v = (n0 + (2.0*n1) + n2 - (n6 + (2.0*n7) + n8)) / 4.0;
		vec4 sobel = sqrt((sobel_edge_h * sobel_edge_h) + (sobel_edge_v * sobel_edge_v));
		color_edge = sobel.r;
		color_edge += sobel.g;
		color_edge +=  sobel.b;
		color_edge /= 3.0;
	}
	
	float edgeVal = color_edge;
	
	if (edgeVal > edge_threshold) {
		if (use_bg_texture) {
			COLOR = edge_color.rgba * texture(bgTex, SCREEN_UV).rgba;
		}
		else {
			float edge_alpha = min(max_edge_alpha,edgeVal * edge_alpha_multiplier);
			COLOR = (edge_alpha * edge_color.rgba) + ((1.0-edge_alpha) * texture(TEXTURE, SCREEN_UV).rgba);
		}
		
	}
	else {
		if (use_bg_texture) {
			COLOR = texture(bgTex, SCREEN_UV).rgba;
		}
		else {
			COLOR = texture(TEXTURE, SCREEN_UV).rgba;
		}
	}
}"

[sub_resource type="ShaderMaterial" id=16]
shader = SubResource( 15 )
shader_param/color_outline_scale = 7.0
shader_param/edge_threshold = 0.0
shader_param/max_edge_alpha = 0.8
shader_param/edge_alpha_multiplier = 100.0
shader_param/edge_color = Color( 0, 0, 0, 1 )
shader_param/color_use_laplace = false
shader_param/use_bg_texture = false

[sub_resource type="Shader" id=17]
code = "shader_type canvas_item;

uniform sampler2D u_texture;
uniform vec2 u_pixel_offset;
uniform float u_shadow_offset;
uniform vec2 gl_Position;

void vertex() {
    VERTEX.xy += u_pixel_offset;
//    gl_Position = PROJECTION_MATRIX * MODEL_VIEW_MATRIX * vec4(VERTEX, 1.0);
}

void fragment() {
    vec4 color = vec4(0, 0, 0, 1);
    color.rgb = color.rgb * (1.0 - color.r);
}"

[sub_resource type="ShaderMaterial" id=18]
resource_local_to_scene = true
shader = SubResource( 17 )
shader_param/u_pixel_offset = Vector2( 0.063, 0.063 )
shader_param/u_shadow_offset = null
shader_param/gl_Position = null
shader_param/u_texture = ExtResource( 6 )

[sub_resource type="CameraTexture" id=19]

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;
uniform sampler2D Colormap : hint_albedo;

void fragment() {
// Get the fragment location
	vec3 location = vec3(UV, 0.0);

// Get the colors from the image at specified location
	vec3 colorIn;
	float alphaIn;
	{
		vec4 TEXTURE_tex_read = texture(TEXTURE, location.xy);
		colorIn = TEXTURE_tex_read.rgb;
		alphaIn = TEXTURE_tex_read.a;
	}

// get the greyscale value through the highest of r, g, and b
	float grey;
	{
		vec3 c = colorIn;
		float max1 = max(c.r, c.g);
		float max2 = max(max1, c.b);
		grey = max2;
	}

// Read the colormap and use the greyscale value to map in the new color.
	vec3 colorOut;
	float alphaOut;
	{
		vec4 n_tex_read = texture(Colormap, vec2(grey, 0.0));
		colorOut = n_tex_read.rgb;
		alphaOut = n_tex_read.a;
	}

// Profit.
	COLOR.rgb = colorOut;
	COLOR.a = alphaIn;

}"

[sub_resource type="Gradient" id=3]
offsets = PoolRealArray( 0, 0.381423, 0.648221, 1 )
colors = PoolColorArray( 0, 0, 0, 1, 0.291824, 0.917969, 0.139847, 1, 0.797585, 0.797585, 0.797585, 1, 1, 0.0078125, 0.0078125, 1 )

[sub_resource type="GradientTexture" id=8]
gradient = SubResource( 3 )

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 5 )
shader_param/Colormap = SubResource( 8 )

[sub_resource type="Shader" id=12]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float outLineSize  = 0.05;
//uniform vec4  outLineColor = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 outLineColor : hint_color;

varying vec2 o;
varying vec2 f;
uniform int intensity = 3; // velikost roba

void vertex()
{
	//Expands the vertexes so we have space to draw the outline if we were on the edge.
	o = VERTEX;
	vec2 uv = (UV - 0.5);
	VERTEX += uv * float(intensity);
	f = VERTEX;
}


void fragment()
{
    vec4 tcol = texture(TEXTURE, UV);
    
    if (tcol.a == 0.0)
    {
        if (texture(TEXTURE, UV + vec2(0.0,          outLineSize)).a  != 0.0 ||
//            texture(TEXTURE, UV + vec2(0.0,         -outLineSize)).a  != 0.0 ||
//            texture(TEXTURE, UV + vec2(outLineSize,  0.0)).a          != 0.0 ||
//            texture(TEXTURE, UV + vec2(-outLineSize, 0.0)).a          != 0.0 ||
//            texture(TEXTURE, UV + vec2(-outLineSize, outLineSize)).a  != 0.0 ||
//            texture(TEXTURE, UV + vec2(-outLineSize, -outLineSize)).a != 0.0 ||
//            texture(TEXTURE, UV + vec2(outLineSize,  outLineSize)).a  != 0.0 ||
            texture(TEXTURE, UV + vec2(outLineSize,  -outLineSize)).a != 0.0) 
            tcol = outLineColor;
    }
    
    COLOR = tcol;
}"

[sub_resource type="ShaderMaterial" id=7]
shader = SubResource( 12 )
shader_param/outLineSize = 0.05
shader_param/outLineColor = Color( 1, 0.00392157, 0.00392157, 1 )
shader_param/intensity = 3

[node name="ViewContainer" type="ViewportContainer"]
margin_right = 640.0
margin_bottom = 360.0
rect_min_size = Vector2( 640, 360 )
size_flags_horizontal = 0
size_flags_vertical = 0
stretch = true
script = ExtResource( 1 )

[node name="ParallaxBackground" type="ParallaxBackground" parent="."]
follow_viewport_scale = 24.392

[node name="ParallaxLayer" type="ParallaxLayer" parent="ParallaxBackground"]

[node name="Viewport Copy" type="Sprite" parent="ParallaxBackground/ParallaxLayer"]
position = Vector2( 672, 0 )
z_index = 4
texture = SubResource( 11 )
centered = false
flip_v = true

[node name="ParallaxLayer2" type="ParallaxLayer" parent="ParallaxBackground"]
motion_offset = Vector2( 4, 4 )

[node name="ViewportShader_iz_outlinerja2" type="Sprite" parent="ParallaxBackground/ParallaxLayer2"]
material = SubResource( 10 )
position = Vector2( 665, 3 )
z_index = 4
texture = SubResource( 11 )
centered = false
flip_v = true

[node name="Camera2D" type="Camera2D" parent="."]
position = Vector2( 734, -3 )
anchor_mode = 0
current = true
script = ExtResource( 4 )

[node name="_Godetka" parent="." instance=ExtResource( 8 )]
visible = false
position = Vector2( 948, 364 )

[node name="ViewportShader_iz_outlinerja" type="Sprite" parent="."]
visible = false
material = SubResource( 10 )
z_index = 4
texture = SubResource( 11 )
centered = false
flip_v = true

[node name="ViewportShader_iz_dropshadow roba" type="Sprite" parent="."]
visible = false
material = SubResource( 14 )
z_index = 4
texture = SubResource( 11 )
centered = false
flip_v = true

[node name="ViewportShader" type="Sprite" parent="."]
material = SubResource( 6 )
position = Vector2( 1058, 183 )
texture = SubResource( 11 )
flip_v = true

[node name="ViewportShader - orig" type="Sprite" parent="."]
visible = false
material = SubResource( 16 )
position = Vector2( 1058, 183 )
texture = SubResource( 11 )
flip_v = true

[node name="ViewportShader - chat" type="Sprite" parent="."]
material = SubResource( 18 )
position = Vector2( 334, 184 )
texture = ExtResource( 6 )

[node name="ViewportShader - over" type="Sprite" parent="."]
visible = false
material = SubResource( 18 )
position = Vector2( 321, 182 )
texture = SubResource( 19 )

[node name="Viewport" type="Viewport" parent="."]
size = Vector2( 640, 360 )
handle_input_locally = false
debug_draw = 2
render_target_update_mode = 3

[node name="Arena" parent="Viewport" instance=ExtResource( 2 )]
material = SubResource( 2 )

[node name="Obsticle" type="Area2D" parent="Viewport"]
modulate = Color( 0, 0, 0, 1 )
position = Vector2( 200, 200 )
scale = Vector2( 3, 3 )
__meta__ = {
"_edit_group_": true
}

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="Viewport/Obsticle"]
visible = false
polygon = PoolVector2Array( -18, -19, -8, 20, 19, 15, 21, -18 )

[node name="CollisionPolygon2D2" type="Polygon2D" parent="Viewport/Obsticle"]
color = Color( 0.592157, 1, 0, 1 )
polygon = PoolVector2Array( -18, -19, -8, 20, 19, 15, 21, -18 )

[node name="ViewportShader_ne dela glih" type="Sprite" parent="."]
visible = false
material = SubResource( 7 )
position = Vector2( 320, 179 )
texture = SubResource( 11 )
flip_v = true

[node name="Light2D" type="Light2D" parent="."]
visible = false
position = Vector2( 465.75, 203.75 )
scale = Vector2( 1.38112, 1.4021 )
z_index = -6
z_as_relative = false
texture = ExtResource( 5 )
