[gd_scene load_steps=15 format=2]

[ext_resource path="res://resources/graphics/bolt.png" type="Texture" id=1]
[ext_resource path="res://resources/graphics/weapon_bullet.png" type="Texture" id=2]
[ext_resource path="res://player/Player.gd" type="Script" id=6]

[sub_resource type="CircleShape2D" id=30]
radius = 12.0

[sub_resource type="Shader" id=111]
code = "shader_type canvas_item;
render_mode blend_add;


uniform float intensity = 0.5f;
uniform float layers = 5.0f;
uniform float speed = 4.0f;

uniform vec4 color_to_cut = vec4(1.0, 1.0, 1.0, 1.0);
//uniform vec4 color_to_cut: hint_color = vec4(1.0, 1.0, 1.0, 1.0);
uniform vec4 color_to_add: hint_color = vec4(1.0, 0.0, 0.0, 1.0);

//uniform sampler2D svetlost: hint_white;

float gradient(vec2 uv){
	
	// čekiramo razdaljo od centra sprajta do koordinate trenutne pike
	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f))); // nastane krog, ker je razdalja od centra konstantna
}

vec4 colorize (float col, float a) {
	
	vec4 pallete;
	
//	// grayscale
	pallete = vec4(col, col, col, a);  // col je podan red kanal
	
//	// monochrome
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col >= 0.0f); // en kanal setamo, da je ves čas 0, razen ko je poln (? ... full je white?)
//
////
//////	// darken vse kar ni belo
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.g = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.b = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
	
//	// raznobarvno
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3 && col < 0.7 || col > 0.9); 
//	pallete.g = float(col > 0.7); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.5 || col > 0.9); // višja vrednost od dveh ...?
	
//	// ta bi bila za ščit
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.g = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.3); // višja vrednost od dveh ...?
	
////	// by lerimama
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.0f); // en kanal setamo, da je ves čas 0, razen ko je poln (? ... full je white?)
//	pallete.rb = vec2(1.0);
	
	return pallete; // ta vrednost gre v barvo
}


void fragment(){
	vec4 bg = texture(TEXTURE, UV - TIME/speed); // tukjaj je že notri premikanje
	
	COLOR = bg;
	COLOR.r = gradient(UV); // red kanal damo rezultat gradient funkcije 
	
	// množimo oz. združimo red channel z intensity in teksturo noisa
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10.0f, 0.0f, 1.0f); // klempam, da ne gre pod nulo in ne nad ena (ker je to barvni kanal)
	// current color * intensity
	COLOR.r = floor(COLOR.r * layers) / layers; // floor ... zaokrožimo zato, ker ker je št. lejerja zmeraj cela številka ... delimo z lejerji, da je vsak lejer na 0.2 vrednosti
	COLOR.a = float(COLOR.r > 0.0f); // ?

	vec4 color = colorize(COLOR.r, COLOR.a); // igranje z barvami
	
	if (color == color_to_cut){
		color.a = 0.0;
	}
	else {
		// invert colos
		color.rgb = vec3(1.0,1.0,1.0) - color.rgb ;
		
//		COLOR.rgb = color.rgb;
	}
	
	
	vec4 color2 = vec4 (1.0);
	
	
//	barva je transparenta
	if (color.a == 0.0){
		
	}
//	barva je polna
	else{
		color2 = color * color_to_add;
//		color2.rgb = vec3(1,1,1) - color.rgb; // invert colors
		COLOR.rgb = color2.rgb;
		COLOR.a = color2.a;
	}
	
	
	
}"

[sub_resource type="ShaderMaterial" id=28]
shader = SubResource( 111 )
shader_param/intensity = 1.0
shader_param/layers = 3.0
shader_param/speed = 8.0
shader_param/color_to_cut = Plane( 1, 1, 1, 1 )
shader_param/color_to_add = Color( 1, 1, 1, 1 )

[sub_resource type="OpenSimplexNoise" id=25]
seed = 4
period = 5.8
persistence = 0.857
lacunarity = 0.39

[sub_resource type="NoiseTexture" id=109]
width = 48
height = 48
seamless = true
bump_strength = 13.9
noise = SubResource( 25 )

[sub_resource type="Shader" id=117]
code = "shader_type canvas_item;

uniform sampler2D noise_texture;
uniform float noise_factor=0.2;
uniform float speed=0.2;

void fragment() {
	//We read noise texture with TIME offset
	float noise_val = texture(noise_texture, mod(UV + speed * TIME, vec2(1.0 ,1.0))).r;
	//UV is altered with noise value
	COLOR = texture(TEXTURE, mod(UV + noise_factor * noise_val, vec2(1.0, 1.0)));
}"

[sub_resource type="OpenSimplexNoise" id=115]
seed = 1
octaves = 4
period = 90.5
persistence = 0.354
lacunarity = 3.58

[sub_resource type="NoiseTexture" id=116]
width = 9
height = 9
seamless = true
noise = SubResource( 115 )

[sub_resource type="ShaderMaterial" id=114]
shader = SubResource( 117 )
shader_param/noise_factor = 2.0
shader_param/speed = 0.5
shader_param/noise_texture = SubResource( 116 )

[sub_resource type="Animation" id=112]
resource_name = "shield_on"
length = 1.4
tracks/0/type = "value"
tracks/0/path = NodePath(".:scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.8, 1.4 ),
"transitions": PoolRealArray( 0.5, -2, -2 ),
"update": 0,
"values": [ Vector2( 0, 0 ), Vector2( 0.6, 0.6 ), Vector2( 0.5, 0.5 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.5, 1.4 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 0.313726 ) ]
}

[sub_resource type="Animation" id=110]
resource_name = "shielding"
tracks/0/type = "value"
tracks/0/path = NodePath(".:scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5, 1 ),
"transitions": PoolRealArray( -2, -2, -2 ),
"update": 0,
"values": [ Vector2( 0.5, 0.5 ), Vector2( 0.6, 0.6 ), Vector2( 0.5, 0.5 ) ]
}

[node name="Player" type="KinematicBody2D"]
modulate = Color( 1, 1, 0.996078, 1 )
script = ExtResource( 6 )
max_speed_reverse = 32

[node name="BoltCollision" type="CollisionPolygon2D" parent="."]
position = Vector2( 0, 0.5 )
rotation = 1.57079
polygon = PoolVector2Array( -1.99997, -4.00001, -5, -3.13719e-05, -5.00001, 1.99997, -4.00002, 2.99997, 2.99998, 3.00002, 3.99999, 2.00003, 4, 2.50975e-05, 1.00003, -3.99999 )

[node name="ShieldCollision" type="CollisionShape2D" parent="."]
shape = SubResource( 30 )

[node name="Shield" type="Sprite" parent="."]
modulate = Color( 1, 1, 1, 0.27451 )
material = SubResource( 28 )
scale = Vector2( 1e-05, 1e-05 )
texture = SubResource( 109 )

[node name="Bolt" type="Sprite" parent="."]
material = SubResource( 114 )
position = Vector2( 0, 0.5 )
rotation = 1.5708
texture = ExtResource( 1 )

[node name="FrontEnginePositionL" type="Position2D" parent="Bolt"]
position = Vector2( -4.00001, -1.99999 )
rotation = -1.5708
__meta__ = {
"_gizmo_extents_": 2.0
}

[node name="FrontEnginePositionR" type="Position2D" parent="Bolt"]
position = Vector2( 2.99999, -2.00001 )
rotation = -1.5708
__meta__ = {
"_gizmo_extents_": 2.0
}

[node name="TrailPosition" type="Position2D" parent="Bolt"]
visible = false
position = Vector2( -0.499993, 2 )
rotation = -1.5708
__meta__ = {
"_gizmo_extents_": 2.0
}

[node name="RearEnginePosition" type="Position2D" parent="Bolt"]
position = Vector2( -0.499986, 4 )
rotation = -1.5708
__meta__ = {
"_gizmo_extents_": 2.0
}

[node name="WeaponBullet2" type="Sprite" parent="Bolt/RearEnginePosition"]
visible = false
modulate = Color( 0, 0.811765, 1, 1 )
position = Vector2( 0.5, 0.5 )
texture = ExtResource( 2 )

[node name="GunPosition" type="Position2D" parent="Bolt"]
position = Vector2( -0.500018, -5 )
rotation = -1.5708
__meta__ = {
"_gizmo_extents_": 2.0
}

[node name="WeaponBullet" type="Sprite" parent="Bolt/GunPosition"]
visible = false
modulate = Color( 1, 0, 0, 1 )
position = Vector2( 0.5, 0.5 )
texture = ExtResource( 2 )

[node name="PlayerArea" type="Area2D" parent="."]
visible = false

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="PlayerArea"]
position = Vector2( 0, 0.5 )
rotation = 1.57079
polygon = PoolVector2Array( -1.99997, -4.00001, -5, -3.13719e-05, -5.00001, 1.99997, -4.00002, 2.99997, 2.99998, 3.00002, 3.99999, 2.00003, 4, 2.50975e-05, 1.00003, -3.99999 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
root_node = NodePath("../Shield")
anims/shield_on = SubResource( 112 )
anims/shielding = SubResource( 110 )

[connection signal="area_exited" from="PlayerArea" to="." method="_on_PlayerArea_area_exited"]
[connection signal="body_exited" from="PlayerArea" to="." method="_on_PlayerArea_body_exited"]
[connection signal="animation_finished" from="AnimationPlayer" to="." method="_on_AnimationPlayer_animation_finished"]
