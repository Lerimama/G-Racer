[gd_scene load_steps=9 format=2]

[ext_resource path="res://resources/graphics/bolt.png" type="Texture" id=1]
[ext_resource path="res://player/Player.gd" type="Script" id=6]

[sub_resource type="Shader" id=27]
code = "shader_type canvas_item;
render_mode blend_mix ;

uniform float intensity = 0.5f;
uniform float layers = 5.0f;
uniform float speed = 4.0f;

uniform vec4 color_to_cut = vec4(1.0, 1.0, 1.0, 1.0);


float gradient(vec2 uv){
	
	// čekiramo razdaljo od centra sprajta do koordinate trenutne pike
	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f))); // nastane krog, ker je razdalja od centra konstantna
}

vec4 colorize (float col, float a) {
	
	vec4 pallete;
	
//	// grayscale
//	pallete = vec4(col, col, col, a);  // col je podan red kanal

//	// monochrome
	pallete = vec4(col, col, col, a);  // col je podan red kanal
	pallete.g = float(col >= 0.0f); // en kanal setamo, da je ves čas 0, razen ko je poln (? ... full je white?)
	
//	// darken vse kar ni belo
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.g = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.b = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
	
//	// raznobarvno
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3 && col < 0.7 || col > 0.9); 
//	pallete.g = float(col > 0.7); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.5 || col > 0.9); // višja vrednost od dveh ...?
	
//	// ta bi bila za ščit
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.g = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.3); // višja vrednost od dveh ...?
	
	return pallete; // ta vrednost gre v barvo
}


void fragment(){
	vec4 bg = texture(TEXTURE, UV - TIME/speed); // tukjaj je že notri premikanje
	
	COLOR = bg;
	COLOR.r = gradient(UV); // red kanal damo rezultat gradient funkcije 
	
	// množimo oz. združimo red channel z intensity in teksturo noisa
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10.0f, 0.0f, 1.0f); // klempam, da ne gre pod nulo in ne nad ena (ker je to barvni kanal)
	//	current color * intensity
	COLOR.r = floor(COLOR.r * layers) / layers; // floor ... zaokrožimo zato, ker ker je št. lejerja zmeraj cela številka ... delimo z lejerji, da je vsak lejer na 0.2 vrednosti
	COLOR.a = float(COLOR.r > 0.0f); // ?

	COLOR = colorize(COLOR.r, COLOR.a); // igranje z barvami
	
		
	if (COLOR == color_to_cut){
		COLOR.a = 0.0;
		}
		
	
}"

[sub_resource type="ShaderMaterial" id=28]
shader = SubResource( 27 )
shader_param/intensity = 1.5
shader_param/layers = 4.0
shader_param/speed = 2.0
shader_param/color_to_cut = Plane( 1, 1, 1, 1 )

[sub_resource type="OpenSimplexNoise" id=25]
seed = 2
period = 8.6
persistence = 0.084
lacunarity = 1.6

[sub_resource type="NoiseTexture" id=7]
width = 48
height = 48
seamless = true
noise = SubResource( 25 )

[sub_resource type="CircleShape2D" id=30]
radius = 20.051

[sub_resource type="Animation" id=29]
resource_name = "shield_on"
tracks/0/type = "value"
tracks/0/path = NodePath(".:scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5, 0.8 ),
"transitions": PoolRealArray( 1, 0.435275, -2 ),
"update": 0,
"values": [ Vector2( 0, 0 ), Vector2( 0.7, 0.7 ), Vector2( 0.5, 0.5 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0.2, 0.8 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[node name="Player" type="KinematicBody2D"]
script = ExtResource( 6 )
max_speed_reverse = 32

[node name="RearEnginePosition" type="Position2D" parent="."]
position = Vector2( -3, 0 )
__meta__ = {
"_gizmo_extents_": 2.0
}

[node name="FrontEnginePositionL" type="Position2D" parent="."]
position = Vector2( 2, -3.5 )
__meta__ = {
"_gizmo_extents_": 2.0
}

[node name="FrontEnginePositionR" type="Position2D" parent="."]
position = Vector2( 2, 3.5 )
__meta__ = {
"_gizmo_extents_": 2.0
}

[node name="GunPosition" type="Position2D" parent="."]
position = Vector2( 6, 0 )
__meta__ = {
"_gizmo_extents_": 2.0
}

[node name="TrailPosition" type="Position2D" parent="."]
position = Vector2( -2, 1.49012e-07 )
__meta__ = {
"_gizmo_extents_": 2.0
}

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="."]
position = Vector2( 0, 0.5 )
rotation = 1.57079
polygon = PoolVector2Array( -1.99997, -4.00001, -5, -3.13719e-05, -5.00001, 1.99997, -4.00002, 2.99997, 2.99998, 3.00002, 3.99999, 2.00003, 4, 2.50975e-05, 1.00003, -3.99999 )

[node name="shield" type="Sprite" parent="."]
modulate = Color( 1, 1, 1, 0 )
material = SubResource( 28 )
scale = Vector2( 0.7, 0.7 )
texture = SubResource( 7 )

[node name="Area2D" type="Area2D" parent="shield"]

[node name="CollisionShape2D" type="CollisionShape2D" parent="shield/Area2D"]
shape = SubResource( 30 )
disabled = true

[node name="Bolt" type="Sprite" parent="."]
position = Vector2( 0, 0.5 )
rotation = 1.5708
texture = ExtResource( 1 )

[node name="PlayerArea" type="Area2D" parent="."]
visible = false

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="PlayerArea"]
position = Vector2( -1, 0.5 )
rotation = 1.57079
polygon = PoolVector2Array( -1.99997, -4.00001, -5, -3.13719e-05, -5.00001, 1.99997, -4.00002, 2.99997, 2.99998, 3.00002, 3.99999, 2.00003, 4, 2.50975e-05, 1.00003, -3.99999 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
root_node = NodePath("../shield")
anims/shield_on = SubResource( 29 )

[connection signal="area_exited" from="PlayerArea" to="." method="_on_PlayerArea_area_exited"]
[connection signal="body_exited" from="PlayerArea" to="." method="_on_PlayerArea_body_exited"]
