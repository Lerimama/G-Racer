[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=10306]
code = "shader_type canvas_item;
//render_mode blend_add;

uniform vec2 node_size = vec2(320, 320); // more bit toƒçen, da so pixli pravih dimenzij

// pixelate
uniform bool pixelate;
uniform	float pixel_size_multiplier = 1.0;
uniform	vec2 pixel_offset = vec2(0.0, 0.0);
// animate
uniform float speed_x : hint_range (-10, 10) = 0;
uniform float speed_y : hint_range (-10, 10) = 0;
uniform float speed_scale : hint_range (0, 1, 0.01)= 0.1; // da ni prehitro
// shading
uniform bool shade_texture;
uniform sampler2D shade_texture_ramp;
uniform bool shade_all_colors;
uniform sampler2D shade_color_ramp;


void fragment() {

	COLOR = texture(TEXTURE, UV);
	vec4 original_texture = texture(TEXTURE, UV);
	
	// pixelate and animate
	vec2 noise_uvs;
	if (pixelate == true) {
		float xFactor = node_size.x / pixel_size_multiplier;
		float yFactor = node_size.y / pixel_size_multiplier;
		float grid_uv_x = round(UV.x * xFactor + pixel_offset.x) / xFactor + TIME * speed_x * speed_scale;
		float grid_uv_y = round(UV.y * yFactor + pixel_offset.y) / yFactor + TIME * speed_y * speed_scale;
		noise_uvs = vec2(grid_uv_x, grid_uv_y);
	} else {
	// animate
		noise_uvs.x = UV.x + TIME * speed_x * speed_scale;
		noise_uvs.y = UV.y + TIME * speed_y * speed_scale;			
	}
		
	vec4 noise_texture = texture(TEXTURE, noise_uvs);			
	vec3 noise_color = noise_texture.rgb;
	float noise_alpha = noise_texture.a; 
	
	// shade noise 
	if (shade_texture == true){
		float color_value;
		// get the greyscale value through the highest of r, g, and b
		{
			vec3 c = noise_color.rgb;
			float max1 = max(c.r, c.g);
			float max2 = max(max1, c.b);
			color_value = max2;
		}
		vec3 noise_color_out; 
		float noise_alpha_out;
		// Read the colormap and use the greyscale value to map in the new color.
		{
			vec4 n_tex_read = texture(shade_texture_ramp, vec2(color_value, 0.0));
			noise_color_out = n_tex_read.rgb;
			noise_alpha_out = n_tex_read.a;
		}
		COLOR.rgb = noise_color_out;
		COLOR.a = noise_alpha_out; //alphaIn;
	}
	
	// post all color shading
	if (shade_all_colors == true){
		vec3 color_in;
		float alpha_in;
		{
			vec4 TEXTURE_tex_read = COLOR;
			color_in = TEXTURE_tex_read.rgb;
			alpha_in = TEXTURE_tex_read.a;
		}
		// get the greyscale value through the highest of r, g, and b
		float color_grey_value; 
		{
			vec3 c = color_in.rgb;
			float max1 = max(c.r, c.g);
			float max2 = max(max1, c.b);
			color_grey_value = max2;
		}
		// Read the colormap and use the greyscale value to map in the new color.
		vec3 color_out;
		float alpha_out;
		{
			vec4 n_tex_read = texture(shade_color_ramp, vec2(color_grey_value, 0.0));
			color_out = n_tex_read.rgb;
			alpha_out = n_tex_read.a;
		}
		// apliciraj barvo
		COLOR.rgb = color_out;
		COLOR.a = alpha_out;
	}
}"

[resource]
shader = SubResource( 10306 )
shader_param/node_size = Vector2( 2736, 1904 )
shader_param/pixelate = true
shader_param/pixel_size_multiplier = 2.0
shader_param/pixel_offset = Vector2( -0.05, -0.1 )
shader_param/speed_x = 0.0
shader_param/speed_y = 2.268
shader_param/speed_scale = 0.0
shader_param/shade_texture = null
shader_param/shade_all_colors = false
