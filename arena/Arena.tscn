[gd_scene load_steps=374 format=2]

[ext_resource path="res://arena/Arena.gd" type="Script" id=1]
[ext_resource path="res://player/Player.tscn" type="PackedScene" id=2]
[ext_resource path="res://resources/shaders/tilemap_color_manipulator.gdshader" type="Shader" id=3]
[ext_resource path="res://resources/shaders/screen_color_manipulator.gdshader" type="Shader" id=4]
[ext_resource path="res://resources/graphics/light.png" type="Texture" id=5]
[ext_resource path="res://resources/graphics/_zaloga/nov_poskus.png" type="Texture" id=6]
[ext_resource path="res://resources/graphics/bolt.png" type="Texture" id=7]
[ext_resource path="res://arena/BodiesLayer.gd" type="Script" id=8]
[ext_resource path="res://arena/Effects.gd" type="Script" id=9]
[ext_resource path="res://resources/graphics/tileset_arena.png" type="Texture" id=10]
[ext_resource path="res://gameview/JuicyCamera.tscn" type="PackedScene" id=11]
[ext_resource path="res://resources/graphics/tileset_arena_old.png" type="Texture" id=12]
[ext_resource path="res://arena/FejkPlejer.gd" type="Script" id=13]
[ext_resource path="res://resources/shaders/duplicirano in shranjeno/texture_dropshadow_manipulator_v2.gdshader" type="Shader" id=14]
[ext_resource path="res://LevelLayer Z3.gd" type="Script" id=15]
[ext_resource path="res://BackgroundLayer Z0.gd" type="Script" id=17]
[ext_resource path="res://EffectsLayer Z1.gd" type="Script" id=18]

[sub_resource type="Shader" id=441]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform sampler2D noise_texture;
uniform float speed1 = 0.02;
uniform float speed2 = 0.05;
uniform float threshold_min = 0.5;
uniform float threshold_max = 0.58;

uniform float noise_resolution_x = 64.0;
uniform float noise_resolution_y = 360.0;


float random (vec2 st) {
    return fract(sin(dot(st.xy,
                         vec2(12.9898, 78.233))) * 43758.5453123);
}

void fragment() {
	
	vec4 col0 = texture(noise_texture, mod(UV + TIME * speed1, vec2(1, 1)));
	vec4 col1 = texture(noise_texture, mod(UV + TIME * speed2, vec2(1, 1)));
	
	//we apply red channel as alpha
	col0.a = col0.r;
	col1.a = col1.r;
	
//	//step function return 0 if last parameter is < threshold and 1 otherwise
//	//here we want 1 if value between threshold_min and threshold_max
//	//same result as following code:
//	float col = (col0. r + col1.r) / 2.0;
//	if(col > threshold_min && col < threshold_max){
//		COLOR = vec4(1.0, 1.0, 1.0, 1.0);
//	} else {
//		COLOR = vec4(1.0, 1.0, 1.0, 0.0);
//	}
	
	
	vec4 water_color;
	vec4 pixelated_color;
	
	//here we normalize col0 + col1 (/ 2.0) to have result between [0,1]
	water_color = step(threshold_min, (col0 + col1) / 2.0) * (1.0 - step(threshold_max, (col0 + col1) / 2.0));
	
	
//	//as UV is between [0;1] we multiply with noise_resolution factor to have noise_resolution differents values
//	float val = random(floor(UV * noise_resolution_x));
//	pixelated_color = vec4(val,val,val,1.0);
//	COLOR =  pixelated_color + water_color;
	
	COLOR = water_color;
}"

[sub_resource type="OpenSimplexNoise" id=115]
seed = 2
period = 32.0

[sub_resource type="NoiseTexture" id=116]
width = 640
height = 320
seamless = true
noise = SubResource( 115 )

[sub_resource type="ShaderMaterial" id=114]
shader = SubResource( 441 )
shader_param/speed1 = 0.0
shader_param/speed2 = 0.01
shader_param/threshold_min = 0.495
shader_param/threshold_max = 0.533
shader_param/noise_resolution_x = 640.0
shader_param/noise_resolution_y = 360.0
shader_param/noise_texture = SubResource( 116 )

[sub_resource type="Shader" id=87]
code = "shader_type canvas_item;
//render_mode blend_premul_alpha; // nč bolš

//blend_mix - Mix blend mode (alpha is transparency), default.
//blend_add - Additive blend mode.
//blend_sub - Subtractive blend mode.
//blend_mul - Multiplicative blend mode.
//blend_premul_alpha - Pre-multiplied alpha blend mode.
//blend_disabled - Disable blending, values (including alpha) are written as-is.
//unshaded - Result is just albedo. No lighting/shading happens in material.
//light_only - Only draw on light pass
//skip_vertex_transform - VERTEX/NORMAL/etc need to be transformed manually in vertex function.



// šejder v1 - prepoznava 100% transparenco in aplicira novo barvo na te pixle
// šejder v2 - prepoznava tudi cutout barvo, ki jo potem manipulira
// šejder v3 - prepoznava barvo, ki ji mora dodat senco
// šejder v4 - prepoznava različne barve, ki jim dodaj različne sence
// šejder v5 - dodaja sence za prizemljene objekte

//... simple nadgradnja je če dodam več barv za manipulirat ... al pa celo gradient

// barve
uniform vec4 manipulate_color : hint_color = vec4(1.0, 0.0, 0.0, 1.0); // select color to regirster and manipulate
uniform bool manipulate_other_colors = true;
uniform vec4 transparent_to_color : hint_color = vec4(0.0, 0.0, 0.0, 0.0); // apply color to texture with alpha 0.0

// shadow
uniform vec4 shadow_color : hint_color = vec4(0.0, 0.0, 0.0, 1.0);
uniform float shadow_offset_x = 1.0; // smer offseta ... to niso texli ampak pixli
uniform float shadow_offset_y = 1.0; // smer offseta ... to niso texli ampak pixli
uniform float texture_altitude = 5.0; // količina offseta ... višin texture

// dimenzija teksture za uskladitev texlov s pixli (1/texture original size)  
uniform float texture_width = 640.0;
uniform float texture_height = 360.0;



void fragment(){

	// preračun pravge offseta sence ... pixle konvertamo v texle
	vec2 shadow_offset = vec2(shadow_offset_x / texture_width, shadow_offset_y / texture_height);
	vec2 uvs = UV + shadow_offset * texture_altitude;
	
	// poberemo prikaz texture in apliciramo samo offset še predno apliciramo barvo 
	vec4 color = texture(TEXTURE, uvs);

	
	// manipuliramo izbrano barvo
	if (manipulate_other_colors == false){
		
		// če je barva texture enaka izbrani apliciramo efekt
		if (color == manipulate_color){
			color = shadow_color * color.a;
		}
		// druge barve so brez efekta
		else {
			color.a = 0.0; // 100% transparenca
			color = texture(TEXTURE, UV); // original barva in pozicija
		}
	}
	
	// manipuliramo vse razen izbrane barve
	else if (manipulate_other_colors == true){
		
		// če barva texture ni transparenta apliciramo efekt
		if (color.a > 0.0){
			
			// barva enaka izbrani barvi je brez efekta
			if (color == manipulate_color){
				color.a = 0.0;
				color = texture(TEXTURE, UV);
			}
			// aplciramo efekt na vse druge barve
			else {
				color = shadow_color * color.a;
			}
		}
		// barva transparentnega dela tekture
		else {
			color = transparent_to_color;
		}
		
	}
	
	COLOR = color;
}"

[sub_resource type="ShaderMaterial" id=88]
shader = SubResource( 87 )
shader_param/manipulate_color = Color( 1, 0, 0, 1 )
shader_param/manipulate_other_colors = true
shader_param/transparent_to_color = Color( 0, 0, 0, 0 )
shader_param/shadow_color = Color( 0, 0, 0, 0.196078 )
shader_param/shadow_offset_x = 0.0
shader_param/shadow_offset_y = 1.0
shader_param/texture_altitude = 6.0
shader_param/texture_width = 640.0
shader_param/texture_height = 360.0

[sub_resource type="ViewportTexture" id=92]
viewport_path = NodePath("EffectsLayer Z1/Viewport")

[sub_resource type="Shader" id=85]
code = "shader_type canvas_item;
render_mode blend_premul_alpha;

//blen


void fragment(){

	COLOR =  texture(TEXTURE, UV);
}"

[sub_resource type="ShaderMaterial" id=86]
shader = SubResource( 85 )

[sub_resource type="ViewportTexture" id=93]
viewport_path = NodePath("EffectsLayer Z1/Viewport")

[sub_resource type="Animation" id=112]
resource_name = "shield_on"
tracks/0/type = "value"
tracks/0/path = NodePath(".:scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5, 0.8 ),
"transitions": PoolRealArray( 1, 0.435275, -2 ),
"update": 0,
"values": [ Vector2( 0, 0 ), Vector2( 0.7, 0.7 ), Vector2( 0.5, 0.5 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath(".:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0.2, 0.8 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 1, 1, 1, 0 ), Color( 1, 1, 1, 1 ) ]
}

[sub_resource type="Shader" id=444]
code = "shader_type canvas_item;


// KAJ ŠEJDER DELA?
// v prvem koraku naredi senco, jo zamakne ... potem jo izreže, da ne prekriva original barve 
// n-krat se kopira prvi korak, z vsako kopijo se poveča foktor zamika
// senca je tako zmeraj večja (barve se prekrivajo in na čuden način mešajo transparenco)
// po vseh kopiranjih na celotno nastalo senco ponovno apliciramo željeno barvo sence
// končno barvo senčenega objekta ali ozadja lahko poljubno nastavimo
// zaenkrat primeren predvsem za dvobarvno teksturo

// UPGRADE
// - multi barve
// - automatske mere ekrana
// - usklajevanje št. korakov s svetlostjo teksture

uniform vec4 shadow_casting_color: hint_color = vec4(1.0, 0.0, 0.0, 1.0); // senčena barva
uniform vec4 shadow_color: hint_color = vec4(0.0, 0.0, 0.0, 0.5);

uniform bool switch_cast_and_receive = false;
uniform vec4 new_casting_color: hint_color = vec4(1.0, 1.0, 0.0, 1.0);
//uniform vec4 shadow_receiving_color: hint_color = vec4(1.0, 1.0, 0.0, 1.0); // barva, ki sprejema senco ... trenutno ni v uporabi
uniform vec4 new_receiving_color: hint_color = vec4(1.0, 0.5, 0.5, 0.5);

uniform float shadow_rotation_deg: hint_range(0.0, 360.0) = 180; // rotacija v stopinjah (dol)
uniform float shadow_distance_px: hint_range(0.0, 640.0, 1.0) = 0.0; // imitacija višine z odmikom celotne sence od senčenega objekta

uniform int offset_steps = 5; // število korakov ... imitira dolžino sence
uniform float step_offset_px: hint_range(0.0, 1.0) = 1.0; // offset per step v pixlih

//uniform vec2 screen_size = vec2(640.0, 360.0);


void fragment(){
	
//	vec4 new_shadow_receiving_color = vec4(0.0, 0.0, 0.0, 0.0);
	vec2 screen_size = vec2(640.0, 360.0);

	vec4 original_color = texture(SCREEN_TEXTURE, SCREEN_UV); // textura pred editiranjem
	vec4 step_offset_color; // zamik teksture na korak
	vec4 offset_color; // barva vsek korakov skupaj
	
	float shadow_rotation_rad = radians(shadow_rotation_deg);
	float step_pixel_offset_y = cos(shadow_rotation_rad) * step_offset_px;
	float step_pixel_offset_x = sin(shadow_rotation_rad) * step_offset_px;
	
	float step_count = 0.0;
	
	// multiplikacija sence
	for (int i = 0; i < offset_steps; i++) {
		
		step_count += 1.0; // štejemo korake ... pusti na ena
		
		// zamik texture v smeri (preračun texlov v pixle) ... z vsakim korakom se prišteje zamik-na-korak
		vec2 uvs = SCREEN_UV + vec2(step_pixel_offset_x / screen_size.x, step_pixel_offset_y / screen_size.y) * -1.0 * step_count; 
		
		// opredelimo barvo zamaknjene tekstue in jo premaknemo še za željeno oddaljenost teksture (preračunano v pixle)
		step_offset_color = texture(SCREEN_TEXTURE, uvs + vec2(step_pixel_offset_x * shadow_distance_px / screen_size.x, step_pixel_offset_y * shadow_distance_px / screen_size.y) * -1.0); 
		
		// ne switchamo
		if (switch_cast_and_receive != true){
			// kjer je zamaknjena senčena barva, damo barvo sence
			if (step_offset_color == shadow_casting_color){
				step_offset_color = vec4(0.0, 0.0, 0.0, 1.0);
			}
			else {
				step_offset_color.a = 0.0;
			}
		}
		// switchamo ... samo obrnemo pogoj
		else if (switch_cast_and_receive == true){
			if (step_offset_color != shadow_casting_color){
				step_offset_color = vec4(0.0, 0.0, 0.0, 1.0);
			}
			else {
				step_offset_color.a = 0.0;
			}	
		}
		
		// dodajanje teksture korakov v skupno teksturo
		offset_color += step_offset_color; // barve se čudno mešajo ... zato dodam pravo barvo sence kasneje
	}
	
	
	// ne switchamo
	if (switch_cast_and_receive != true){
		// kjer je original barva enaka senčeni barvi, damo original barvo 
		if (original_color == shadow_casting_color){
			COLOR =  new_casting_color; // ... nima vpliva
			}
		// kjer skupna zamaknjena tekstura NI transparentna, damo željeno barvo sence 
		else if (offset_color.a > 0.0){
			COLOR = mix(new_receiving_color, shadow_color , new_receiving_color.a * shadow_color.a);
		}
		// kjer skupna zamaknjena tekstura JE transparentna, damo željeno barvo ozadja
		else{
			COLOR = new_receiving_color; 
		}
	}
	// switchamo ... samo obrnemo pogoj
	else if (switch_cast_and_receive == true) {
		if (original_color != shadow_casting_color){
			COLOR =  new_casting_color; // ... nima vpliva
			}
		else if (offset_color.a > 0.0){
			COLOR = mix(new_receiving_color, shadow_color , new_receiving_color.a * shadow_color.a);
		}
		else{
			COLOR = new_receiving_color; 
		}		
	}
}
"

[sub_resource type="ShaderMaterial" id=445]
shader = SubResource( 444 )
shader_param/shadow_casting_color = Color( 1, 1, 1, 1 )
shader_param/shadow_color = Color( 0, 0, 0, 0.5 )
shader_param/switch_cast_and_receive = false
shader_param/new_casting_color = Color( 1, 1, 0, 0 )
shader_param/new_receiving_color = Color( 1, 0.501961, 0.501961, 0 )
shader_param/shadow_rotation_deg = 180.0
shader_param/shadow_distance_px = 0.0
shader_param/offset_steps = 5
shader_param/step_offset_px = 1.0

[sub_resource type="Shader" id=61]
code = "shader_type canvas_item;
render_mode blend_mix;

// šejder v1 - prepoznava 100% transparenco in aplicira novo barvo na te pixle
// šejder v2 - prepoznava tudi cutout barvo, ki jo potem manipulira
// šejder v3 - prepoznava barvo, ki ji mora dodat senco
// šejder v4 - prepoznava različne barve, ki jim dodaj različne sence
// šejder v5 - dodaja sence za prizemljene objekte

//... simple nadgradnja je če dodam več barv za manipulirat ... al pa celo gradient

// barve
uniform vec4 manipulate_color : hint_color = vec4(1.0, 0.0, 0.0, 1.0); // select color to regirster and manipulate
uniform bool manipulate_other_colors = true;
uniform vec4 transparent_color : hint_color = vec4(0.0, 0.0, 0.0, 0.0); // apply color to texture with alpha 0.0
uniform vec4 transparent_new_color : hint_color = vec4(0.0, 0.0, 0.0, 0.0); // apply color to texture with alpha 0.0

// shadow
uniform vec4 shadow_color : hint_color = vec4(0.0, 0.0, 0.0, 1.0);
uniform float shadow_offset_x = 1.0; // smer offseta ... to niso texli ampak pixli
uniform float shadow_offset_y = 1.0; // smer offseta ... to niso texli ampak pixli
uniform float texture_altitude = 5.0; // količina offseta ... višin texture

// dimenzija teksture za uskladitev texlov s pixli (1/texture original size)  
uniform float texture_width = 640.0;
uniform float texture_height = 360.0;



void fragment(){


	vec4 original_color = texture(SCREEN_TEXTURE, SCREEN_UV);
	
	// preračun pravge offseta sence ... pixle konvertamo v texle
	vec2 shadow_offset = vec2(shadow_offset_x / texture_width, shadow_offset_y / texture_height);
	vec2 uvs = SCREEN_UV + shadow_offset * texture_altitude;
	
	// poberemo prikaz texture in apliciramo samo offset še predno apliciramo barvo 
	vec4 color = texture(SCREEN_TEXTURE, uvs);

	
	// manipuliramo izbrano barvo
	if (manipulate_other_colors == false){
		
		// če je barva texture enaka izbrani apliciramo efekt
		if (color == manipulate_color){
			color = shadow_color * color.a;
		}
		// druge barve so brez efekta
		else {
			color.a = 0.0; // 100% transparenca
			color = texture(SCREEN_TEXTURE, SCREEN_UV); // original barva in pozicija
		}
	}
	
	// manipuliramo vse razen izbrane barve
	else if (manipulate_other_colors == true){
		
		// če barva texture ni transparenta apliciramo efekt
		if (color == transparent_color){
//		if (color.a > 0.0){
			
			// barva enaka izbrani barvi je brez efekta
			if (color == manipulate_color){
				color.a = 0.0;
				color = texture(SCREEN_TEXTURE, SCREEN_UV);
			}
			// aplciramo efekt na vse druge barve
			else {
				color = shadow_color * color.a;
			}
		}
		// barva transparentnega dela tekture
		else {
			color = transparent_new_color;
		}
		
	}
	
	// rezanje
	
	if (original_color != manipulate_color){
		COLOR = color;
	} 
	else{
//		COLOR.rgb = original_color.rgb;
		COLOR = original_color;
	}
//	COLOR = mix(original_color,color,0.1);
}"

[sub_resource type="ShaderMaterial" id=63]
shader = SubResource( 61 )
shader_param/manipulate_color = Color( 1, 1, 1, 1 )
shader_param/manipulate_other_colors = true
shader_param/transparent_color = Color( 0, 0, 0, 0 )
shader_param/transparent_new_color = Color( 0, 0, 0, 0 )
shader_param/shadow_color = Color( 0, 0, 0, 0.643137 )
shader_param/shadow_offset_x = 0.0
shader_param/shadow_offset_y = 1.0
shader_param/texture_altitude = 6.0
shader_param/texture_width = 640.0
shader_param/texture_height = 360.0

[sub_resource type="ShaderMaterial" id=16]
shader = ExtResource( 4 )
shader_param/manipulate_color_1 = Color( 1, 1, 1, 1 )
shader_param/new_color_1 = Color( 1, 0, 0, 1 )
shader_param/manipulate_color_2 = Color( 0, 1, 1, 1 )
shader_param/new_color_2 = Color( 0.898039, 0, 1, 1 )
shader_param/manipulate_color_3 = Color( 0.25098, 0.105882, 0.294118, 0 )
shader_param/new_color_3 = Color( 0.415686, 0.203922, 1, 1 )
shader_param/manipulate_other = false
shader_param/new_color_other = Color( 0.5, 0.5, 0.5, 1 )
shader_param/transparent_to_color = Color( 0, 0, 0, 0 )
shader_param/transparent_color = Color( 0, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=421]
shader = ExtResource( 3 )
shader_param/manipulate_color_1 = Color( 1, 1, 1, 1 )
shader_param/new_color_1 = Color( 0, 0, 0, 1 )
shader_param/manipulate_color_2 = Color( 0, 0, 0, 0 )
shader_param/new_color_2 = Color( 0, 1, 0.462745, 1 )
shader_param/manipulate_color_3 = Color( 0, 0, 1, 1 )
shader_param/new_color_3 = Color( 1, 0, 1, 1 )
shader_param/manipulate_other = false
shader_param/new_color_other = Color( 0.5, 0.5, 0.5, 1 )
shader_param/manipulate_all = false
shader_param/new_color_manipulate_all = Color( 0.5, 0.5, 0.5, 1 )
shader_param/transparent_to_color = Color( 0, 0, 0, 0 )

[sub_resource type="ConvexPolygonShape2D" id=127]
points = PoolVector2Array( 8, 8, 0, 8, 0, 0, 8, 0 )

[sub_resource type="ConvexPolygonShape2D" id=128]
points = PoolVector2Array( 8, 8, 0, 8, 0, 0, 8, 0 )

[sub_resource type="ConvexPolygonShape2D" id=129]
points = PoolVector2Array( 8, 8, 0, 8, 0, 0, 8, 0 )

[sub_resource type="ConvexPolygonShape2D" id=130]
points = PoolVector2Array( 8, 8, 0, 8, 0, 0, 8, 0 )

[sub_resource type="ConvexPolygonShape2D" id=131]
points = PoolVector2Array( 8, 8, 0, 8, 0, 0, 8, 0 )

[sub_resource type="ConvexPolygonShape2D" id=132]
points = PoolVector2Array( 8, 8, 0, 8, 0, 0, 8, 0 )

[sub_resource type="ConvexPolygonShape2D" id=133]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=134]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=135]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=136]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=137]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=138]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=139]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=140]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=141]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=142]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=143]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=144]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=145]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=146]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=147]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=148]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=149]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=150]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=151]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=152]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=153]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=154]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=155]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=156]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=157]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=158]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=159]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=160]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=161]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=162]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=163]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=164]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=165]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=166]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=167]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=168]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=169]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=170]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=171]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=172]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=173]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=174]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=175]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=176]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=177]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=178]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=179]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=180]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=181]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=182]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=183]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=184]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=185]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=186]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=187]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=188]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=189]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=190]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=191]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=192]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=193]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=194]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=195]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=196]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=197]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=198]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=199]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=200]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=201]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=202]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=203]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=204]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=205]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=206]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=207]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=208]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=209]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=210]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=211]
points = PoolVector2Array( 8, 8, 0, 8, 0, 8, 8, 8 )

[sub_resource type="ConvexPolygonShape2D" id=212]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=213]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=214]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=215]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=216]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=217]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=218]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=219]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=220]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=221]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=222]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=223]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=224]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=225]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=226]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=227]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=228]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=229]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=230]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=231]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=232]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=233]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=234]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=235]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=236]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=237]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=238]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=239]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=240]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=241]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=242]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=243]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=244]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=246]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=247]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=248]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=249]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=250]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=251]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=252]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=253]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=254]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=255]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=256]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=257]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=258]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=259]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=260]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=261]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=262]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=263]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=264]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=265]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=266]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=267]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=268]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=269]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=270]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=271]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=272]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=273]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=274]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=275]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=276]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=277]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=278]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=279]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=280]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=281]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=282]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=283]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=284]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=285]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=286]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=287]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=288]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=289]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=290]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=291]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=292]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=293]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=294]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=295]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=296]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=297]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=298]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=299]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=300]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=301]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=302]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=303]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=304]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=305]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=306]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=307]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=308]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=309]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=310]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=311]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=312]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=313]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=314]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=315]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=316]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=317]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=318]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=319]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=320]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=321]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=322]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=323]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=324]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=325]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=326]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=327]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=328]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=329]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=330]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=331]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=332]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=333]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=334]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=335]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=336]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=337]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=338]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=339]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=340]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=341]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=342]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=343]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=344]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=345]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=346]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=347]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=348]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=349]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=350]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=351]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=352]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=353]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=354]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=355]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=356]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=357]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=358]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=359]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=360]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=361]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=362]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=363]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=364]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=365]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=366]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=367]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=368]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=369]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=370]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=371]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=372]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=373]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=374]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=375]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=376]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=377]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=378]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=379]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=380]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=381]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=382]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=383]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=384]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=385]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=386]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=387]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=388]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=389]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=390]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=391]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=392]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=393]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=394]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=395]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=396]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=397]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=398]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=399]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=400]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=401]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=402]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=403]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=404]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=405]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=406]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=407]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=408]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=409]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=410]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="ConvexPolygonShape2D" id=415]
points = PoolVector2Array( 0, 0, 8, 0, 8, 8, 0, 8 )

[sub_resource type="TileSet" id=108]
0/name = "track_edge"
0/texture = ExtResource( 10 )
0/tex_offset = Vector2( 0, 0 )
0/modulate = Color( 1, 1, 1, 1 )
0/region = Rect2( 0, 0, 144, 160 )
0/tile_mode = 1
0/autotile/bitmask_mode = 2
0/autotile/bitmask_flags = [ Vector2( 0, 1 ), 432, Vector2( 0, 2 ), 438, Vector2( 0, 3 ), 54, Vector2( 0, 6 ), 223, Vector2( 0, 7 ), 479, Vector2( 0, 8 ), 475, Vector2( 0, 12 ), 404, Vector2( 0, 13 ), 83, Vector2( 0, 14 ), 213, Vector2( 0, 15 ), 342, Vector2( 0, 16 ), 209, Vector2( 0, 17 ), 86, Vector2( 0, 18 ), 209, Vector2( 0, 19 ), 278, Vector2( 1, 0 ), 315, Vector2( 1, 1 ), 504, Vector2( 1, 2 ), 511, Vector2( 1, 3 ), 63, Vector2( 1, 5 ), 95, Vector2( 1, 9 ), 473, Vector2( 1, 11 ), 123, Vector2( 1, 12 ), 433, Vector2( 1, 13 ), 118, Vector2( 1, 14 ), 405, Vector2( 1, 15 ), 339, Vector2( 1, 16 ), 401, Vector2( 1, 17 ), 275, Vector2( 1, 18 ), 404, Vector2( 1, 19 ), 83, Vector2( 2, 0 ), 246, Vector2( 2, 1 ), 216, Vector2( 2, 2 ), 219, Vector2( 2, 3 ), 27, Vector2( 2, 4 ), 127, Vector2( 2, 6 ), 325, Vector2( 2, 7 ), 501, Vector2( 2, 8 ), 375, Vector2( 2, 10 ), 505, Vector2( 2, 11 ), 183, Vector2( 2, 12 ), 220, Vector2( 2, 13 ), 283, Vector2( 2, 14 ), 212, Vector2( 2, 15 ), 86, Vector2( 2, 16 ), 465, Vector2( 2, 17 ), 279, Vector2( 2, 18 ), 469, Vector2( 2, 19 ), 343, Vector2( 3, 0 ), 441, Vector2( 3, 4 ), 383, Vector2( 3, 7 ), 477, Vector2( 3, 8 ), 351, Vector2( 3, 10 ), 509, Vector2( 3, 11 ), 444, Vector2( 3, 12 ), 401, Vector2( 3, 13 ), 86, Vector2( 3, 14 ), 401, Vector2( 3, 15 ), 275, Vector2( 3, 16 ), 468, Vector2( 3, 17 ), 87, Vector2( 4, 0 ), 222, Vector2( 4, 4 ), 319, Vector2( 4, 7 ), 181, Vector2( 4, 8 ), 370, Vector2( 4, 10 ), 508, Vector2( 4, 11 ), 474, Vector2( 4, 12 ), 212, Vector2( 4, 13 ), 275, Vector2( 4, 14 ), 368, Vector2( 4, 15 ), 53, Vector2( 4, 16 ), 117, Vector2( 4, 17 ), 369, Vector2( 4, 18 ), 373, Vector2( 5, 0 ), 126, Vector2( 5, 5 ), 311, Vector2( 5, 7 ), 157, Vector2( 5, 8 ), 346, Vector2( 5, 9 ), 500, Vector2( 5, 11 ), 318, Vector2( 5, 12 ), 305, Vector2( 5, 13 ), 116, Vector2( 5, 14 ), 344, Vector2( 5, 15 ), 29, Vector2( 5, 16 ), 285, Vector2( 5, 17 ), 348, Vector2( 5, 18 ), 349, Vector2( 6, 0 ), 435, Vector2( 6, 1 ), 144, Vector2( 6, 2 ), 146, Vector2( 6, 3 ), 18, Vector2( 6, 6 ), 439, Vector2( 6, 7 ), 503, Vector2( 6, 8 ), 502, Vector2( 6, 11 ), 498, Vector2( 6, 12 ), 92, Vector2( 6, 13 ), 281, Vector2( 7, 0 ), 252, Vector2( 7, 1 ), 464, Vector2( 7, 2 ), 466, Vector2( 7, 3 ), 23, Vector2( 7, 4 ), 242, Vector2( 7, 5 ), 180, Vector2( 7, 6 ), 306, Vector2( 7, 7 ), 178, Vector2( 7, 8 ), 58, Vector2( 7, 9 ), 184, Vector2( 7, 10 ), 178, Vector2( 7, 11 ), 249, Vector2( 7, 12 ), 497, Vector2( 7, 13 ), 119, Vector2( 8, 0 ), 411, Vector2( 8, 1 ), 400, Vector2( 8, 2 ), 151, Vector2( 8, 3 ), 22, Vector2( 8, 4 ), 314, Vector2( 8, 5 ), 153, Vector2( 8, 6 ), 90, Vector2( 8, 7 ), 184, Vector2( 8, 8 ), 154, Vector2( 8, 9 ), 154, Vector2( 8, 10 ), 58, Vector2( 8, 11 ), 159, Vector2( 8, 12 ), 476, Vector2( 8, 13 ), 287, Vector2( 8, 14 ), 245, Vector2( 8, 15 ), 371, Vector2( 8, 16 ), 241, Vector2( 8, 17 ), 115, Vector2( 9, 0 ), 379, Vector2( 9, 1 ), 208, Vector2( 9, 3 ), 19, Vector2( 9, 4 ), 158, Vector2( 9, 5 ), 240, Vector2( 9, 6 ), 51, Vector2( 9, 7 ), 189, Vector2( 9, 8 ), 243, Vector2( 9, 9 ), 179, Vector2( 9, 10 ), 122, Vector2( 9, 11 ), 314, Vector2( 9, 12 ), 401, Vector2( 9, 13 ), 279, Vector2( 9, 14 ), 413, Vector2( 9, 15 ), 350, Vector2( 9, 16 ), 412, Vector2( 9, 17 ), 286, Vector2( 10, 0 ), 247, Vector2( 10, 1 ), 148, Vector2( 10, 2 ), 82, Vector2( 10, 3 ), 149, Vector2( 10, 4 ), 338, Vector2( 10, 5 ), 408, Vector2( 10, 6 ), 30, Vector2( 10, 7 ), 414, Vector2( 10, 8 ), 378, Vector2( 10, 9 ), 188, Vector2( 10, 10 ), 410, Vector2( 10, 11 ), 242, Vector2( 10, 12 ), 468, Vector2( 10, 13 ), 87, Vector2( 10, 14 ), 177, Vector2( 10, 15 ), 114, Vector2( 10, 16 ), 496, Vector2( 10, 17 ), 55, Vector2( 11, 0 ), 445, Vector2( 11, 1 ), 145, Vector2( 11, 2 ), 274, Vector2( 11, 3 ), 404, Vector2( 11, 4 ), 83, Vector2( 11, 5 ), 176, Vector2( 11, 6 ), 50, Vector2( 11, 7 ), 182, Vector2( 11, 8 ), 59, Vector2( 11, 9 ), 248, Vector2( 11, 10 ), 434, Vector2( 11, 11 ), 441, Vector2( 11, 12 ), 309, Vector2( 11, 13 ), 372, Vector2( 11, 14 ), 156, Vector2( 11, 15 ), 282, Vector2( 11, 16 ), 472, Vector2( 11, 17 ), 31, Vector2( 12, 0 ), 478, Vector2( 12, 1 ), 48, Vector2( 12, 2 ), 308, Vector2( 12, 3 ), 304, Vector2( 12, 4 ), 52, Vector2( 12, 5 ), 152, Vector2( 12, 6 ), 26, Vector2( 12, 7 ), 440, Vector2( 12, 8 ), 218, Vector2( 12, 9 ), 155, Vector2( 12, 10 ), 62, Vector2( 12, 11 ), 158, Vector2( 12, 12 ), 345, Vector2( 12, 13 ), 93, Vector2( 12, 14 ), 21, Vector2( 12, 15 ), 336, Vector2( 12, 16 ), 277, Vector2( 12, 17 ), 337, Vector2( 13, 0 ), 382, Vector2( 13, 1 ), 56, Vector2( 13, 2 ), 121, Vector2( 13, 3 ), 316, Vector2( 13, 5 ), 244, Vector2( 13, 6 ), 307, Vector2( 13, 7 ), 436, Vector2( 13, 8 ), 310, Vector2( 13, 10 ), 61, Vector2( 13, 11 ), 376, Vector2( 13, 12 ), 437, Vector2( 13, 13 ), 374, Vector2( 13, 14 ), 81, Vector2( 13, 15 ), 276, Vector2( 13, 16 ), 85, Vector2( 13, 17 ), 340, Vector2( 14, 0 ), 499, Vector2( 14, 1 ), 24, Vector2( 14, 2 ), 89, Vector2( 14, 3 ), 88, Vector2( 14, 4 ), 25, Vector2( 14, 5 ), 409, Vector2( 14, 6 ), 94, Vector2( 14, 7 ), 217, Vector2( 14, 8 ), 91, Vector2( 14, 10 ), 211, Vector2( 14, 11 ), 406, Vector2( 14, 12 ), 221, Vector2( 14, 13 ), 347, Vector2( 14, 14 ), 273, Vector2( 14, 15 ), 84, Vector2( 15, 0 ), 253, Vector2( 15, 1 ), 112, Vector2( 15, 2 ), 49, Vector2( 15, 3 ), 113, Vector2( 15, 4 ), 116, Vector2( 15, 5 ), 381, Vector2( 15, 6 ), 313, Vector2( 15, 7 ), 124, Vector2( 15, 8 ), 57, Vector2( 15, 9 ), 120, Vector2( 15, 10 ), 60, Vector2( 15, 11 ), 312, Vector2( 15, 12 ), 212, Vector2( 15, 13 ), 86, Vector2( 15, 14 ), 341, Vector2( 16, 0 ), 415, Vector2( 16, 1 ), 28, Vector2( 16, 2 ), 280, Vector2( 16, 3 ), 284, Vector2( 16, 4 ), 92, Vector2( 16, 5 ), 471, Vector2( 16, 6 ), 214, Vector2( 16, 7 ), 403, Vector2( 16, 8 ), 210, Vector2( 16, 9 ), 402, Vector2( 16, 10 ), 147, Vector2( 16, 11 ), 150, Vector2( 16, 12 ), 305, Vector2( 16, 13 ), 116, Vector2( 16, 14 ), 17, Vector2( 16, 15 ), 80, Vector2( 17, 0 ), 185, Vector2( 17, 1 ), 16, Vector2( 17, 3 ), 186, Vector2( 17, 4 ), 470, Vector2( 17, 5 ), 467, Vector2( 17, 6 ), 407, Vector2( 17, 7 ), 215, Vector2( 17, 8 ), 317, Vector2( 17, 9 ), 380, Vector2( 17, 10 ), 377, Vector2( 17, 11 ), 125, Vector2( 17, 12 ), 281, Vector2( 17, 13 ), 92, Vector2( 17, 14 ), 20, Vector2( 17, 15 ), 272 ]
0/autotile/icon_coordinate = Vector2( 1, 2 )
0/autotile/tile_size = Vector2( 8, 8 )
0/autotile/spacing = 0
0/autotile/occluder_map = [  ]
0/autotile/navpoly_map = [  ]
0/autotile/priority_map = [  ]
0/autotile/z_index_map = [  ]
0/occluder_offset = Vector2( 0, 0 )
0/navigation_offset = Vector2( 0, 0 )
0/shape_offset = Vector2( 0, 0 )
0/shape_transform = Transform2D( 1, 0, 0, 1, 0, 0 )
0/shape = SubResource( 127 )
0/shape_one_way = false
0/shape_one_way_margin = 1.0
0/shapes = [ {
"autotile_coord": Vector2( 1, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 127 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 128 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 3, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 129 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 130 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 131 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 6, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 132 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 133 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 134 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 135 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 136 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 137 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 12, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 138 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 13, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 139 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 14, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 140 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 15, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 141 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 16, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 142 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 17, 0 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 143 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 17, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 144 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 17, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 145 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 17, 4 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 146 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 17, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 147 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 17, 5 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 148 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 17, 6 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 149 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 17, 7 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 150 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 17, 8 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 151 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 17, 9 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 152 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 17, 10 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 153 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 17, 11 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 154 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 16, 11 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 155 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 16, 10 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 156 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 16, 9 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 157 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 16, 8 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 158 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 16, 7 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 159 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 16, 6 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 160 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 16, 5 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 161 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 16, 4 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 162 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 16, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 163 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 16, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 164 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 16, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 165 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 15, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 166 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 15, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 167 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 15, 4 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 168 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 15, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 169 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 15, 5 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 170 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 15, 6 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 171 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 15, 7 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 172 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 15, 8 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 173 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 15, 9 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 174 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 15, 10 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 175 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 15, 11 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 176 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 14, 11 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 177 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 14, 10 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 178 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 14, 8 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 179 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 14, 7 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 180 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 14, 6 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 181 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 14, 5 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 182 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 14, 4 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 183 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 14, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 184 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 14, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 185 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 14, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 186 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 13, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 187 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 13, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 188 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 13, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 189 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 13, 5 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 190 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 13, 6 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 191 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 13, 7 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 192 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 13, 8 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 193 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 13, 10 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 194 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 13, 11 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 195 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 12, 11 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 196 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 12, 10 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 197 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 12, 9 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 198 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 12, 8 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 199 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 12, 7 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 200 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 12, 6 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 201 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 12, 5 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 202 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 12, 4 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 203 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 12, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 204 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 12, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 205 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 12, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 206 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 207 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 208 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 209 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 4 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 210 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 5 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 211 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 6 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 212 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 5 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 213 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 5 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 214 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 4 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 215 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 3, 4 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 216 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 4 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 217 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 5 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 218 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 6 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 219 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 7 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 220 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 8 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 221 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 9 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 222 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 10 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 223 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 3, 10 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 224 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 10 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 225 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 9 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 226 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 6, 8 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 227 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 6, 7 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 228 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 6, 6 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 229 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 4 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 230 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 6, 4 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 231 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 4 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 232 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 4 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 233 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 4 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 234 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 4 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 235 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 236 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 237 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 238 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 239 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 6, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 240 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 241 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 242 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 3 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 243 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 244 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 246 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 247 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 248 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 249 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 6, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 250 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 6, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 251 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 252 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 253 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 2 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 254 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 255 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 256 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 257 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 258 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 5 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 259 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 6 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 260 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 6 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 261 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 6 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 262 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 5 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 263 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 5 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 264 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 6 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 265 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 6 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 266 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 5 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 267 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 7 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 268 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 8 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 269 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 9 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 270 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 10 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 271 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 11 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 272 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 11 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 273 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 11 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 274 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 11 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 275 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 11 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 276 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 10 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 277 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 10 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 278 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 10 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 279 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 10 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 280 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 9 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 281 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 9 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 282 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 9 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 283 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 9 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 284 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 8 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 285 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 8 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 286 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 8 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 287 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 8 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 288 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 7 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 289 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 7 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 290 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 7 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 291 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 7 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 292 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 6, 11 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 293 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 11 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 294 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 11 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 295 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 3, 11 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 296 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 11 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 297 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 11 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 298 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 3, 7 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 299 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 3, 8 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 300 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 8 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 301 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 7 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 302 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 7 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 303 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 8 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 304 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 8 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 305 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 7 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 306 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 12 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 307 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 13 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 308 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 13 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 309 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 13 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 310 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 3, 13 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 311 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 13 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 312 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 13 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 313 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 6, 13 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 314 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 13 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 315 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 13 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 316 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 13 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 317 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 13 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 318 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 13 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 319 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 12, 13 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 320 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 13, 13 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 321 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 14, 13 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 322 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 15, 13 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 323 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 16, 13 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 324 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 17, 13 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 325 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 17, 12 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 326 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 16, 12 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 327 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 14, 12 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 328 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 15, 12 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 329 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 13, 12 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 330 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 12, 12 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 331 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 12 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 332 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 12 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 333 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 12 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 334 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 12 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 335 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 7, 12 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 336 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 6, 12 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 337 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 12 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 338 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 12 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 339 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 3, 12 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 340 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 12 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 341 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 12 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 342 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 17 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 343 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 17 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 344 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 17 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 345 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 17 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 346 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 12, 17 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 347 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 13, 17 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 348 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 13, 16 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 349 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 14, 16 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 350 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 15, 16 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 351 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 16, 16 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 352 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 17, 16 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 353 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 17, 15 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 354 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 17, 14 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 355 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 16, 14 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 356 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 15, 14 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 357 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 14, 14 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 358 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 13, 14 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 359 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 12, 14 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 360 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 14 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 361 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 14 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 362 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 14 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 363 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 14 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 364 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 15 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 365 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 15 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 366 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 15 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 367 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 15 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 368 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 12, 15 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 369 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 13, 15 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 370 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 14, 15 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 371 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 15, 15 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 372 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 16, 15 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 373 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 8, 16 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 374 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 9, 16 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 375 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 10, 16 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 376 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 11, 16 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 377 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 12, 16 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 378 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 14 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 379 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 14 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 380 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 14 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 381 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 3, 14 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 382 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 14 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 383 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 14 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 384 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 15 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 385 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 16 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 386 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 17 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 387 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 17 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 388 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 16 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 389 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 15 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 390 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 3, 17 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 391 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 17 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 392 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 3, 15 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 393 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 15 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 394 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 16 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 395 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 3, 16 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 396 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 16 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 397 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 15 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 398 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 15 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 399 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 16 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 400 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 17 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 401 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 17 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 402 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 5, 18 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 403 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 4, 18 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 404 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 18 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 405 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 19 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 406 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 19 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 407 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 19 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 408 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 2, 18 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 409 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 1, 18 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 410 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
}, {
"autotile_coord": Vector2( 0, 1 ),
"one_way": false,
"one_way_margin": 1.0,
"shape": SubResource( 415 ),
"shape_transform": Transform2D( 1, 0, 0, 1, 0, 0 )
} ]
0/z_index = 0

[sub_resource type="Shader" id=457]
code = "shader_type canvas_item;

// KAJ DELA ŠEJDER
// manipulira do 3 barve in vse preostale barve
// če barva ni izbrana za manipulirat, je enaka original teksturi
// kar je transparentno, ostane transparentno oz. lahko določiš svojo barvo


// barve za manipulirat
uniform vec4 manipulate_color_1 : hint_color = vec4(1.0, 0.0, 0.0, 1.0); // select color to regirster and manipulate
uniform vec4 new_color_1 : hint_color = vec4(1.0, 1.0, 0.0, 1.0); // select color to regirster and manipulate
uniform vec4 manipulate_color_2 : hint_color = vec4(0.0, 1.0, 0.0, 1.0); // select color to regirster and manipulate
uniform vec4 new_color_2 : hint_color = vec4(0.0, 1.0, 1.0, 1.0); // select color to regirster and manipulate
uniform vec4 manipulate_color_3 : hint_color = vec4(0.0, 0.0, 1.0, 1.0); // select color to regirster and manipulate
uniform vec4 new_color_3 : hint_color = vec4(1.0, 0.0, 1.0, 1.0); // select color to regirster and manipulate

// če želim manipulirat barvo preostalih barv
uniform bool manipulate_other = false;
uniform vec4 new_color_other : hint_color = vec4(0.5, 0.5, 0.5, 1.0); // select color to regirster and manipulate

// če želim manipulirat barvo preostalih barv
uniform bool manipulate_all = false; 
uniform vec4 new_color_manipulate_all : hint_color = vec4(0.5, 0.5, 0.5, 1.0); // select color to regirster and manipulate

uniform vec4 transparent_to_color : hint_color = vec4(0.0, 0.0, 0.0, 0.0); // apply color to texture with alpha 0.0


void fragment(){

	// poberemo prikaz texture in apliciramo samo offset še predno apliciramo barvo 
	vec4 color = texture(TEXTURE, UV);
	
	// kjer je prisotna barva
	if (color.a > 0.0){
		
		// če manipuliramo vse barve
		if (manipulate_all == true){
			color = new_color_manipulate_all * color.a;
		}
		// če manipuliramo izbrane barve
		else {
			// tri izbrane barve
			if (color == manipulate_color_1 ){
				color = new_color_1 * color.a;
			}
			else if (color == manipulate_color_2){
				color = new_color_2 * color.a;
			}
			else if (color == manipulate_color_3){
				color = new_color_3 * color.a;
			}
			// vse preostale barve
			else {
				// če je možnost vključena dodaj novo barvno
				if(manipulate_other == true){
					color = new_color_other;
				}
				// drugače pa original barvo
				else {
					color = texture(TEXTURE, UV);
					// color.a = 0.0; // 100% transparenca
				}
			}
		}
	// kjer je barva transparentna
	else if (color.a == 0.0) {
		color = transparent_to_color;
	}

	COLOR = color;
	
	
	
	
}"

[sub_resource type="ShaderMaterial" id=458]
shader = SubResource( 457 )
shader_param/manipulate_color_1 = Color( 1, 1, 1, 1 )
shader_param/new_color_1 = Color( 1, 0, 1, 1 )
shader_param/manipulate_color_2 = Color( 0, 0, 0, 0 )
shader_param/new_color_2 = Color( 0, 1, 0.462745, 1 )
shader_param/manipulate_color_3 = Color( 0, 0, 1, 1 )
shader_param/new_color_3 = Color( 1, 0, 1, 1 )
shader_param/manipulate_other = false
shader_param/new_color_other = Color( 0.5, 0.5, 0.5, 1 )
shader_param/manipulate_all = false
shader_param/new_color_manipulate_all = Color( 0.5, 0.5, 0.5, 1 )
shader_param/transparent_to_color = Color( 0, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=454]
shader = ExtResource( 14 )
shader_param/casting_color_1 = Color( 1, 0, 1, 1 )
shader_param/casting_color_2 = Color( 0, 0, 0, 1 )
shader_param/casting_color_3 = Color( 0, 1, 0, 0 )
shader_param/shadow_color = Color( 1, 1, 1, 1 )
shader_param/switch_cast_and_receive = false
shader_param/new_casting_color = Color( 0, 0, 0, 0 )
shader_param/new_receiving_color = Color( 0, 0, 0, 0 )
shader_param/shadow_rotation_deg = 180.0
shader_param/shadow_distance_px = 0.0
shader_param/offset_steps = 3
shader_param/step_offset_px = 1.0

[sub_resource type="Shader" id=459]
code = "shader_type canvas_item;


uniform vec4 casting_color_1: hint_color = vec4(1.0, 1.0, 1.0, 1.0); // senčena barva
uniform vec4 shadow_color: hint_color = vec4(1.0, 0.0, 0.0, 1.0);

uniform vec4 new_casting_color: hint_color = vec4(0.0, 0.0, 0.0, 0.0);
uniform vec4 new_receiving_color: hint_color = vec4(0.0, 0.0, 0.0, 0.0);

//uniform float shadow_rotation_deg: hint_range(0.0, 360.0) = 180; // rotacija v stopinjah (dol)
//uniform float shadow_distance_px: hint_range(0.0, 640.0, 1.0) = 0.0; // imitacija višine z odmikom celotne sence od senčenega objekta

uniform int offset_steps = 1; // število korakov ... imitira dolžino sence
uniform float step_offset_px: hint_range(0.0, 1.0) = 1.0; // offset per step v pixlih

//uniform vec2 screen_size = vec2(640.0, 360.0);


void fragment(){
	
//	vec4 new_shadow_receiving_color = vec4(0.0, 0.0, 0.0, 0.0);
	vec2 screen_size = vec2(640.0, 360.0);

	vec4 original_color = texture(SCREEN_TEXTURE, SCREEN_UV); // textura pred editiranjem
	vec4 step_offset_color; // zamik teksture na korak
	vec4 offset_color; // barva vsek korakov skupaj
	
	
	float step_count = 0.0;
	int add_steps = 20;
	
			
		
	float shadow_rotation_deg = 90.0;
//	float shadow_rotation_rad = radians(shadow_rotation_deg);
//	float step_pixel_offset_y = cos(shadow_rotation_rad) * step_offset_px;
//	float step_pixel_offset_x = sin(shadow_rotation_rad) * step_offset_px;	
//	dupliciramo tolikokrat kolikor je korakov ... vsak duplikat ma svoj kot
	float shadow_rotation_steps = 360.0 / 10.0;
	vec2 uvs;
	vec4 all_sides_color;
	vec4 one_side_color;
	vec4 w_side_color;
	
			
	// OFFSET STEPS
	for (int i = 0; i < offset_steps; i++) {
		
//		step_count += 1.0;
		
		// STEP DIR 
		for (int dir = 0; dir < 4 ; dir++) {

//			shadow_rotation_deg = 90.0;
			if (dir == 0){
				shadow_rotation_deg = 90.0;
			}
			else if (dir == 1){
				shadow_rotation_deg = 180.0;
			}
			else if (dir == 2){
				shadow_rotation_deg = 270.0;
			}
			else if (dir == 3){
				shadow_rotation_deg = 360.0;
			}
			
			float shadow_rotation_rad = radians(shadow_rotation_deg);
			float step_pixel_offset_y = cos(shadow_rotation_rad) * step_offset_px;
			float step_pixel_offset_x = sin(shadow_rotation_rad) * step_offset_px;	
			
			uvs = SCREEN_UV + vec2(step_pixel_offset_x / screen_size.x, step_pixel_offset_y / screen_size.y) * 1.0; // * step_count; 
			
			one_side_color = texture(SCREEN_TEXTURE, uvs); 
			
			// kjer je zamaknjena senčena barva, damo barvo sence
			if (one_side_color == casting_color_1){
				one_side_color = texture(SCREEN_TEXTURE, uvs); 
//				one_side_color = vec4(0.0, 0.0, 0.0, 1.0);
	//			step_offset_color = texture(SCREEN_TEXTURE, uvs); 	
			}
			else {
//				one_side_color.a = 0.0;
				one_side_color = vec4(1.0, 1.0, 0.0, 1.0);
			}
			
			all_sides_color = one_side_color; // barve se čudno mešajo ... zato dodam pravo barvo sence kasneje
		}
		
//		vec4 step_offset = texture(SCREEN_TEXTURE, uvs); 
//		vec4 step_offset = all_sides_color; 
		
		step_offset_color = all_sides_color;
//		step_offset_color = step_offset;
		
		
		
		step_count += 1.0;
		
		
		// kjer je zamaknjena senčena barva, damo barvo sence
		if (step_offset_color == casting_color_1){
			step_offset_color = vec4(0.0, 0.0, 0.0, 1.0);
//			step_offset_color = texture(SCREEN_TEXTURE, uvs); 	
		}
		else {
			step_offset_color.a = 0.0;
		}
		
		// dodajanje teksture korakov v skupno teksturo
		offset_color += step_offset_color; // barve se čudno mešajo ... zato dodam pravo barvo sence kasneje
	}
	

	
	// FINAL COLOR 
//	COLOR = offset_color;
	
	
	// kjer je original barva enaka senčeni barvi, damo original barvo 
	if (original_color == casting_color_1){
	// alfa 100%, če ne se ne vidi ...  to bom popravil, da se aplcira alpha teksture	
		COLOR =  new_casting_color;
		}
	// kjer skupna zamaknjena tekstura NI transparentna, damo željeno barvo sence 
	else if (offset_color.a > 0.0){
		COLOR = mix(new_receiving_color, shadow_color , shadow_color.a);
//		COLOR = mix(new_receiving_color, shadow_color , shadow_color.a);

	}
	// kjer skupna zamaknjena tekstura JE transparentna, damo željeno barvo ozadja
	else{
		COLOR = new_receiving_color; 
	}
}


//		step_count += 1.0; // štejemo korake ... pusti na ena
//
//		// zamik texture v smeri (preračun texlov v pixle) ... z vsakim korakom se prišteje zamik-na-korak
//		vec2 uvs = SCREEN_UV + vec2(step_pixel_offset_x / screen_size.x, step_pixel_offset_y / screen_size.y) * -1.0 * step_count; 
//
//		// opredelimo barvo zamaknjene tekstue in jo premaknemo še za željeno oddaljenost teksture (preračunano v pixle)
//		step_offset_color = texture(SCREEN_TEXTURE, uvs + vec2(step_pixel_offset_x * shadow_distance_px / screen_size.x, step_pixel_offset_y * shadow_distance_px / screen_size.y) * -1.0); 
//
//		// kjer je zamaknjena senčena barva, damo barvo sence
//		if (step_offset_color == casting_color_1 || step_offset_color == casting_color_2 || step_offset_color == casting_color_3){
//			step_offset_color = vec4(0.0, 0.0, 0.0, 1.0);
//		}
//		else {
//			step_offset_color.a = 0.0;
//		}
//
//		// dodajanje teksture korakov v skupno teksturo
//		offset_color += step_offset_color; // barve se čudno mešajo ... zato dodam pravo barvo sence kasneje"

[sub_resource type="ShaderMaterial" id=460]
shader = SubResource( 459 )
shader_param/casting_color_1 = Color( 0, 0, 0, 1 )
shader_param/shadow_color = Color( 1, 0, 0, 1 )
shader_param/new_casting_color = Color( 0, 0, 0, 0 )
shader_param/new_receiving_color = Color( 0, 0, 0, 0 )
shader_param/offset_steps = 3
shader_param/step_offset_px = 1.0

[sub_resource type="Shader" id=461]
code = "shader_type canvas_item;

uniform vec4 color1 : hint_color;
uniform vec4 color2 : hint_color;
uniform float threshold;
uniform float intensity;
uniform float opacity;
uniform vec4 glow_color : hint_color;

void fragment() {
//	// Get the pixel color from the texture
//	vec4 pixel_color = texture(TEXTURE, UV);
//
//	// Calculate the distance between the pixel color and the first source color
//	float distance = length(pixel_color - color1);
//
//	// Calculate the distance between the pixel color and the second source color
//	float distance_second = length(pixel_color - color2);
//
//	// Create a new variable to store the modified glow color
//	vec4 modified_glow_color = glow_color;
//
//	// Set the alpha value of the modified glow color to the specified opacity
//	modified_glow_color.a = opacity;
//
//	// If the distance to either source color is below the threshold, set the output color to a blend of the pixel color and the modified glow color
//	if (distance < threshold || distance_second < threshold) {
//		COLOR = mix(pixel_color, modified_glow_color * intensity, modified_glow_color.a);
//	}
//	// Otherwise, set the output color to the pixel color
//	else {
//		COLOR = pixel_color;
//	}
	vec2 center = vec2(0.5, 0.5); // center of the texture
	vec2 pixel_pos = UV; // position of the current pixel
	float max_distance = 0.9; // maximum distance for full gradient effect
	vec4 pixel_color = texture(TEXTURE, pixel_pos); // color of the current pixel
	
	float current_distance; // = -1.0; // initialize distance to -1 (invalid value)
//	float gradient;

	
	if (pixel_color.a == 0.0) // check for red pixel
	{
//		current_distance = distance(center, pixel_pos); // calculate distance
		COLOR = pixel_color;
		COLOR.a = 0.0;
	}
//	else if (pixel_color.rgb == vec3(0.0)) // check for red pixel
//	{
//		current_distance = distance(center, pixel_pos); // calculate distance
////		COLOR = pixel_color;
//		COLOR.a = 0.0;
//		COLOR.rgb = vec3(0.5, 0.0, 1.5);
//	}
	else {
//		current_distance = distance(center, pixel_pos); // calculate distance
		current_distance = distance(pixel_pos,center); // calculate distance
		
		if (current_distance >= 0.0) // check if distance is valid
		{
			float gradient = smoothstep(0.0, max_distance, current_distance); // calculate gradient
			    // or: float gradient = mix(0.0, 1.0, distance / max_distance); // using mix function

			    // use the gradient value in your shader as needed
//			COLOR = vec4(gradient*0.01, gradient*0.0, 0.0, 1.0);
			COLOR = pixel_color * gradient;
//			COLOR = vec4(gradient) ;

		}
	}
}"

[sub_resource type="ShaderMaterial" id=462]
shader = SubResource( 461 )
shader_param/color1 = Color( 0, 0, 0, 1 )
shader_param/color2 = Color( 0, 0, 0, 0 )
shader_param/threshold = 9.193
shader_param/intensity = 10.0
shader_param/opacity = 1.0
shader_param/glow_color = Color( 0.952941, 0.952941, 0.952941, 1 )

[sub_resource type="Shader" id=23]
code = "shader_type canvas_item;
render_mode blend_mul ;

uniform float intensity = 0.5f;
uniform float layers = 5.0f;
uniform float speed = 1.0f;


// čekiramo razdaljo od centra teksture do koordinate trenutnega texla
float gradient(vec2 uv){
	
//	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f))); // nastane krog, ker je razdalja od centra konstantna
//	return (0.5f - distance(vec2(0.0f, uv.y), vec2(0.0f, 0.5f))); // gradient from top to bottom, focus middle
//	return (1.0f - distance(vec2(0.0f, uv.y), vec2(0.0f, 1.0f))); // gradient from top
	return (1.0f - distance(vec2(0.0f, uv.y), vec2(0.0f, 0.0f))); // gradient from bottom

//	predelava
//	- probaj poiskate center teksture in točke na beli liniji

}

vec4 colorize (float col, float a) {
	
	vec4 pallete;
	
//	// grayscale
	pallete = vec4(col, col, col, a);  // col je podan red kanal

//	// monochrome
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.g = float(col >= 0.0f); // en kanal setamo, da je ves čas 0, razen ko je poln (? ... full je white?)
	
//	// darken vse kar ni belo
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.g = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.b = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
	
//	// raznobarvno
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3 && col < 0.7 || col > 0.9); 
//	pallete.g = float(col > 0.7); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.5 || col > 0.9); // višja vrednost od dveh ...?
	
//	// ta bi bila za ščit
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.g = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.3); // višja vrednost od dveh ...?
	
	return pallete; // ta vrednost gre v barvo
}


void fragment(){
	
	vec4 bg = texture(TEXTURE, UV - TIME/(speed*10.0)); // tukaj je že notri premikanje
	
	COLOR = bg;
	COLOR.r = gradient(UV); // red kanal damo rezultat gradient funkcije 
	
	// množimo oz. združimo red channel z intensity in teksturo noisa
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 2.0f, 0.0f, 1.0f); // klempam, da ne gre pod nulo in ne nad ena (ker je to barvni kanal)
	
	// tukaj floramo vrednosti
	// current color * intensity
//	COLOR.r = floor(COLOR.r * layers) / layers; // floor ... zaokrožimo zato, ker ker je št. lejerja zmeraj cela številka ... delimo z lejerji, da je vsak lejer na 0.2 vrednosti
//	COLOR.a = float(COLOR.r > 0.0f); // ?
	
	COLOR = colorize(COLOR.r, COLOR.a); // igranje z barvami
	
	
}"

[sub_resource type="ShaderMaterial" id=24]
shader = SubResource( 23 )
shader_param/intensity = 0.5
shader_param/layers = 5.0
shader_param/speed = 4.0

[sub_resource type="OpenSimplexNoise" id=111]
period = 14.5
persistence = 1.0

[sub_resource type="NoiseTexture" id=102]
width = 64
height = 36
seamless = true
noise = SubResource( 111 )

[sub_resource type="Shader" id=455]
code = "

shader_type canvas_item;

uniform vec4 line_color : hint_color = vec4(1.0);
uniform float line_thickness : hint_range(0, 10) = 1.0;

const vec2 OFFSETS[8] = {
	vec2(-1, -1), vec2(-1, 0), vec2(-1, 1), vec2(0, -1), vec2(0, 1), 
	vec2(1, -1), vec2(1, 0), vec2(1, 1)
};

void fragment() {
	vec2 size = TEXTURE_PIXEL_SIZE * line_thickness;
	float outline = 1.0;
	
	for (int i = 0; i < OFFSETS.length(); i++) {
		outline *= texture(TEXTURE, UV + size * OFFSETS[i]).a;
	}
	outline = 1.0 - outline;
	
	vec4 color = texture(TEXTURE, UV);
	vec4 outlined_result = mix(color, line_color, outline * color.a);
	vec4 outlined_color = mix(color, outlined_result, outlined_result.a);



	vec2 center = vec2(0.5, 0.5); // center of the texture
	vec2 pixel_pos = UV; // position of the current pixel
	float max_distance = 0.9; // maximum distance for full gradient effect
	vec4 pixel_color = texture(TEXTURE, pixel_pos); // color of the current pixel
	vec4 pixel_line_color = texture(TEXTURE, pixel_pos); // color of the current pixel

	float current_distance; // initialize distance to -1 (invalid value) ... transparenco da v belo
//	float current_distance = -1.0; // initialize distance to -1 (invalid value) ... transparenco da v belo
//	float gradient;


//	if (pixel_color == line_color) // check for red pixel
	if (pixel_color.a != 0.0) // check for red pixel
	{
		current_distance = distance(center, pixel_pos); // calculate distance
//		COLOR = vec4(1.0);
//		COLOR.a = 0.0;
	}
//	else if (pixel_color.rgb == vec3(0.0)) // check for red pixel
//	{
//		current_distance = distance(center, pixel_pos); // calculate distance
////		COLOR = pixel_color;
//		COLOR.a = 0.0;
//		COLOR.rgb = vec3(0.5, 0.0, 1.5);
//	}
//	else {
//		current_distance = distance(center, pixel_pos); // calculate distance
//		current_distance = distance(pixel_pos,center); // calculate distance

	if (current_distance >= 0.0) // check if distance is valid
	{
		float gradient = smoothstep(0.0, max_distance, current_distance); // calculate gradient
		    // or: float gradient = mix(0.0, 1.0, distance / max_distance); // using mix function

		    // use the gradient value in your shader as needed
//			COLOR = vec4(gradient*0.01, gradient*0.0, 0.0, 1.0);
//			COLOR = vec4(gradient) ;

		COLOR = pixel_color * gradient;
	}
//	}
	
	
//	COLOR = outlined_color;
	
}





//shader_type canvas_item;
//
//uniform vec4 line_color : hint_color = vec4(1.0);
//uniform float line_thickness : hint_range(0, 10) = 1.0;
//
//const vec2 OFFSETS[8] = {
//	vec2(-1, -1), vec2(-1, 0), vec2(-1, 1), vec2(0, -1), vec2(0, 1), 
//	vec2(1, -1), vec2(1, 0), vec2(1, 1)
//};
//
//void fragment() {
//	vec2 size = TEXTURE_PIXEL_SIZE * line_thickness;
//	float outline = 1.0;
//
//	for (int i = 0; i < OFFSETS.length(); i++) {
//		outline *= texture(TEXTURE, UV + size * OFFSETS[i]).a;
//	}
//	outline = 1.0 - outline;
//
//	vec4 color = texture(TEXTURE, UV);
//	vec4 outlined_result = mix(color, line_color, outline * color.a);
//	vec4 outlined_color = mix(color, outlined_result, outlined_result.a);
//
//
//
//	vec2 center = vec2(0.5, 0.5); // center of the texture
//	vec2 pixel_pos = UV; // position of the current pixel
//	float max_distance = 0.9; // maximum distance for full gradient effect
//	vec4 pixel_color = texture(TEXTURE, pixel_pos); // color of the current pixel
//
//	float current_distance; // = -1.0; // initialize distance to -1 (invalid value)
////	float gradient;
//
//
//	if (pixel_color == line_color) // check for red pixel
//	{
//		current_distance = distance(center, pixel_pos); // calculate distance
////		COLOR = vec4(1.0);
////		COLOR.a = 0.0;
//	}
////	else if (pixel_color.rgb == vec3(0.0)) // check for red pixel
////	{
////		current_distance = distance(center, pixel_pos); // calculate distance
//////		COLOR = pixel_color;
////		COLOR.a = 0.0;
////		COLOR.rgb = vec3(0.5, 0.0, 1.5);
////	}
//	else {
////		current_distance = distance(center, pixel_pos); // calculate distance
//		current_distance = distance(pixel_pos,center); // calculate distance
//
//		if (current_distance >= 0.0) // check if distance is valid
//		{
//			float gradient = smoothstep(0.0, max_distance, current_distance); // calculate gradient
//			    // or: float gradient = mix(0.0, 1.0, distance / max_distance); // using mix function
//
//			    // use the gradient value in your shader as needed
////			COLOR = vec4(gradient*0.01, gradient*0.0, 0.0, 1.0);
//			COLOR = pixel_color * gradient;
////			COLOR = vec4(gradient) ;
//
//		}
//	}
//
//
//	COLOR = outlined_color;
//}"

[sub_resource type="ShaderMaterial" id=456]
shader = SubResource( 455 )
shader_param/line_color = Color( 1, 0, 0, 1 )
shader_param/line_thickness = 0.189

[sub_resource type="Shader" id=4]
code = "shader_type canvas_item;

uniform float intensity = 0.5f;
uniform float layers = 5.0f;
uniform float speed = 4.0f;

float gradient(vec2 uv){
	
	// čekiramo razdaljo od centra sprajta do koordinate trenutne pike
	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f))); // nastane krog, ker je razdalja od centra konstantna
	
	
}
void fragment(){
	vec4 bg = texture(TEXTURE, UV - TIME/speed); // tukjaj je že notri premikanje
	
	COLOR = bg;
	COLOR.r = gradient(UV); // red kanal damo rezultat gradient funkcije 
	
	// množimo oz. združimo red channel z intensity in teksturo noisa
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10.0f, 0.0f, 1.0f); // klempam, da ne gre pod nulo in ne nad ena (ker je to barvni kanal)
	//	current color * intensity
	
	
	
	
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 4 )
shader_param/intensity = 0.5
shader_param/layers = 5.0
shader_param/speed = 4.0

[sub_resource type="OpenSimplexNoise" id=100]
period = 20.0

[sub_resource type="NoiseTexture" id=3]
width = 48
height = 48
seamless = true
noise = SubResource( 100 )

[sub_resource type="Shader" id=11]
code = "shader_type canvas_item;
render_mode blend_mix ;

uniform float intensity = 0.5f;
uniform float layers = 5.0f;
uniform float speed = 4.0f;

float gradient(vec2 uv){
	
	// čekiramo razdaljo od centra sprajta do koordinate trenutne pike
	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f))); // nastane krog, ker je razdalja od centra konstantna
}

vec4 colorize (float col, float a) {
	
	vec4 pallete;
	
//	// grayscale
//	pallete = vec4(col, col, col, a);  // col je podan red kanal

//	// monochrome
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.g = float(col >= 0.0f); // en kanal setamo, da je ves čas 0, razen ko je poln (? ... full je white?)
	
//	// darken vse kar ni belo
	pallete = vec4(col, col, col, a);  // col je podan red kanal
	pallete.r = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
	pallete.g = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
	pallete.b = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
	
//	// raznobarvno
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3 && col < 0.7 || col > 0.9); 
//	pallete.g = float(col > 0.7); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.5 || col > 0.9); // višja vrednost od dveh ...?
	
//	// ta bi bila za ščit
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.g = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.3); // višja vrednost od dveh ...?
	
	return pallete; // ta vrednost gre v barvo
}


void fragment(){
	vec4 bg = texture(TEXTURE, UV - TIME/speed); // tukjaj je že notri premikanje
	
	COLOR = bg;
	COLOR.r = gradient(UV); // red kanal damo rezultat gradient funkcije 
	
	// množimo oz. združimo red channel z intensity in teksturo noisa
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10.0f, 0.0f, 1.0f); // klempam, da ne gre pod nulo in ne nad ena (ker je to barvni kanal)
	//	current color * intensity
	COLOR.r = floor(COLOR.r * layers) / layers; // floor ... zaokrožimo zato, ker ker je št. lejerja zmeraj cela številka ... delimo z lejerji, da je vsak lejer na 0.2 vrednosti
	COLOR.a = float(COLOR.r > 0.0f); // ?
	
	COLOR = colorize(COLOR.r, COLOR.a); // igranje z barvami
	
	
}"

[sub_resource type="ShaderMaterial" id=101]
shader = SubResource( 11 )
shader_param/intensity = 1.0
shader_param/layers = 4.0
shader_param/speed = 4.0

[sub_resource type="Shader" id=103]
code = "shader_type canvas_item;
render_mode blend_mix ;

uniform float intensity = 0.5f;
uniform float layers = 5.0f;
uniform float speed = 4.0f;

float gradient(vec2 uv){
	
	// čekiramo razdaljo od centra sprajta do koordinate trenutne pike
	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f))); // nastane krog, ker je razdalja od centra konstantna
}

vec4 colorize (float col, float a) {
	
	vec4 pallete;
	
//	// grayscale
//	pallete = vec4(col, col, col, a);  // col je podan red kanal

//	// monochrome
	pallete = vec4(col, col, col, a);  // col je podan red kanal
	pallete.g = float(col >= 0.0f); // en kanal setamo, da je ves čas 0, razen ko je poln (? ... full je white?)
	
//	// darken vse kar ni belo
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.g = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.b = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
	
//	// raznobarvno
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3 && col < 0.7 || col > 0.9); 
//	pallete.g = float(col > 0.7); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.5 || col > 0.9); // višja vrednost od dveh ...?
	
//	// ta bi bila za ščit
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.g = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.3); // višja vrednost od dveh ...?
	
	return pallete; // ta vrednost gre v barvo
}


void fragment(){
	vec4 bg = texture(TEXTURE, UV - TIME/speed); // tukjaj je že notri premikanje
	
	COLOR = bg;
	COLOR.r = gradient(UV); // red kanal damo rezultat gradient funkcije 
	
	// množimo oz. združimo red channel z intensity in teksturo noisa
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10.0f, 0.0f, 1.0f); // klempam, da ne gre pod nulo in ne nad ena (ker je to barvni kanal)
	//	current color * intensity
	COLOR.r = floor(COLOR.r * layers) / layers; // floor ... zaokrožimo zato, ker ker je št. lejerja zmeraj cela številka ... delimo z lejerji, da je vsak lejer na 0.2 vrednosti
	COLOR.a = float(COLOR.r > 0.0f); // ?
	
	COLOR = colorize(COLOR.r, COLOR.a); // igranje z barvami
	
	
}"

[sub_resource type="ShaderMaterial" id=104]
shader = SubResource( 103 )
shader_param/intensity = 1.0
shader_param/layers = 4.0
shader_param/speed = 4.0

[sub_resource type="Shader" id=12]
code = "shader_type canvas_item;
render_mode blend_mix ;

uniform float intensity = 0.5f;
uniform float layers = 5.0f;
uniform float speed = 4.0f;

float gradient(vec2 uv){
	
	// čekiramo razdaljo od centra sprajta do koordinate trenutne pike
	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f))); // nastane krog, ker je razdalja od centra konstantna
}

vec4 colorize (float col, float a) {
	
	vec4 pallete;
	
//	// grayscale
	pallete = vec4(col, col, col, a);  // col je podan red kanal

//	// monochrome
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.g = float(col >= 0.0f); // en kanal setamo, da je ves čas 0, razen ko je poln (? ... full je white?)
	
//	// darken vse kar ni belo
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.g = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.b = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
	
//	// raznobarvno
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3 && col < 0.7 || col > 0.9); 
//	pallete.g = float(col > 0.7); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.5 || col > 0.9); // višja vrednost od dveh ...?
	
//	// ta bi bila za ščit
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.g = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.3); // višja vrednost od dveh ...?
	
	return pallete; // ta vrednost gre v barvo
}


void fragment(){
	vec4 bg = texture(TEXTURE, UV - TIME/speed); // tukjaj je že notri premikanje
	
	COLOR = bg;
	COLOR.r = gradient(UV); // red kanal damo rezultat gradient funkcije 
	
	// množimo oz. združimo red channel z intensity in teksturo noisa
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10.0f, 0.0f, 1.0f); // klempam, da ne gre pod nulo in ne nad ena (ker je to barvni kanal)
	//	current color * intensity
	COLOR.r = floor(COLOR.r * layers) / layers; // floor ... zaokrožimo zato, ker ker je št. lejerja zmeraj cela številka ... delimo z lejerji, da je vsak lejer na 0.2 vrednosti
	COLOR.a = float(COLOR.r > 0.0f); // ?
	
	COLOR = colorize(COLOR.r, COLOR.a); // igranje z barvami
	
	
}"

[sub_resource type="ShaderMaterial" id=105]
shader = SubResource( 12 )
shader_param/intensity = 1.0
shader_param/layers = 4.0
shader_param/speed = 4.0

[sub_resource type="Shader" id=26]
code = "shader_type canvas_item;
render_mode blend_mix ;

uniform float intensity = 0.5f;
uniform float layers = 5.0f;
uniform float speed = 4.0f;

float gradient(vec2 uv){
	
	// čekiramo razdaljo od centra sprajta do koordinate trenutne pike
	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f))); // nastane krog, ker je razdalja od centra konstantna
}

vec4 colorize (float col, float a) {
	
	vec4 pallete;
	
//	// grayscale
//	pallete = vec4(col, col, col, a);  // col je podan red kanal

//	// monochrome
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.g = float(col >= 0.0f); // en kanal setamo, da je ves čas 0, razen ko je poln (? ... full je white?)
	
//	// darken vse kar ni belo
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.g = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.b = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
	
//	// raznobarvno
	pallete = vec4(col, col, col, a);  // col je podan red kanal
	pallete.r = float(col > 0.3 && col < 0.7 || col > 0.9); 
	pallete.g = float(col > 0.7); // višja vrednost od dveh ...?
	pallete.b = float(col > 0.5 || col > 0.9); // višja vrednost od dveh ...?
	
//	// ta bi bila za ščit
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.g = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.3); // višja vrednost od dveh ...?
	
	return pallete; // ta vrednost gre v barvo
}


void fragment(){
	vec4 bg = texture(TEXTURE, UV - TIME/speed); // tukjaj je že notri premikanje
	
	COLOR = bg;
	COLOR.r = gradient(UV); // red kanal damo rezultat gradient funkcije 
	
	// množimo oz. združimo red channel z intensity in teksturo noisa
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10.0f, 0.0f, 1.0f); // klempam, da ne gre pod nulo in ne nad ena (ker je to barvni kanal)
	//	current color * intensity
	COLOR.r = floor(COLOR.r * layers) / layers; // floor ... zaokrožimo zato, ker ker je št. lejerja zmeraj cela številka ... delimo z lejerji, da je vsak lejer na 0.2 vrednosti
	COLOR.a = float(COLOR.r > 0.0f); // ?
	
	COLOR = colorize(COLOR.r, COLOR.a); // igranje z barvami
	
	
}"

[sub_resource type="ShaderMaterial" id=106]
shader = SubResource( 26 )
shader_param/intensity = 1.0
shader_param/layers = 4.0
shader_param/speed = 4.0

[sub_resource type="Shader" id=17]
code = "shader_type canvas_item;
render_mode blend_mix ;

uniform float intensity = 0.5f;
uniform float layers = 5.0f;
uniform float speed = 4.0f;

float gradient(vec2 uv){
	
	// čekiramo razdaljo od centra sprajta do koordinate trenutne pike
	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f))); // nastane krog, ker je razdalja od centra konstantna
}

vec4 colorize (float col, float a) {
	
	vec4 pallete;
	
//	// grayscale
//	pallete = vec4(col, col, col, a);  // col je podan red kanal

//	// monochrome
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.g = float(col >= 0.0f); // en kanal setamo, da je ves čas 0, razen ko je poln (? ... full je white?)
	
//	// darken vse kar ni belo
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.g = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.b = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
	
//	// raznobarvno
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3 && col < 0.7 || col > 0.9); 
//	pallete.g = float(col > 0.7); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.5 || col > 0.9); // višja vrednost od dveh ...?
	
//	// ta bi bila za ščit
	pallete = vec4(col, col, col, a);  // col je podan red kanal
	pallete.r = float(col > 0.3); // višja vrednost od dveh ...?
	pallete.g = float(col > 0.3); // višja vrednost od dveh ...?
	pallete.b = float(col > 0.3); // višja vrednost od dveh ...?
	
	return pallete; // ta vrednost gre v barvo
}


void fragment(){
	vec4 bg = texture(TEXTURE, UV - TIME/speed); // tukjaj je že notri premikanje
	
	COLOR = bg;
	COLOR.r = gradient(UV); // red kanal damo rezultat gradient funkcije 
	
	// množimo oz. združimo red channel z intensity in teksturo noisa
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10.0f, 0.0f, 1.0f); // klempam, da ne gre pod nulo in ne nad ena (ker je to barvni kanal)
	//	current color * intensity
	COLOR.r = floor(COLOR.r * layers) / layers; // floor ... zaokrožimo zato, ker ker je št. lejerja zmeraj cela številka ... delimo z lejerji, da je vsak lejer na 0.2 vrednosti
	COLOR.a = float(COLOR.r > 0.0f); // ?
	
	COLOR = colorize(COLOR.r, COLOR.a); // igranje z barvami
	
	
}"

[sub_resource type="ShaderMaterial" id=18]
shader = SubResource( 17 )
shader_param/intensity = 1.0
shader_param/layers = 4.0
shader_param/speed = 4.0

[sub_resource type="Shader" id=21]
code = "shader_type canvas_item;
render_mode blend_mix ;

uniform float intensity = 0.5f;
uniform float layers = 5.0f;
uniform float speed = 4.0f;

float gradient(vec2 uv){
	
	// čekiramo razdaljo od centra sprajta do koordinate trenutne pike
//	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f))); // nastane krog, ker je razdalja od centra konstantna
	return (0.5f - distance(vec2(0.0f, uv.y), vec2(0.0f, 0.5f))); // gradient from top to bottom, focus middle
//	return (1.0f - distance(vec2(0.0f, uv.y), vec2(0.0f, 0.0f))); // gradient from top
//	return (1.0f - distance(vec2(0.0f, uv.y), vec2(0.0f, 0.0f))); // gradient from bottom
}

vec4 colorize (float col, float a) {
	
	vec4 pallete;
	
//	// grayscale
//	pallete = vec4(col, col, col, a);  // col je podan red kanal

//	// monochrome
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.g = float(col >= 0.0f); // en kanal setamo, da je ves čas 0, razen ko je poln (? ... full je white?)
	
//	// darken vse kar ni belo
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.g = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.b = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
	
//	// raznobarvno
	pallete = vec4(col, col, col, a);  // col je podan red kanal ... tole je potem čb
	pallete.r = float(col > 0.3 && col < 0.7 || col > 0.9); 
	pallete.g = float(col > 0.7); // višja vrednost od dveh ...?
	pallete.b = float(col > 0.5 || col > 0.9); // višja vrednost od dveh ...?
	
//	// ta bi bila za ščit
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.g = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.3); // višja vrednost od dveh ...?
	
	return pallete; // ta vrednost gre v barvo
}


void fragment(){
	vec4 bg = texture(TEXTURE, UV - TIME/speed); // tukjaj je že notri premikanje
	
	COLOR = bg;
	COLOR.r = gradient(UV); // red kanal damo rezultat gradient funkcije 
	
	// množimo oz. združimo red channel z intensity in teksturo noisa
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10.0f, 0.0f, 1.0f); // klempam, da ne gre pod nulo in ne nad ena (ker je to barvni kanal)
	//	current color * intensity
	COLOR.r = floor(COLOR.r * layers) / layers; // floor ... zaokrožimo zato, ker ker je št. lejerja zmeraj cela številka ... delimo z lejerji, da je vsak lejer na 0.2 vrednosti
	COLOR.a = float(COLOR.r > 0.0f); // ?
	
	COLOR = colorize(COLOR.r, COLOR.a); // igranje z barvami
	
	
}"

[sub_resource type="ShaderMaterial" id=22]
shader = SubResource( 21 )
shader_param/intensity = 1.0
shader_param/layers = 4.0
shader_param/speed = 4.0

[sub_resource type="Shader" id=19]
code = "shader_type canvas_item;
render_mode blend_mix ;

uniform float intensity = 0.5f;
uniform float layers = 5.0f;
uniform float speed = 4.0f;

float gradient(vec2 uv){
	
	// čekiramo razdaljo od centra sprajta do koordinate trenutne pike
//	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f))); // nastane krog, ker je razdalja od centra konstantna
//	return (0.5f - distance(vec2(0.0f, uv.y), vec2(0.0f, 0.5f))); // gradient from top to bottom, focus middle
//	return (1.0f - distance(vec2(0.0f, uv.y), vec2(0.0f, 0.0f))); // gradient from top
	return (1.0f - distance(vec2(0.0f, uv.y), vec2(0.0f, 0.0f))); // gradient from bottom
}

vec4 colorize (float col, float a) {
	
	vec4 pallete;
	
//	// grayscale
//	pallete = vec4(col, col, col, a);  // col je podan red kanal

//	// monochrome
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.g = float(col >= 0.0f); // en kanal setamo, da je ves čas 0, razen ko je poln (? ... full je white?)
	
//	// darken vse kar ni belo
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.g = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.b = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
	
//	// raznobarvno
	pallete = vec4(col, col, col, a);  // col je podan red kanal
	pallete.r = float(col > 0.3 && col < 0.7 || col > 0.9); 
	pallete.g = float(col > 0.7); // višja vrednost od dveh ...?
	pallete.b = float(col > 0.5 || col > 0.9); // višja vrednost od dveh ...?
	
//	// ta bi bila za ščit
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.g = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.3); // višja vrednost od dveh ...?
	
	return pallete; // ta vrednost gre v barvo
}


void fragment(){
	vec4 bg = texture(TEXTURE, UV - TIME/speed); // tukjaj je že notri premikanje
	
	COLOR = bg;
	COLOR.r = gradient(UV); // red kanal damo rezultat gradient funkcije 
	
	// množimo oz. združimo red channel z intensity in teksturo noisa
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10.0f, 0.0f, 1.0f); // klempam, da ne gre pod nulo in ne nad ena (ker je to barvni kanal)
	//	current color * intensity
	COLOR.r = floor(COLOR.r * layers) / layers; // floor ... zaokrožimo zato, ker ker je št. lejerja zmeraj cela številka ... delimo z lejerji, da je vsak lejer na 0.2 vrednosti
	COLOR.a = float(COLOR.r > 0.0f); // ?
	
	COLOR = colorize(COLOR.r, COLOR.a); // igranje z barvami
	
	
}"

[sub_resource type="ShaderMaterial" id=20]
shader = SubResource( 19 )
shader_param/intensity = 1.0
shader_param/layers = 4.0
shader_param/speed = 4.0

[sub_resource type="Shader" id=107]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float max_line_width = 10.0;
uniform float min_line_width = 5.0;
uniform float freq = 1.0;
uniform float block_size = 20.0;
uniform vec4 starting_colour = vec4(0,0,0,1);
uniform vec4 ending_colour = vec4(1);

const float pi = 3.1415;
const int ang_res = 16;
const int grad_res = 8;

float hash(vec2 p, float s) {
	return fract(35.1 * sin(dot(vec3(112.3, 459.2, 753.2), vec3(p, s))));
}

float noise(vec2 p, float s) {
	vec2 d = vec2(0, 1);
	vec2 b = floor(p);
	vec2 f = fract(p);
	return mix(
		mix(hash(b + d.xx, s), hash(b + d.yx, s), f.x),
		mix(hash(b + d.xy, s), hash(b + d.yy, s), f.x), f.y);
}

float getLineWidth(vec2 p, float s) {
	p /= block_size;
	float w = 0.0;
	float intensity = 1.0;
	for (int i = 0; i < 3; i++) {
		w = mix(w, noise(p, s), intensity);
		p /= 2.0;
		intensity /= 2.0;
	}
	
	return mix(max_line_width, min_line_width, w);
}

bool pixelInRange(sampler2D text, vec2 uv, vec2 dist) {
	float alpha = 0.0;
	for (int i = 0; i < ang_res; i++) {
		float angle = 2.0 * pi * float(i) / float(ang_res);
		vec2 disp = dist * vec2(cos(angle), sin(angle));
		if (texture(text, uv + disp).a > 0.0) return true;
	}
	return false;
}

float getClosestDistance(sampler2D text, vec2 uv, vec2 maxDist) {
	if (!pixelInRange(text, uv, maxDist)) return -1.0;
	
	float hi = 1.0; float lo = 0.0;
	
	for (int i = 1; i <= grad_res; i++) {
		float curr = (hi + lo) / 2.0;
		if (pixelInRange(text, uv, curr * maxDist)) {
			hi = curr;
		}
		else {
			lo = curr;
		}
	}
	return hi;
	
}

void fragment() {
	float timeStep = floor(freq * TIME);
	vec2 scaledDist = TEXTURE_PIXEL_SIZE;
	scaledDist *= getLineWidth(UV / TEXTURE_PIXEL_SIZE, timeStep);
	float w = getClosestDistance(TEXTURE, UV, scaledDist);
	
	if (( w > 0.0) && (texture(TEXTURE, UV).a < 0.2)) {
		COLOR = mix(starting_colour, ending_colour, tanh(3.0*w));
	}
	else {
		COLOR = texture(TEXTURE, UV);
	}
	
}"

[sub_resource type="ShaderMaterial" id=97]
shader = SubResource( 107 )
shader_param/max_line_width = 10.0
shader_param/min_line_width = 4.0
shader_param/freq = 7.0
shader_param/block_size = 5.0
shader_param/starting_colour = Plane( 1, 0, 1, 1 )
shader_param/ending_colour = Plane( 1, 0, 1, 0 )

[sub_resource type="Shader" id=442]
code = "shader_type canvas_item;
render_mode blend_mix;


// KAJ DELA ŠEJDER?
// naredi drop shadow in jo zamaskira, tako, da je oritginal textura vidna
// shadow steps 1 da flat senco brez debeline ... več kot je korakov bolj debela je senca
// shadow_offset zamika senco, tako da dobimo občutek oddaljenosti od tal (če je nič, je objekt na tleh)

// UPGRADE?
// 3 barve za 3 različne nastavitve (višina in dvignjenost)
// razmerja pixel/texel

uniform vec4 shadow_color : hint_color = vec4(0.0, 1.0, 0.0, 1.0);
uniform int shadow_steps = 1; // debelina oz. dolžina sence ... je število duplikatov, ki so zamaknjeni za \"en\" pixel vsak
uniform float shadow_step_offset : hint_range(0, 10) = 1.0; // zamik posameznega koraka za en pixel
uniform float shadow_offset = 0.0; // zamik celotne sence ... 
uniform vec2 shadow_direction = vec2(-1,-1);

// dimenzija teksture za uskladitev texlov s pixli (1/texture original size)  
uniform float texture_width = 640.0;
uniform float texture_height = 360.0;


void fragment(){

	// preračun pravega offseta sence ... pixle konvertamo v texle
//	vec2 shadow_offset = vec2(shadow_direction.x / texture_width, shadow_direction.y / texture_height);
	
	vec2 size = TEXTURE_PIXEL_SIZE * shadow_step_offset;
	float shadow = 0.0;
	
	float stretch_factor = 0.0;
	float offset_x = shadow_offset * shadow_direction.x / 100.0; // z deljenjem dobimo bolj normalen slide
	float offset_y = shadow_offset * shadow_direction.y / 100.0;
	
	for (int i = 0; i < shadow_steps; i++) {
		stretch_factor += 1.0; // lahko bi uporabil \"i\" pa mi ne pusti
		shadow += texture(TEXTURE, UV + (size * shadow_direction * stretch_factor) + vec2(offset_x, offset_y)).a;
		
	}
	
	// ta vrstica maska senco, da je kao pod teksturo ... podobno kot step funkcij?
	shadow = min(shadow, 1.0);
	
	vec4 color = texture(TEXTURE, UV);
	COLOR = mix(color, shadow_color, shadow - color.a);
}
"

[sub_resource type="ShaderMaterial" id=443]
resource_local_to_scene = true
shader = SubResource( 442 )
shader_param/shadow_color = Color( 0, 0, 0, 0.321569 )
shader_param/shadow_steps = 1
shader_param/shadow_step_offset = 1.0
shader_param/shadow_offset = 0.0
shader_param/shadow_direction = Vector2( -1, -1 )
shader_param/texture_width = 640.0
shader_param/texture_height = 360.0

[sub_resource type="Shader" id=451]
code = "shader_type canvas_item;

uniform sampler2D emission_teture;
uniform vec4 glow_color : hint_color = vec4(1.0);

void fragment()
{
	vec4 current_color = texture(TEXTURE,UV); // what's our current sprite pixel
	vec4 emission_color = texture(emission_teture,UV); // what's our current emission pixel
	
	if(emission_color.r > 0.0f) // check if we're not black in the emission color.
	{
		COLOR = (emission_color + glow_color) // add brightness corrosponding with the emission pixel
	}
	else
	{
		COLOR = current_color; // we arent over an emission pixel leave alone
	}
}"

[sub_resource type="ShaderMaterial" id=452]
resource_local_to_scene = true
shader = SubResource( 451 )
shader_param/glow_color = Color( 1, 0, 0, 0.168627 )
shader_param/emission_teture = ExtResource( 6 )

[sub_resource type="Shader" id=431]
code = "

shader_type canvas_item;

uniform vec4 line_color : hint_color = vec4(1.0);
uniform float line_thickness : hint_range(0, 10) = 1.0;

const vec2 OFFSETS[8] = {
	vec2(-1, -1), vec2(-1, 0), vec2(-1, 1), vec2(0, -1), vec2(0, 1), 
	vec2(1, -1), vec2(1, 0), vec2(1, 1)
};

void fragment() {
	vec2 size = TEXTURE_PIXEL_SIZE * line_thickness;
	float outline = 1.0;
	
	for (int i = 0; i < OFFSETS.length(); i++) {
		outline *= texture(TEXTURE, UV + size * OFFSETS[i]).a;
	}
	outline = 1.0 - outline;
	
	vec4 color = texture(TEXTURE, UV);
	vec4 outlined_result = mix(color, line_color, outline * color.a);
	COLOR = mix(color, outlined_result, outlined_result.a);
}"

[sub_resource type="ShaderMaterial" id=432]
shader = SubResource( 431 )
shader_param/line_color = Color( 0.905882, 0, 0, 1 )
shader_param/line_thickness = 3.721

[sub_resource type="Shader" id=424]
code = "shader_type canvas_item;

uniform vec4 shadow_color : hint_color = vec4(1.0);
uniform float shadow_offset : hint_range(0, 10) = 1.0; // zamik celotne sence 
uniform float shadow_length : hint_range(0, 10) = 1.0; // debelina oz. dolžina sence ... je število duplikatov, ki so zamaknjeni za en pixel vsak
uniform float shadow_lenght_step : hint_range(0, 10) = 1.0; // ... ki so zamaknjeni za en step (offset od zgoraj)

uniform int hmmm  = 5;

const vec2 OFFSETS[8] = {
	vec2(-1, -1),
	vec2(-1, -1)*2.0,
	vec2(-1, -1)*3.0,
	vec2(-1, -1)*4.0,
	vec2(-1, -1)*5.0,
	vec2(-1, -1)*6.0,
	vec2(-1, -1)*7.0,
	vec2(-1, -1)*8.0
};

void fragment() {
	
	vec2 size = TEXTURE_PIXEL_SIZE * shadow_offset;
	float outline = 0.0;
	
	//
	
	for (int i = 0; i < hmmm; i++) {
		outline += texture(TEXTURE, UV + size * OFFSETS[i]).a;
	}
	
	// ta vrstica maska senco
	outline = min(outline, 1.0);
	
	vec4 color = texture(TEXTURE, UV);
	COLOR = mix(color, shadow_color, outline - color.a);
}
"

[sub_resource type="ShaderMaterial" id=425]
resource_local_to_scene = true
shader = SubResource( 424 )
shader_param/shadow_color = Color( 1, 1, 1, 1 )
shader_param/shadow_offset = 0.183
shader_param/shadow_length = 1.0
shader_param/shadow_lenght_step = 1.0
shader_param/hmmm = 6

[sub_resource type="Shader" id=447]
code = "shader_type canvas_item;

uniform sampler2D noise_texture;
uniform float intensity = 0.0f;
uniform float speed = 1.0f;

void fragment(){
	vec4 orig_texture = texture(TEXTURE,UV);
	vec4 noise = texture(noise_texture,UV - TIME / (1.0f + speed ));
	
	COLOR.a = clamp(orig_texture.r * noise.r * intensity, 0.0f, 1.0f); // vrednost klempamo med nič in ena
	COLOR.a = pow(COLOR.a, 2.0); // kvadratiramo, da so razlike bolj očitne
//	COLOR = noise;
	
	
	
	
	
	
	
}"

[sub_resource type="OpenSimplexNoise" id=449]

[sub_resource type="NoiseTexture" id=450]
width = 40
height = 40
seamless = true
noise = SubResource( 449 )

[sub_resource type="ShaderMaterial" id=448]
shader = SubResource( 447 )
shader_param/intensity = 1.214
shader_param/speed = 0.843
shader_param/noise_texture = SubResource( 450 )

[sub_resource type="Shader" id=82]
code = "shader_type canvas_item;


// TUDU
// glede na barvo sence se različno dobro obnaša ... popravi z normalizacijo in še čim
// dodaj dolžino sence
// ko poštimaš vse to, apliciraj več barnvo manipulacijo
// mogoče bo treba tudi izločat ozadje


uniform vec4 shadow_casting_color : hint_color = vec4(1.0, 0.0, 0.0, 1.0); // senčena barva
uniform vec4 shadow_color : hint_color = vec4(0.0, 0.0, 1.0, 1.0);
uniform vec4 shaded_background_color : hint_color = vec4(0.0, 0.0, 0.0, 0.0);

uniform float tolerance : hint_range (0.0, 10.0) = 10; // toleranca ujemanja original barve z offsetano

// če moramo izločati barvo ozadja
//uniform vec4 background_color : hint_color = vec4(0.0, 0.0, 0.0, 0.0); // apply color to texture with alpha 0.0

// shadow
uniform vec2 shadow_direction = vec2(-1.0, -1.0); // smer offseta ... to niso texli ampak pixli
uniform float cating_obj_altitude = 5.0; // količina offseta ... višina texture


// dimenzija teksture za uskladitev texlov s pixli (1/texture original size)  
uniform float texture_width = 640.0;
uniform float texture_height = 360.0;


void fragment(){
	
	// barva texture pred editiranjem
	vec4 original_color = texture(SCREEN_TEXTURE, SCREEN_UV);
	
	// zamik uvjev
	vec2 shadow_offset = vec2(shadow_direction.x / texture_width, shadow_direction.y / texture_height);
	vec2 uvs = SCREEN_UV + shadow_offset * cating_obj_altitude;
	
	
	
	// barva zamaknjene texture
	vec4 offset_color = texture(SCREEN_TEXTURE, uvs);
	
	// manipuliramo zamaknjeno texturo
	// senčeno barvo obarvamo v barvo sence
	if (offset_color == shadow_casting_color){
		offset_color = shadow_color;
		}
	// nesenčeno barvo obarvamo v barvo ozadja (ali alpha 0)
	else {
		offset_color = shaded_background_color;
	}
	
	// preverjamo ujemanje barvnih vektorjev original in zamaknjene barve
	float color_matching_dist = distance(original_color, offset_color);
	
	// barve zmiksamo v \"razmerju\" 1 ali 0 (ali/ali)
	// če se barvi ujemata (v našem primeru, kjer sta prisotni obe barvi), se prikaže druga barva
	// če se barvi ne ujemata (v našem primeru, kjer je prisotna le ena od barv), se prikaže prva barva
	// katera je \"spredaj\" urejaš z zaporedjem mešanja barv
	COLOR = mix(offset_color, original_color,  step(tolerance/10.0, color_matching_dist)); 
}

//temp {
//	float stretch_factor = 0.0;
//	float offset_x = shadow_offset * shadow_direction.x / 100.0; // z deljenjem dobimo bolj normalen slide
//	float offset_y = shadow_offset * shadow_direction.y / 100.0;
//
//	for (int i = 0; i < shadow_steps; i++) {
//		stretch_factor += 1.0;
//		shadow += texture(TEXTURE, UV + (size * shadow_direction * stretch_factor) + vec2(offset_x, offset_y)).a;
//
//	}
//}

//TEMP


//shader_type canvas_item;
//
//// trenutno dela samo na osnovno senco na eno barvo
//
//// TUDU
//// odreži senco tam kjer je tekstura prisotna
//// dodaj dolžino sence
//
//// barve
//uniform vec4 shadow_casting_color : hint_color = vec4(1.0, 0.0, 0.0, 1.0); // select color to regirster and manipulate
//uniform vec4 shadow_color : hint_color = vec4(0.0, 0.0, 1.0, 1.0);
//uniform vec4 shaded_background_color : hint_color = vec4(0.0, 0.0, 0.0, 0.0); // apply color to texture with alpha 0.0
//
//uniform float tolerance : hint_range (0.0, 2.0) = 0.5; // apply color to texture with alpha 0.0
//// če moramo izločati barvo ozadja
////uniform vec4 background_color : hint_color = vec4(0.0, 0.0, 0.0, 0.0); // apply color to texture with alpha 0.0
//
////uniform bool shade_all_colors = true; ... ne dela kot sem si predstavljal
//
//// shadow
//uniform vec2 shadow_direction = vec2(1.0, 1.0); // smer offseta ... to niso texli ampak pixli
//uniform float texture_altitude = 5.0; // količina offseta ... višina texture
//
//// dimenzija teksture za uskladitev texlov s pixli (1/texture original size)  
//uniform float texture_width = 640.0;
//uniform float texture_height = 360.0;
//
//
//void fragment(){
//
//	vec4 original_color = texture(SCREEN_TEXTURE, SCREEN_UV);
//
//	// offset color
//	vec2 shadow_offset = vec2(shadow_direction.x / texture_width, shadow_direction.y / texture_height);
//	vec2 uvs = SCREEN_UV + shadow_offset * texture_altitude;
//	vec4 offset_color = texture(SCREEN_TEXTURE, uvs);
//
//	// najprej podatke o dolžini barvnih vektorjev
//	float original_color_len = length(original_color.rgb);
//	float offset_color_len = length(offset_color.rgb);
//	// normaliziramo na fejk način, ker nas zanima samo smer barvnih vektorjev (dolžina me ne zanima ... v tem primeru)
//	vec3 original_color_norm = original_color.rgb / original_color_len * offset_color_len;
//	vec3 offset_color_norm = offset_color.rgb / original_color_len * offset_color_len;
//
//
//	// primerjamo vektor razdaljo med original in novo barvo, da slednjo lahko odrežemo
//	float color_matching_dist = distance(offset_color.rgb, original_color_norm);
//
//	// kjer je barva enaka barvi, ki daje senco
//	if (offset_color == shadow_casting_color){
////		color.rgb = shadow_color.rgb;
////		shadow_color.a = original_color.a;
//			offset_color = shadow_color;
//		}
//	// vse druge barve ostanejo kot so ... ali pa jim damo določeno barvo
//	else {
////		color = texture(SCREEN_TEXTURE, SCREEN_UV); // original barva in pozicija
//		offset_color = shaded_background_color;
//	}
//
//
//	COLOR.rgb = mix(offset_color.rgb, original_color_norm,  step(tolerance, color_matching_dist));
//	COLOR.a = offset_color.a;
////	COLOR = vec4(offset_color.rgb, original_color.a );
//
//
//}"

[sub_resource type="ShaderMaterial" id=83]
shader = SubResource( 82 )
shader_param/shadow_casting_color = Color( 0, 1, 1, 1 )
shader_param/shadow_color = Color( 0, 0, 0, 1 )
shader_param/shaded_background_color = Color( 0, 0, 0, 0 )
shader_param/tolerance = 10.0
shader_param/shadow_direction = Vector2( -1, 0 )
shader_param/cating_obj_altitude = 5.0
shader_param/texture_width = 640.0
shader_param/texture_height = 360.0

[sub_resource type="Shader" id=429]
code = "shader_type canvas_item;


// TUDU
// glede na barvo sence se različno dobro obnaša ... popravi z normalizacijo in še čim
// dodaj dolžino sence
// ko poštimaš vse to, apliciraj več barnvo manipulacijo
// mogoče bo treba tudi izločat ozadje


uniform vec4 shadow_casting_color : hint_color = vec4(1.0, 0.0, 0.0, 1.0); // senčena barva
uniform vec4 shadow_color : hint_color = vec4(0.0, 0.0, 1.0, 1.0);
uniform vec4 shaded_background_color : hint_color = vec4(0.0, 0.0, 0.0, 0.0);

uniform float tolerance : hint_range (0.0, 20.0) = 10; // toleranca ujemanja original barve z offsetano


// raztegovalec vsega skupaj
uniform float shadow_dir = -1;
uniform vec2 shadow_direction = vec2(-1.0, -1.0); // smer offseta ... to niso texli ampak pixli

// zamik sence
uniform float zamik_celotne_sence = 0.0;



// dimenzija teksture za uskladitev texlov s pixli (1/texture original size)  
uniform float screen_width = 640.0;
uniform float screen_height = 360.0;

uniform int steps = 1; // število korakov
//uniform float step_width = 0.5; // dolžina koraka
uniform	float stretch_factor = 1.0;
 

void fragment(){
	
	// barva texture pred editiranjem
	vec4 original_color = texture(SCREEN_TEXTURE, SCREEN_UV);
	
	float stretch = 0.0;
	vec4 offset_color; // barva zamaknjene texture
	vec4 single_step_final_color;
	float color_matching_dist;
	
//	vse skupaj zapakiramo v lupanje
	for (int i = 0; i < 5; i++) {
		
		stretch += 2.0;
		
		// zamik uvjev
		vec2 shadow_offset = vec2(shadow_dir / screen_width, shadow_dir / screen_height);
		vec2 uvs = SCREEN_UV + shadow_offset * stretch;
//		vec2 uvs = SCREEN_UV + (shadow_offset * shadow_width * stretch_factor);
		
		// barva zamaknjene texture
		offset_color += texture(SCREEN_TEXTURE, uvs + vec2(zamik_celotne_sence));
	
//			shadow += texture(TEXTURE, UV + (size * shadow_direction * stretch_factor) + vec2(offset_x, offset_y)).a;
		
		// manipuliramo zamaknjeno texturo
		if (offset_color == shadow_casting_color){
			offset_color = shadow_color;
			}
		else {
//			offset_color.a = 0.0;
			offset_color = shaded_background_color;
		}
//		vec4 outlined_result = mix(color, line_color, );
//		COLOR = mix(color, outlined_result, outlined_result.a);
		
		// rezanje sence
		// preverjamo ujemanje barvnih vektorjev original in zamaknjene barve
//		color_matching_dist = distance(original_color, offset_color);
//		single_step_final_color = mix(offset_color, original_color,  step(tolerance/10.0, color_matching_dist)); 
//		single_step_final_color = mix(original_color, offset_color, offset_color * original_color.a); 
		single_step_final_color += offset_color; 
	}
	
	
//	COLOR = mix(single_step_final_color, original_color,  step(tolerance/10.0, color_matching_dist));  
	if (original_color == shadow_casting_color){
		COLOR =  original_color; 
		}
	else{
		
		COLOR =  single_step_final_color; 
		
	}
	
	// barve zmiksamo v \"razmerju\" 1 ali 0 (ali/ali)
	// če se barvi ujemata (v našem primeru, kjer sta prisotni obe barvi), se prikaže druga barva
	// če se barvi ne ujemata (v našem primeru, kjer je prisotna le ena od barv), se prikaže prva barva
	// katera je \"spredaj\" urejaš z zaporedjem mešanja barv
//	COLOR = vec4(offset_color);	
	
}

//temp {
//	float stretch_factor = 0.0;
//	float offset_x = shadow_offset * shadow_direction.x / 100.0; // z deljenjem dobimo bolj normalen slide
//	float offset_y = shadow_offset * shadow_direction.y / 100.0;
//
//	for (int i = 0; i < shadow_steps; i++) {
//		stretch_factor += 1.0;
//		shadow += texture(TEXTURE, UV + (size * shadow_direction * stretch_factor) + vec2(offset_x, offset_y)).a;
//
//	}
//}

//TEMP


//shader_type canvas_item;
//
//// trenutno dela samo na osnovno senco na eno barvo
//
//// TUDU
//// odreži senco tam kjer je tekstura prisotna
//// dodaj dolžino sence
//
//// barve
//uniform vec4 shadow_casting_color : hint_color = vec4(1.0, 0.0, 0.0, 1.0); // select color to regirster and manipulate
//uniform vec4 shadow_color : hint_color = vec4(0.0, 0.0, 1.0, 1.0);
//uniform vec4 shaded_background_color : hint_color = vec4(0.0, 0.0, 0.0, 0.0); // apply color to texture with alpha 0.0
//
//uniform float tolerance : hint_range (0.0, 2.0) = 0.5; // apply color to texture with alpha 0.0
//// če moramo izločati barvo ozadja
////uniform vec4 background_color : hint_color = vec4(0.0, 0.0, 0.0, 0.0); // apply color to texture with alpha 0.0
//
////uniform bool shade_all_colors = true; ... ne dela kot sem si predstavljal
//
//// shadow
//uniform vec2 shadow_direction = vec2(1.0, 1.0); // smer offseta ... to niso texli ampak pixli
//uniform float texture_altitude = 5.0; // količina offseta ... višina texture
//
//// dimenzija teksture za uskladitev texlov s pixli (1/texture original size)  
//uniform float texture_width = 640.0;
//uniform float texture_height = 360.0;
//
//
//void fragment(){
//
//	vec4 original_color = texture(SCREEN_TEXTURE, SCREEN_UV);
//
//	// offset color
//	vec2 shadow_offset = vec2(shadow_direction.x / texture_width, shadow_direction.y / texture_height);
//	vec2 uvs = SCREEN_UV + shadow_offset * texture_altitude;
//	vec4 offset_color = texture(SCREEN_TEXTURE, uvs);
//
//	// najprej podatke o dolžini barvnih vektorjev
//	float original_color_len = length(original_color.rgb);
//	float offset_color_len = length(offset_color.rgb);
//	// normaliziramo na fejk način, ker nas zanima samo smer barvnih vektorjev (dolžina me ne zanima ... v tem primeru)
//	vec3 original_color_norm = original_color.rgb / original_color_len * offset_color_len;
//	vec3 offset_color_norm = offset_color.rgb / original_color_len * offset_color_len;
//
//
//	// primerjamo vektor razdaljo med original in novo barvo, da slednjo lahko odrežemo
//	float color_matching_dist = distance(offset_color.rgb, original_color_norm);
//
//	// kjer je barva enaka barvi, ki daje senco
//	if (offset_color == shadow_casting_color){
////		color.rgb = shadow_color.rgb;
////		shadow_color.a = original_color.a;
//			offset_color = shadow_color;
//		}
//	// vse druge barve ostanejo kot so ... ali pa jim damo določeno barvo
//	else {
////		color = texture(SCREEN_TEXTURE, SCREEN_UV); // original barva in pozicija
//		offset_color = shaded_background_color;
//	}
//
//
//	COLOR.rgb = mix(offset_color.rgb, original_color_norm,  step(tolerance, color_matching_dist));
//	COLOR.a = offset_color.a;
////	COLOR = vec4(offset_color.rgb, original_color.a );
//
//
//}"

[sub_resource type="ShaderMaterial" id=430]
shader = SubResource( 429 )
shader_param/shadow_casting_color = Color( 0, 0, 0, 1 )
shader_param/shadow_color = Color( 0, 0.231373, 1, 1 )
shader_param/shaded_background_color = Color( 0, 0, 0, 0 )
shader_param/tolerance = 10.0
shader_param/shadow_dir = -1.672
shader_param/shadow_direction = Vector2( -1, -1 )
shader_param/zamik_celotne_sence = -0.019
shader_param/screen_width = 640.0
shader_param/screen_height = 360.0
shader_param/steps = 1
shader_param/stretch_factor = 1.0

[sub_resource type="Shader" id=439]
code = "shader_type canvas_item;


// KAJ ŠEJDER DELA?
// v prvem koraku naredi senco, jo zamakne ... potem jo izreže, da ne prekriva original barve 
// n-krat se kopira prvi korak, z vsako kopijo se poveča foktor zamika
// senca je tako zmeraj večja (barve se prekrivajo in na čuden način mešajo transparenco)
// po vseh kopiranjih na celotno nastalo senco ponovno apliciramo željeno barvo sence
// končno barvo senčenega objekta ali ozadja lahko poljubno nastavimo

uniform vec4 shadow_casting_color: hint_color = vec4(1.0, 0.0, 0.0, 1.0); // senčena barva
uniform vec4 new_shadow_casting_color: hint_color = vec4(1.0, 1.0, 0.0, 1.0);
//uniform vec4 shadow_receiving_color: hint_color = vec4(1.0, 1.0, 0.0, 1.0); // barva, ki sprejema senco ... trenutno ni v uporabi
uniform vec4 new_shadow_receiving_color: hint_color = vec4(0.0, 0.0, 0.0, 0.0);
uniform vec4 shadow_color: hint_color = vec4(0.0, 0.0, 0.0, 0.5);

uniform bool switch_cast_and_receive = false;

uniform float shadow_rotation_deg: hint_range(0.0, 360.0) = 0; // rotacija v stopinjah
uniform float shadow_distance_px: hint_range(0.0, 640.0) = 0.0; // imitacija višine z odmikom celotne sence od senčenega objekta

uniform int offset_steps = 5; // število korakov ... imitira dolžino sence
uniform float step_offset_px: hint_range(0.0, 1.0) = 1.0; // offset per step v pixlih

//uniform vec2 screen_size = vec2(640.0, 360.0);

// height manipul
uniform float shadow_dist_factor: hint_range(0.0, 100.0) = 1.0;
uniform vec4 test_color: hint_color = vec4(1.0, 0.0, 0.0, 1.0);

void fragment(){
	
//	vec4 new_shadow_receiving_color = vec4(0.0, 0.0, 0.0, 0.0); // ne dela ... tukaj samo za to, ker sem jo umaknil od zgoraj
	
	vec2 screen_size = vec2(640.0, 360.0);

	vec4 original_color = texture(SCREEN_TEXTURE, SCREEN_UV); // textura pred editiranjem
	vec4 step_offset_color; // zamik teksture na korak
	vec4 offset_color; // barva vsek korakov skupaj
	
	float shadow_rotation_rad = radians(shadow_rotation_deg);
	float step_pixel_offset_y = cos(shadow_rotation_rad) * step_offset_px;
	float step_pixel_offset_x = sin(shadow_rotation_rad) * step_offset_px;
	
	float step_count = 0.0;
	
	// preverjanje value
	vec4 original_color_lightness; // v to barvo zajamemo sivi klin original teksture
	int inside_offset_steps = 5; // _temp
	
	// monokromiramo original texturo ... vsi trije kanali dobijo isto barvo
	original_color_lightness.rgb = vec3(original_color.r + original_color.g + original_color.b)/3.0;
	original_color_lightness.a = original_color.a;
//	float shadow_dist_light = original_color_lightness.r;
	
	
	// multiplikacija sence
	for (int i = 0; i < inside_offset_steps; i++) {

		step_count += 1.0; // štejemo korake ... pusti na ena

		// zamik texture v smeri (preračun texlov v pixle) ... z vsakim korakom se prišteje zamik-na-korak
		vec2 uvs = SCREEN_UV + step_count * vec2(step_pixel_offset_x / screen_size.x, step_pixel_offset_y / screen_size.y) * -1.0; 
		// opredelimo zamik cele teksture
		vec2 shadow_distance = vec2(step_pixel_offset_x * shadow_distance_px / screen_size.x, step_pixel_offset_y * shadow_distance_px / screen_size.y) * -1.0;
		// opredelimo barvo zamaknjene teksture in jo premaknemo še za željeno oddaljenost teksture (preračunano v pixle)
		step_offset_color = texture(SCREEN_TEXTURE, uvs + shadow_distance); 
		
		
		// ni switchano
		if (switch_cast_and_receive != true){
			// kjer je zamaknjena senčena barva, damo barvo sence
			if (step_offset_color == shadow_casting_color){
				step_offset_color = vec4(0.0, 0.0, 0.0, 1.0);
			}
			else {
				step_offset_color.a = 0.0;
			}
		}
		// switchano ... enaka koda samo drug pogoj negiramo
		else if (switch_cast_and_receive == true) {
			
//			// TEST
//
			vec2 test_offset = vec2(-0.5,-0.000);
			
			if (step_offset_color == test_color){
				step_offset_color = vec4(0.0, 0.0, 1.0, 0.0); 
				
//				step_offset_color = texture(SCREEN_TEXTURE, uvs+ shadow_distance + test_offset); 
			}
//			else if (step_offset_color == test_color){
//				step_offset_color = texture(SCREEN_TEXTURE, uvs + shadow_distance + test_offset); 
//			}
			
//			// senco povzorča barva, ki jo v originalu sprejema  
			else if (step_offset_color != shadow_casting_color && step_offset_color != test_color){ // && step_offset_color == test_color){

				// koda pred testiranjem svetlosti
//				step_offset_color = texture(SCREEN_TEXTURE, uvs + shadow_distance );
				step_offset_color = vec4(0.0, 0.0, 1.0, 0.1); 
			}
			else if (step_offset_color == shadow_casting_color){

				step_offset_color.a = 0.0;
			}	
			
			
//			if (step_offset_color != shadow_casting_color){
//
//				// test zaznavanja svetlosti
//				if (step_offset_color == test_color)
//				{
//					step_offset_color = vec4(0.0, 0.0, 1.0, 0.0);
//				}
//				else {
//					step_offset_color = vec4(0.0, 0.0, 1.0, 1.0);
//				}
//			}
//			else {
//
//				step_offset_color.a = 0.0;
//			}	
//
		}
			
//			-----------------------------------------------------------------------------------------------------

//			// PRED TESTOM
//			// senco povzorča barva, ki jo v originalu sprejema  
//			if (step_offset_color != shadow_casting_color){
//
//				// koda pred testiranjem svetlosti
//				step_offset_color = vec4(0.0, 0.0, 1.0, 0.1); 
//				// alfa vidno vpliva, barva pa ne, ker kasneje prelijemo s končno barvo sence
//				// alfa je 0 ali 1, ker je v pogoju spodej, da ko ni nič daj barvo sence
//			}
//			else {
//
//				step_offset_color.a = 0.0;
//			}	
//		}
//			// ... PRED TESTOM
			

		// dodajanje teksture korakov v skupno teksturo
		offset_color += step_offset_color; // barve se čudno mešajo ... zato dodam pravo barvo sence kasneje
	}




	// ni switchano
	if (switch_cast_and_receive != true){
		// kjer je original barva enaka senčeni barvi, damo original barvo 
		if (original_color == shadow_casting_color){
			COLOR =  new_shadow_casting_color; // ... nima vpliva
			}
		// kjer skupna zamaknjena tekstura NI transparentna, damo željeno barvo sence 
		else if (offset_color.a > 0.0){
			COLOR = mix(new_shadow_receiving_color, shadow_color , shadow_color.a);
		}
		// kjer skupna zamaknjena tekstura JE transparentna, damo damo željeno barvo ozdja
		else{
			COLOR = new_shadow_receiving_color; 
		}
	}
	// switchano ... enaka koda samo drug pogoj negiramo
	else if (switch_cast_and_receive == true){
		if (original_color != shadow_casting_color){
			
			// test zaznavanja svetlosti
//			if (original_color = vec4(1.0))
//			{
//				COLOR = vec4(0.0, 1.0, 1.0, 1.0);
//			}
//			else {
//				// original barva
//				COLOR =  original_color;
//
//				// monokromirana barva
//	//			COLOR =  original_color_lightness;
//
//				// meša barvi gleda na prosojnost ... to pomeni, da je monochrome preliv tudi zvezno apliciran
//				// step funkcija omogoča, da je monchrome preliv neviden samo na koncu, ko nova barva ni več prosojna
//	//			COLOR =  mix(original_color, new_shadow_casting_color, new_shadow_casting_color.a);
//	//			COLOR = original_color_lightness + new_shadow_casting_color;
//			}
			COLOR =  original_color;
		}
			
		// kjer je offsetana vreča barv netransparenta 	
		else if (offset_color.a > 0.0){
			
//			COLOR = offset_color; // _temp
			 
			COLOR = mix(new_shadow_receiving_color, shadow_color, shadow_color.a); 
			// meša barvi gleda na prosojnost ... prosojnost 
		}	
		else{
			COLOR = new_shadow_receiving_color; 
		}		

	}
}
"

[sub_resource type="ShaderMaterial" id=440]
shader = SubResource( 439 )
shader_param/shadow_casting_color = Color( 0, 0, 0, 1 )
shader_param/new_shadow_casting_color = Color( 1, 1, 0, 0 )
shader_param/new_shadow_receiving_color = Color( 0.831373, 0.831373, 0.831373, 1 )
shader_param/shadow_color = Color( 0.827451, 0, 1, 1 )
shader_param/switch_cast_and_receive = true
shader_param/shadow_rotation_deg = 0.0
shader_param/shadow_distance_px = 0.0
shader_param/offset_steps = 5
shader_param/step_offset_px = 1.0
shader_param/shadow_dist_factor = 1.0
shader_param/test_color = Color( 1, 0, 0, 1 )

[sub_resource type="Shader" id=437]
code = "shader_type canvas_item;


// TUDU
// glede na barvo sence se različno dobro obnaša ... popravi z normalizacijo in še čim
// dodaj dolžino sence
// ko poštimaš vse to, apliciraj več barnvo manipulacijo
// mogoče bo treba tudi izločat ozadje


uniform vec4 shadow_casting_color : hint_color = vec4(1.0, 0.0, 0.0, 1.0); // senčena barva
uniform vec4 shadow_color : hint_color = vec4(0.0, 0.0, 1.0, 1.0);
uniform vec4 shaded_background_color : hint_color = vec4(0.0, 0.0, 0.0, 0.0);

uniform float tolerance : hint_range (0.0, 20.0) = 10; // toleranca ujemanja original barve z offsetano


// raztegovalec vsega skupaj
uniform float shadow_dir = -1;
uniform vec2 shadow_direction = vec2(-1.0, -1.0); // smer offseta ... to niso texli ampak pixli

// zamik sence
uniform float zamik_celotne_sence = 0.0;



// dimenzija teksture za uskladitev texlov s pixli (1/texture original size)  
uniform float screen_width = 640.0;
uniform float screen_height = 360.0;

uniform int steps = 1; // število korakov
//uniform float step_width = 0.5; // dolžina koraka
uniform	float stretch_factor = 1.0;
 

void fragment(){
	
	// barva texture pred editiranjem
	vec4 original_color = texture(SCREEN_TEXTURE, SCREEN_UV);
	
	float stretch = 0.0;
	vec4 offset_color; // barva zamaknjene texture
	vec4 single_step_final_color;
	float color_matching_dist;
	
//	vse skupaj zapakiramo v lupanje
	for (int i = 0; i < 5; i++) {
		
		stretch += 2.0;
		
		// zamik uvjev
		vec2 shadow_offset = vec2(shadow_dir / screen_width, shadow_dir / screen_height);
		vec2 uvs = SCREEN_UV + shadow_offset * stretch;
//		vec2 uvs = SCREEN_UV + (shadow_offset * shadow_width * stretch_factor);
		
		// barva zamaknjene texture
		offset_color += texture(SCREEN_TEXTURE, uvs + vec2(zamik_celotne_sence));
	
//			shadow += texture(TEXTURE, UV + (size * shadow_direction * stretch_factor) + vec2(offset_x, offset_y)).a;
		
		// manipuliramo zamaknjeno texturo
		if (offset_color == shadow_casting_color){
			offset_color = shadow_color;
			}
		else {
//			offset_color.a = 0.0;
			offset_color = shaded_background_color;
		}
//		vec4 outlined_result = mix(color, line_color, );
//		COLOR = mix(color, outlined_result, outlined_result.a);
		
		// rezanje sence
		// preverjamo ujemanje barvnih vektorjev original in zamaknjene barve
//		color_matching_dist = distance(original_color, offset_color);
//		single_step_final_color = mix(offset_color, original_color,  step(tolerance/10.0, color_matching_dist)); 
//		single_step_final_color = mix(original_color, offset_color, offset_color * original_color.a); 
		single_step_final_color += offset_color; 
	}
	
	
//	COLOR = mix(single_step_final_color, original_color,  step(tolerance/10.0, color_matching_dist));  
	if (original_color == shadow_casting_color){
		COLOR =  original_color; 
		}
	else{
		
		COLOR =  single_step_final_color; 
		
	}
	
	// barve zmiksamo v \"razmerju\" 1 ali 0 (ali/ali)
	// če se barvi ujemata (v našem primeru, kjer sta prisotni obe barvi), se prikaže druga barva
	// če se barvi ne ujemata (v našem primeru, kjer je prisotna le ena od barv), se prikaže prva barva
	// katera je \"spredaj\" urejaš z zaporedjem mešanja barv
//	COLOR = vec4(offset_color);	
	
}

//temp {
//	float stretch_factor = 0.0;
//	float offset_x = shadow_offset * shadow_direction.x / 100.0; // z deljenjem dobimo bolj normalen slide
//	float offset_y = shadow_offset * shadow_direction.y / 100.0;
//
//	for (int i = 0; i < shadow_steps; i++) {
//		stretch_factor += 1.0;
//		shadow += texture(TEXTURE, UV + (size * shadow_direction * stretch_factor) + vec2(offset_x, offset_y)).a;
//
//	}
//}

//TEMP


//shader_type canvas_item;
//
//// trenutno dela samo na osnovno senco na eno barvo
//
//// TUDU
//// odreži senco tam kjer je tekstura prisotna
//// dodaj dolžino sence
//
//// barve
//uniform vec4 shadow_casting_color : hint_color = vec4(1.0, 0.0, 0.0, 1.0); // select color to regirster and manipulate
//uniform vec4 shadow_color : hint_color = vec4(0.0, 0.0, 1.0, 1.0);
//uniform vec4 shaded_background_color : hint_color = vec4(0.0, 0.0, 0.0, 0.0); // apply color to texture with alpha 0.0
//
//uniform float tolerance : hint_range (0.0, 2.0) = 0.5; // apply color to texture with alpha 0.0
//// če moramo izločati barvo ozadja
////uniform vec4 background_color : hint_color = vec4(0.0, 0.0, 0.0, 0.0); // apply color to texture with alpha 0.0
//
////uniform bool shade_all_colors = true; ... ne dela kot sem si predstavljal
//
//// shadow
//uniform vec2 shadow_direction = vec2(1.0, 1.0); // smer offseta ... to niso texli ampak pixli
//uniform float texture_altitude = 5.0; // količina offseta ... višina texture
//
//// dimenzija teksture za uskladitev texlov s pixli (1/texture original size)  
//uniform float texture_width = 640.0;
//uniform float texture_height = 360.0;
//
//
//void fragment(){
//
//	vec4 original_color = texture(SCREEN_TEXTURE, SCREEN_UV);
//
//	// offset color
//	vec2 shadow_offset = vec2(shadow_direction.x / texture_width, shadow_direction.y / texture_height);
//	vec2 uvs = SCREEN_UV + shadow_offset * texture_altitude;
//	vec4 offset_color = texture(SCREEN_TEXTURE, uvs);
//
//	// najprej podatke o dolžini barvnih vektorjev
//	float original_color_len = length(original_color.rgb);
//	float offset_color_len = length(offset_color.rgb);
//	// normaliziramo na fejk način, ker nas zanima samo smer barvnih vektorjev (dolžina me ne zanima ... v tem primeru)
//	vec3 original_color_norm = original_color.rgb / original_color_len * offset_color_len;
//	vec3 offset_color_norm = offset_color.rgb / original_color_len * offset_color_len;
//
//
//	// primerjamo vektor razdaljo med original in novo barvo, da slednjo lahko odrežemo
//	float color_matching_dist = distance(offset_color.rgb, original_color_norm);
//
//	// kjer je barva enaka barvi, ki daje senco
//	if (offset_color == shadow_casting_color){
////		color.rgb = shadow_color.rgb;
////		shadow_color.a = original_color.a;
//			offset_color = shadow_color;
//		}
//	// vse druge barve ostanejo kot so ... ali pa jim damo določeno barvo
//	else {
////		color = texture(SCREEN_TEXTURE, SCREEN_UV); // original barva in pozicija
//		offset_color = shaded_background_color;
//	}
//
//
//	COLOR.rgb = mix(offset_color.rgb, original_color_norm,  step(tolerance, color_matching_dist));
//	COLOR.a = offset_color.a;
////	COLOR = vec4(offset_color.rgb, original_color.a );
//
//
//}"

[sub_resource type="ShaderMaterial" id=438]
shader = SubResource( 437 )
shader_param/shadow_casting_color = Color( 0, 0, 0, 1 )
shader_param/shadow_color = Color( 0, 0.231373, 1, 1 )
shader_param/shaded_background_color = Color( 0, 0, 0, 0 )
shader_param/tolerance = 10.0
shader_param/shadow_dir = -1.672
shader_param/shadow_direction = Vector2( -1, -1 )
shader_param/zamik_celotne_sence = -0.019
shader_param/screen_width = 640.0
shader_param/screen_height = 360.0
shader_param/steps = 1
shader_param/stretch_factor = 1.0

[sub_resource type="Environment" id=446]
background_canvas_max_layer = 3
glow_enabled = true
glow_levels/1 = true
glow_levels/2 = true
glow_levels/4 = true
glow_levels/6 = true
glow_levels/7 = true
glow_intensity = 0.62
glow_strength = 1.05
glow_hdr_threshold = 0.0
glow_hdr_scale = 0.8
adjustment_brightness = 0.64

[node name="Arena" type="Node2D"]
script = ExtResource( 1 )
__meta__ = {
"_edit_horizontal_guides_": [ -64.0 ]
}

[node name="BackgroundLayer Z0" type="CanvasLayer" parent="."]
layer = -1
script = ExtResource( 17 )

[node name="Background" type="Node2D" parent="BackgroundLayer Z0"]

[node name="ColorRect" type="ColorRect" parent="BackgroundLayer Z0/Background"]
margin_right = 640.0
margin_bottom = 360.0
rect_min_size = Vector2( 640, 360 )
color = Color( 0.188235, 0.188235, 0.188235, 1 )

[node name="Woda" type="ColorRect" parent="BackgroundLayer Z0/Background"]
visible = false
modulate = Color( 1, 1, 1, 0.0509804 )
material = SubResource( 114 )
margin_right = 640.0
margin_bottom = 360.0
rect_min_size = Vector2( 640, 360 )

[node name="Light2D" type="Light2D" parent="BackgroundLayer Z0/Background"]
visible = false
position = Vector2( 320.5, 181 )
scale = Vector2( 1.95988, 1.10416 )
z_index = 1
texture = ExtResource( 5 )
texture_scale = 3.3
color = Color( 1, 1, 0.388235, 1 )

[node name="EffectsLayer Z1" type="CanvasLayer" parent="."]
script = ExtResource( 18 )

[node name="Shadows" type="Sprite" parent="EffectsLayer Z1"]
modulate = Color( 1, 1, 1, 0.752941 )
material = SubResource( 88 )
texture = SubResource( 92 )
centered = false
flip_v = true

[node name="Colors" type="Sprite" parent="EffectsLayer Z1"]
modulate = Color( 1, 1, 1, 0.752941 )
material = SubResource( 86 )
texture = SubResource( 93 )
centered = false
flip_v = true

[node name="Viewport" type="Viewport" parent="EffectsLayer Z1"]
size = Vector2( 640, 360 )
own_world = true
transparent_bg = true
hdr = false
usage = 0

[node name="Effects" type="Node2D" parent="EffectsLayer Z1/Viewport"]
script = ExtResource( 9 )

[node name="BodiesLayer Z2" type="CanvasLayer" parent="."]
layer = 2
visible = false
script = ExtResource( 8 )

[node name="Player" parent="BodiesLayer Z2" instance=ExtResource( 2 )]
position = Vector2( 73, 126 )
bounce_size = 0.547

[node name="Disabled Plejer" parent="BodiesLayer Z2" instance=ExtResource( 2 )]
position = Vector2( 441, 126 )
player_name = "P2"
inputs_enabled = false

[node name="AnimationPlayer" parent="BodiesLayer Z2/Disabled Plejer" index="5"]
anims/shield_on = SubResource( 112 )

[node name="FejkPlejer" type="KinematicBody2D" parent="BodiesLayer Z2"]
position = Vector2( 521, 190 )
motion/sync_to_physics = true
script = ExtResource( 13 )

[node name="CollisionPolygon2D" type="CollisionPolygon2D" parent="BodiesLayer Z2/FejkPlejer"]
position = Vector2( 0, 0.5 )
rotation = 1.57079
polygon = PoolVector2Array( -1.99997, -4.00001, -5, -3.13719e-05, -5.00001, 1.99997, -4.00002, 2.99997, 2.99998, 3.00002, 3.99999, 2.00003, 4, 2.50975e-05, 1.00003, -3.99999 )

[node name="Bolt" type="Sprite" parent="BodiesLayer Z2/FejkPlejer"]
position = Vector2( 0, 0.5 )
rotation = 1.5708
texture = ExtResource( 7 )

[node name="Shadows2" type="ColorRect" parent="BodiesLayer Z2"]
visible = false
material = SubResource( 445 )
margin_right = 640.0
margin_bottom = 360.0
rect_min_size = Vector2( 640, 360 )

[node name="Shadows_old" type="ColorRect" parent="BodiesLayer Z2"]
visible = false
material = SubResource( 63 )
margin_right = 640.0
margin_bottom = 360.0
rect_min_size = Vector2( 640, 360 )

[node name="Colors" type="ColorRect" parent="BodiesLayer Z2"]
visible = false
material = SubResource( 16 )
margin_right = 640.0
margin_bottom = 360.0
rect_min_size = Vector2( 640, 360 )

[node name="LevelLayer Z3" type="CanvasLayer" parent="."]
layer = 3
script = ExtResource( 15 )

[node name="Level_00" type="Node2D" parent="LevelLayer Z3"]
z_index = -1

[node name="ArenaTilemap" type="TileMap" parent="LevelLayer Z3/Level_00"]
material = SubResource( 421 )
tile_set = SubResource( 108 )
cell_size = Vector2( 8, 8 )
format = 1
tile_data = PoolIntArray( -720901, 0, 65553, -327684, 0, 65536, -327683, 0, 65537, -327682, 0, 65537, -327681, 0, 65537, -393216, 0, 65537, -393215, 0, 65537, -393214, 0, 65537, -393213, 0, 65537, -393212, 0, 65537, -393211, 0, 65537, -393210, 0, 65537, -393209, 0, 65537, -393208, 0, 65537, -393207, 0, 65537, -393206, 0, 65537, -393205, 0, 65537, -393204, 0, 65537, -393203, 0, 65537, -393202, 0, 65537, -393201, 0, 65537, -393200, 0, 65537, -393199, 0, 65537, -393198, 0, 65537, -393197, 0, 65537, -393196, 0, 65537, -393195, 0, 65537, -393194, 0, 65537, -393193, 0, 65537, -393192, 0, 65537, -393191, 0, 65537, -393190, 0, 65537, -393189, 0, 65537, -393188, 0, 65537, -393187, 0, 65537, -393186, 0, 65537, -393185, 0, 65537, -393184, 0, 65537, -393183, 0, 65537, -393182, 0, 65537, -393181, 0, 65537, -393180, 0, 65537, -393179, 0, 65537, -393178, 0, 65537, -393177, 0, 1048587, -393145, 0, 1048586, -393144, 0, 1048587, -262148, 0, 131072, -262147, 0, 131073, -262146, 0, 131073, -262145, 0, 131073, -327680, 0, 131073, -327679, 0, 131073, -327678, 0, 131073, -327677, 0, 131073, -327676, 0, 131073, -327675, 0, 131073, -327674, 0, 131073, -327673, 0, 131073, -327672, 0, 131073, -327671, 0, 131073, -327670, 0, 131073, -327669, 0, 131073, -327668, 0, 131073, -327667, 0, 131073, -327666, 0, 131073, -327665, 0, 131073, -327664, 0, 131073, -327663, 0, 131073, -327662, 0, 131073, -327661, 0, 131073, -327660, 0, 131073, -327659, 0, 131073, -327658, 0, 131073, -327657, 0, 131073, -327656, 0, 131073, -327655, 0, 131073, -327654, 0, 131073, -327653, 0, 131073, -327652, 0, 131073, -327651, 0, 131073, -327650, 0, 131073, -327649, 0, 131073, -327648, 0, 131073, -327647, 0, 131073, -327646, 0, 131073, -327645, 0, 131073, -327644, 0, 131073, -327643, 0, 131073, -327642, 0, 131073, -327641, 0, 131073, -327640, 0, 655362, -327639, 0, 65537, -327638, 0, 65537, -327637, 0, 65537, -327636, 0, 65537, -327635, 0, 65537, -327634, 0, 65537, -327633, 0, 65537, -327632, 0, 65537, -327631, 0, 65537, -327630, 0, 65537, -327629, 0, 65537, -327628, 0, 65537, -327627, 0, 65537, -327626, 0, 65537, -327625, 0, 65537, -327624, 0, 65537, -327623, 0, 65537, -327622, 0, 65537, -327621, 0, 65537, -327620, 0, 65537, -327619, 0, 65537, -327618, 0, 65537, -327617, 0, 65537, -327616, 0, 65537, -327615, 0, 65537, -327614, 0, 65537, -327613, 0, 65537, -327612, 0, 65537, -327611, 0, 65537, -327610, 0, 655364, -327609, 0, 131073, -327608, 0, 131073, -327607, 0, 655362, -327606, 0, 65537, -327605, 0, 1048587, -196612, 0, 131072, -196611, 0, 131073, -196610, 0, 131073, -196609, 0, 131073, -262144, 0, 131073, -262143, 0, 131073, -262142, 0, 131073, -262141, 0, 131073, -262140, 0, 131073, -262139, 0, 131073, -262138, 0, 131073, -262137, 0, 131073, -262136, 0, 131073, -262135, 0, 131073, -262134, 0, 131073, -262133, 0, 131073, -262132, 0, 131073, -262131, 0, 131073, -262130, 0, 131073, -262129, 0, 131073, -262128, 0, 131073, -262127, 0, 131073, -262126, 0, 131073, -262125, 0, 131073, -262124, 0, 131073, -262123, 0, 131073, -262122, 0, 131073, -262121, 0, 131073, -262120, 0, 131073, -262119, 0, 131073, -262118, 0, 131073, -262117, 0, 131073, -262116, 0, 131073, -262115, 0, 131073, -262114, 0, 131073, -262113, 0, 131073, -262112, 0, 131073, -262111, 0, 131073, -262110, 0, 131073, -262109, 0, 131073, -262108, 0, 131073, -262107, 0, 131073, -262106, 0, 131073, -262105, 0, 131073, -262104, 0, 131073, -262103, 0, 131073, -262102, 0, 131073, -262101, 0, 131073, -262100, 0, 131073, -262099, 0, 131073, -262098, 0, 131073, -262097, 0, 131073, -262096, 0, 131073, -262095, 0, 131073, -262094, 0, 131073, -262093, 0, 131073, -262092, 0, 131073, -262091, 0, 131073, -262090, 0, 131073, -262089, 0, 131073, -262088, 0, 131073, -262087, 0, 131073, -262086, 0, 131073, -262085, 0, 131073, -262084, 0, 131073, -262083, 0, 131073, -262082, 0, 131073, -262081, 0, 131073, -262080, 0, 131073, -262079, 0, 131073, -262078, 0, 131073, -262077, 0, 131073, -262076, 0, 131073, -262075, 0, 131073, -262074, 0, 131073, -262073, 0, 131073, -262072, 0, 131073, -262071, 0, 131073, -262070, 0, 131073, -262069, 0, 131073, -262068, 0, 655362, -262067, 0, 65537, -262066, 0, 65537, -262065, 0, 1048587, -131076, 0, 131072, -131075, 0, 131073, -131074, 0, 131073, -131073, 0, 131073, -196608, 0, 131073, -196607, 0, 131073, -196606, 0, 131073, -196605, 0, 131073, -196604, 0, 131073, -196603, 0, 131073, -196602, 0, 131073, -196601, 0, 131073, -196600, 0, 131073, -196599, 0, 131073, -196598, 0, 131073, -196597, 0, 131073, -196596, 0, 131073, -196595, 0, 131073, -196594, 0, 131073, -196593, 0, 131073, -196592, 0, 131073, -196591, 0, 131073, -196590, 0, 131073, -196589, 0, 131073, -196588, 0, 131073, -196587, 0, 131073, -196586, 0, 131073, -196585, 0, 131073, -196584, 0, 131073, -196583, 0, 131073, -196582, 0, 131073, -196581, 0, 131073, -196580, 0, 131073, -196579, 0, 131073, -196578, 0, 131073, -196577, 0, 131073, -196576, 0, 131073, -196575, 0, 131073, -196574, 0, 131073, -196573, 0, 131073, -196572, 0, 131073, -196571, 0, 131073, -196570, 0, 131073, -196569, 0, 131073, -196568, 0, 131073, -196567, 0, 131073, -196566, 0, 131073, -196565, 0, 131073, -196564, 0, 131073, -196563, 0, 131073, -196562, 0, 131073, -196561, 0, 131073, -196560, 0, 131073, -196559, 0, 131073, -196558, 0, 131073, -196557, 0, 131073, -196556, 0, 131073, -196555, 0, 131073, -196554, 0, 131073, -196553, 0, 131073, -196552, 0, 131073, -196551, 0, 131073, -196550, 0, 131073, -196549, 0, 131073, -196548, 0, 131073, -196547, 0, 131073, -196546, 0, 131073, -196545, 0, 131073, -196544, 0, 131073, -196543, 0, 131073, -196542, 0, 131073, -196541, 0, 131073, -196540, 0, 131073, -196539, 0, 131073, -196538, 0, 131073, -196537, 0, 131073, -196536, 0, 131073, -196535, 0, 131073, -196534, 0, 131073, -196533, 0, 131073, -196532, 0, 131073, -196531, 0, 131073, -196530, 0, 131073, -196529, 0, 131073, -196528, 0, 655362, -196527, 0, 65537, -196526, 0, 65538, -65540, 0, 131072, -65539, 0, 131073, -65538, 0, 131073, -65537, 0, 131073, -131072, 0, 131073, -131071, 0, 131073, -131070, 0, 131073, -131069, 0, 131073, -131068, 0, 131073, -131067, 0, 131073, -131066, 0, 131073, -131065, 0, 131073, -131064, 0, 131073, -131063, 0, 131073, -131062, 0, 131073, -131061, 0, 131073, -131060, 0, 131073, -131059, 0, 131073, -131058, 0, 131073, -131057, 0, 131073, -131056, 0, 131073, -131055, 0, 131073, -131054, 0, 131073, -131053, 0, 131073, -131052, 0, 131073, -131051, 0, 131073, -131050, 0, 131073, -131049, 0, 131073, -131048, 0, 131073, -131047, 0, 131073, -131046, 0, 131073, -131045, 0, 131073, -131044, 0, 131073, -131043, 0, 131073, -131042, 0, 131073, -131041, 0, 131073, -131040, 0, 131073, -131039, 0, 131073, -131038, 0, 131073, -131037, 0, 131073, -131036, 0, 131073, -131035, 0, 131073, -131034, 0, 131073, -131033, 0, 131073, -131032, 0, 131073, -131031, 0, 131073, -131030, 0, 131073, -131029, 0, 131073, -131028, 0, 131073, -131027, 0, 131073, -131026, 0, 131073, -131025, 0, 131073, -131024, 0, 131073, -131023, 0, 131073, -131022, 0, 131073, -131021, 0, 131073, -131020, 0, 131073, -131019, 0, 131073, -131018, 0, 131073, -131017, 0, 131073, -131016, 0, 131073, -131015, 0, 131073, -131014, 0, 131073, -131013, 0, 131073, -131012, 0, 131073, -131011, 0, 131073, -131010, 0, 131073, -131009, 0, 131073, -131008, 0, 131073, -131007, 0, 131073, -131006, 0, 131073, -131005, 0, 131073, -131004, 0, 131073, -131003, 0, 131073, -131002, 0, 131073, -131001, 0, 131073, -131000, 0, 131073, -130999, 0, 131073, -130998, 0, 131073, -130997, 0, 131073, -130996, 0, 131073, -130995, 0, 131073, -130994, 0, 131073, -130993, 0, 131073, -130992, 0, 131073, -130991, 0, 131073, -130990, 0, 524288, -4, 0, 131072, -3, 0, 131073, -2, 0, 131073, -1, 0, 131073, -65536, 0, 131073, -65535, 0, 131073, -65534, 0, 131073, -65533, 0, 131073, -65532, 0, 131073, -65531, 0, 131073, -65530, 0, 131073, -65529, 0, 131073, -65528, 0, 131073, -65527, 0, 131073, -65526, 0, 131073, -65525, 0, 131073, -65524, 0, 131073, -65523, 0, 131073, -65522, 0, 131073, -65521, 0, 131073, -65520, 0, 131073, -65519, 0, 131073, -65518, 0, 131073, -65517, 0, 131073, -65516, 0, 131073, -65515, 0, 131073, -65514, 0, 131073, -65513, 0, 131073, -65512, 0, 131073, -65511, 0, 131073, -65510, 0, 131073, -65509, 0, 131073, -65508, 0, 131073, -65507, 0, 131073, -65506, 0, 131073, -65505, 0, 131073, -65504, 0, 131073, -65503, 0, 131073, -65502, 0, 131073, -65501, 0, 131073, -65500, 0, 131073, -65499, 0, 131073, -65498, 0, 131073, -65497, 0, 131073, -65496, 0, 131073, -65495, 0, 131073, -65494, 0, 131073, -65493, 0, 131073, -65492, 0, 131073, -65491, 0, 131073, -65490, 0, 131073, -65489, 0, 131073, -65488, 0, 131073, -65487, 0, 131073, -65486, 0, 131073, -65485, 0, 131073, -65484, 0, 131073, -65483, 0, 131073, -65482, 0, 131073, -65481, 0, 131073, -65480, 0, 131073, -65479, 0, 131073, -65478, 0, 131073, -65477, 0, 131073, -65476, 0, 131073, -65475, 0, 131073, -65474, 0, 131073, -65473, 0, 131073, -65472, 0, 131073, -65471, 0, 131073, -65470, 0, 131073, -65469, 0, 131073, -65468, 0, 131073, -65467, 0, 131073, -65466, 0, 131073, -65465, 0, 131073, -65464, 0, 131073, -65463, 0, 131073, -65462, 0, 131073, -65461, 0, 131073, -65460, 0, 131073, -65459, 0, 131073, -65458, 0, 131073, -65457, 0, 131073, -65456, 0, 131073, -65455, 0, 131073, -65454, 0, 131073, -65453, 0, 458766, 65532, 0, 131072, 65533, 0, 131073, 65534, 0, 131073, 65535, 0, 131073, 0, 0, 131073, 1, 0, 131073, 2, 0, 131073, 3, 0, 262146, 4, 0, 196609, 5, 0, 196609, 6, 0, 196609, 7, 0, 196609, 8, 0, 196609, 9, 0, 196609, 10, 0, 196609, 11, 0, 196609, 12, 0, 196609, 13, 0, 196609, 14, 0, 196609, 15, 0, 196609, 16, 0, 196609, 17, 0, 196609, 18, 0, 196609, 19, 0, 196609, 20, 0, 196609, 21, 0, 196609, 22, 0, 196609, 23, 0, 196609, 24, 0, 196609, 25, 0, 196609, 26, 0, 196609, 27, 0, 196609, 28, 0, 196609, 29, 0, 196609, 30, 0, 196609, 31, 0, 196609, 32, 0, 196609, 33, 0, 196609, 34, 0, 196609, 35, 0, 196609, 36, 0, 196609, 37, 0, 196609, 38, 0, 196609, 39, 0, 196609, 40, 0, 196609, 41, 0, 196609, 42, 0, 196609, 43, 0, 196609, 44, 0, 196609, 45, 0, 196609, 46, 0, 196609, 47, 0, 196609, 48, 0, 196609, 49, 0, 196609, 50, 0, 196609, 51, 0, 196609, 52, 0, 196609, 53, 0, 196609, 54, 0, 196609, 55, 0, 196609, 56, 0, 196609, 57, 0, 196609, 58, 0, 196609, 59, 0, 196609, 60, 0, 196609, 61, 0, 262148, 62, 0, 131073, 63, 0, 131073, 64, 0, 131073, 65, 0, 131073, 66, 0, 131073, 67, 0, 131073, 68, 0, 131073, 69, 0, 131073, 70, 0, 131073, 71, 0, 131073, 72, 0, 262146, 73, 0, 196609, 74, 0, 196609, 75, 0, 196609, 76, 0, 262148, 77, 0, 131073, 78, 0, 131073, 79, 0, 131073, 80, 0, 131073, 81, 0, 131073, 82, 0, 131073, 83, 0, 131074, 131068, 0, 131072, 131069, 0, 131073, 131070, 0, 131073, 131071, 0, 131073, 65536, 0, 131073, 65537, 0, 131073, 65538, 0, 327681, 65598, 0, 1114122, 65599, 0, 196609, 65600, 0, 196609, 65601, 0, 196609, 65602, 0, 196609, 65603, 0, 196609, 65604, 0, 196609, 65605, 0, 196609, 65606, 0, 196609, 65607, 0, 1114123, 65613, 0, 327685, 65614, 0, 131073, 65615, 0, 131073, 65616, 0, 131073, 65617, 0, 131073, 65618, 0, 131073, 65619, 0, 524302, 196604, 0, 524301, 196605, 0, 131073, 196606, 0, 131073, 196607, 0, 131073, 131072, 0, 131073, 131073, 0, 327681, 131150, 0, 327685, 131151, 0, 131073, 131152, 0, 131073, 131153, 0, 131073, 131154, 0, 393216, 262141, 0, 393222, 262142, 0, 131073, 262143, 0, 131073, 196608, 0, 393216, 196687, 0, 393222, 196688, 0, 131073, 196689, 0, 131073, 196690, 0, 131074, 327677, 0, 131072, 327678, 0, 131073, 327679, 0, 131073, 262144, 0, 131074, 262223, 0, 131072, 262224, 0, 131073, 262225, 0, 131073, 262226, 0, 131074, 393213, 0, 131072, 393214, 0, 131073, 393215, 0, 131073, 327680, 0, 131074, 327759, 0, 131072, 327760, 0, 131073, 327761, 0, 131073, 327762, 0, 131074, 458749, 0, 131072, 458750, 0, 131073, 458751, 0, 131073, 393216, 0, 131074, 393295, 0, 131072, 393296, 0, 131073, 393297, 0, 131073, 393298, 0, 131074, 524285, 0, 131072, 524286, 0, 131073, 524287, 0, 131073, 458752, 0, 524288, 458831, 0, 131072, 458832, 0, 131073, 458833, 0, 131073, 458834, 0, 131074, 589821, 0, 131072, 589822, 0, 131073, 589823, 0, 131073, 524288, 0, 131073, 524289, 0, 589825, 524367, 0, 131072, 524368, 0, 131073, 524369, 0, 131073, 524370, 0, 131074, 655357, 0, 131072, 655358, 0, 131073, 655359, 0, 131073, 589824, 0, 131073, 589825, 0, 131073, 589826, 0, 589825, 589903, 0, 131072, 589904, 0, 131073, 589905, 0, 131073, 589906, 0, 131074, 720893, 0, 131072, 720894, 0, 131073, 720895, 0, 131073, 655360, 0, 131073, 655361, 0, 131073, 655362, 0, 131073, 655363, 0, 458766, 655439, 0, 131072, 655440, 0, 131073, 655441, 0, 131073, 655442, 0, 131074, 786429, 0, 131072, 786430, 0, 131073, 786431, 0, 131073, 720896, 0, 131073, 720897, 0, 131073, 720898, 0, 131073, 720899, 0, 131074, 720975, 0, 131072, 720976, 0, 131073, 720977, 0, 131073, 720978, 0, 131074, 851965, 0, 131072, 851966, 0, 131073, 851967, 0, 131073, 786432, 0, 131073, 786433, 0, 131073, 786434, 0, 131073, 786435, 0, 131074, 786511, 0, 131072, 786512, 0, 131073, 786513, 0, 131073, 786514, 0, 131074, 917501, 0, 131072, 917502, 0, 131073, 917503, 0, 131073, 851968, 0, 131073, 851969, 0, 131073, 851970, 0, 131073, 851971, 0, 131074, 852047, 0, 131072, 852048, 0, 131073, 852049, 0, 131073, 852050, 0, 131074, 983037, 0, 131072, 983038, 0, 131073, 983039, 0, 131073, 917504, 0, 131073, 917505, 0, 131073, 917506, 0, 262146, 917507, 0, 196610, 917583, 0, 131072, 917584, 0, 131073, 917585, 0, 131073, 917586, 0, 131074, 1048571, 0, 65553, 1048573, 0, 131072, 1048574, 0, 131073, 1048575, 0, 131073, 983040, 0, 131073, 983041, 0, 327681, 983119, 0, 131072, 983120, 0, 131073, 983121, 0, 131073, 983122, 0, 131074, 1114109, 0, 131072, 1114110, 0, 131073, 1114111, 0, 131073, 1048576, 0, 393216, 1048655, 0, 131072, 1048656, 0, 131073, 1048657, 0, 131073, 1048658, 0, 131074, 1179645, 0, 131072, 1179646, 0, 131073, 1179647, 0, 131073, 1114112, 0, 131074, 1114191, 0, 131072, 1114192, 0, 131073, 1114193, 0, 131073, 1114194, 0, 131074, 1245181, 0, 131072, 1245182, 0, 131073, 1245183, 0, 131073, 1179648, 0, 131074, 1179727, 0, 131072, 1179728, 0, 131073, 1179729, 0, 131073, 1179730, 0, 131074, 1310717, 0, 131072, 1310718, 0, 131073, 1310719, 0, 131073, 1245184, 0, 131074, 1245263, 0, 131072, 1245264, 0, 131073, 1245265, 0, 131073, 1245266, 0, 131074, 1376253, 0, 131072, 1376254, 0, 131073, 1376255, 0, 131073, 1310720, 0, 131074, 1310799, 0, 131072, 1310800, 0, 131073, 1310801, 0, 131073, 1310802, 0, 524288, 1441789, 0, 131072, 1441790, 0, 131073, 1441791, 0, 131073, 1376256, 0, 131074, 1376335, 0, 131072, 1376336, 0, 131073, 1376337, 0, 131073, 1376338, 0, 131073, 1376339, 0, 458766, 1507325, 0, 131072, 1507326, 0, 131073, 1507327, 0, 131073, 1441792, 0, 131074, 1441871, 0, 131072, 1441872, 0, 131073, 1441873, 0, 131073, 1441874, 0, 131073, 1441875, 0, 524302, 1572861, 0, 131072, 1572862, 0, 131073, 1572863, 0, 131073, 1507328, 0, 524288, 1507407, 0, 131072, 1507408, 0, 131073, 1507409, 0, 131073, 1507410, 0, 393216, 1638397, 0, 131072, 1638398, 0, 131073, 1638399, 0, 131073, 1572864, 0, 131073, 1572865, 0, 458766, 1572943, 0, 131072, 1572944, 0, 131073, 1572945, 0, 131073, 1572946, 0, 131074, 1703933, 0, 131072, 1703934, 0, 131073, 1703935, 0, 131073, 1638400, 0, 131073, 1638401, 0, 131074, 1638479, 0, 131072, 1638480, 0, 131073, 1638481, 0, 131073, 1638482, 0, 131074, 1769469, 0, 131072, 1769470, 0, 131073, 1769471, 0, 131073, 1703936, 0, 131073, 1703937, 0, 131074, 1704015, 0, 131072, 1704016, 0, 131073, 1704017, 0, 131073, 1704018, 0, 524302, 1835005, 0, 131072, 1835006, 0, 131073, 1835007, 0, 131073, 1769472, 0, 131073, 1769473, 0, 131074, 1769551, 0, 131072, 1769552, 0, 131073, 1769553, 0, 458752, 1900541, 0, 131072, 1900542, 0, 131073, 1900543, 0, 131073, 1835008, 0, 131073, 1835009, 0, 524288, 1835087, 0, 131072, 1835088, 0, 131073, 1835089, 0, 131073, 1835090, 0, 458766, 1966077, 0, 131072, 1966078, 0, 131073, 1966079, 0, 131073, 1900544, 0, 131073, 1900545, 0, 131073, 1900546, 0, 131086, 1900623, 0, 131072, 1900624, 0, 131073, 1900625, 0, 131073, 1900626, 0, 131074, 2031613, 0, 524294, 2031614, 0, 131073, 2031615, 0, 131073, 1966080, 0, 131073, 1966081, 0, 393216, 1966159, 0, 131072, 1966160, 0, 131073, 1966161, 0, 131073, 1966162, 0, 131074, 2097148, 0, 458765, 2097149, 0, 131073, 2097150, 0, 131073, 2097151, 0, 131073, 2031616, 0, 131073, 2031617, 0, 524302, 2031695, 0, 131072, 2031696, 0, 131073, 2031697, 0, 131073, 2031698, 0, 131074, 2162684, 0, 131072, 2162685, 0, 131073, 2162686, 0, 131073, 2162687, 0, 131073, 2097152, 0, 393216, 2097231, 0, 131072, 2097232, 0, 131073, 2097233, 0, 131073, 2097234, 0, 131074, 2228220, 0, 524294, 2228221, 0, 131073, 2228222, 0, 131073, 2228223, 0, 131073, 2162688, 0, 524288, 2162767, 0, 131072, 2162768, 0, 131073, 2162769, 0, 131073, 2162770, 0, 131074, 2293755, 0, 458765, 2293756, 0, 131073, 2293757, 0, 131073, 2293758, 0, 131073, 2293759, 0, 131073, 2228224, 0, 131073, 2228225, 0, 458766, 2228303, 0, 524294, 2228304, 0, 131073, 2228305, 0, 131073, 2228306, 0, 131074, 2359291, 0, 131072, 2359292, 0, 131073, 2359293, 0, 131073, 2359294, 0, 131073, 2359295, 0, 131073, 2293760, 0, 131073, 2293761, 0, 524288, 2293838, 0, 458765, 2293839, 0, 131073, 2293840, 0, 131073, 2293841, 0, 131073, 2293842, 0, 131074, 2424827, 0, 131072, 2424828, 0, 131073, 2424829, 0, 131073, 2424830, 0, 131073, 2424831, 0, 131073, 2359296, 0, 131073, 2359297, 0, 131073, 2359298, 0, 458766, 2359374, 0, 524294, 2359375, 0, 131073, 2359376, 0, 131073, 2359377, 0, 131073, 2359378, 0, 131074, 2490363, 0, 131072, 2490364, 0, 131073, 2490365, 0, 131073, 2490366, 0, 131073, 2490367, 0, 131073, 2424832, 0, 131073, 2424833, 0, 131073, 2424834, 0, 131074, 2424891, 0, 1048586, 2424892, 0, 65537, 2424893, 0, 65537, 2424894, 0, 65538, 2424909, 0, 458765, 2424910, 0, 131073, 2424911, 0, 131073, 2424912, 0, 131073, 2424913, 0, 131073, 2424914, 0, 131074, 2555899, 0, 131072, 2555900, 0, 131073, 2555901, 0, 131073, 2555902, 0, 131073, 2555903, 0, 131073, 2490368, 0, 131073, 2490369, 0, 131073, 2490370, 0, 131074, 2490426, 0, 589829, 2490427, 0, 131073, 2490428, 0, 131073, 2490429, 0, 131073, 2490430, 0, 131074, 2490445, 0, 524294, 2490446, 0, 131073, 2490447, 0, 131073, 2490448, 0, 131073, 2490449, 0, 131073, 2490450, 0, 131074, 2621435, 0, 131072, 2621436, 0, 131073, 2621437, 0, 131073, 2621438, 0, 131073, 2621439, 0, 131073, 2555904, 0, 131073, 2555905, 0, 131073, 2555906, 0, 131074, 2555961, 0, 589829, 2555962, 0, 131073, 2555963, 0, 131073, 2555964, 0, 131073, 2555965, 0, 131073, 2555966, 0, 131074, 2555980, 0, 589829, 2555981, 0, 131073, 2555982, 0, 131073, 2555983, 0, 131073, 2555984, 0, 131073, 2555985, 0, 131073, 2555986, 0, 131074, 2686971, 0, 131072, 2686972, 0, 131073, 2686973, 0, 131073, 2686974, 0, 131073, 2686975, 0, 131073, 2621440, 0, 131073, 2621441, 0, 131073, 2621442, 0, 524288, 2621457, 0, 1048586, 2621458, 0, 65537, 2621459, 0, 65537, 2621460, 0, 65537, 2621461, 0, 65537, 2621462, 0, 65537, 2621463, 0, 65537, 2621464, 0, 65537, 2621465, 0, 65537, 2621466, 0, 65537, 2621467, 0, 65537, 2621468, 0, 65537, 2621469, 0, 65537, 2621470, 0, 65537, 2621471, 0, 65537, 2621472, 0, 65537, 2621473, 0, 65537, 2621474, 0, 1048587, 2621496, 0, 589829, 2621497, 0, 131073, 2621498, 0, 131073, 2621499, 0, 131073, 2621500, 0, 131073, 2621501, 0, 131073, 2621502, 0, 524288, 2621515, 0, 589829, 2621516, 0, 131073, 2621517, 0, 131073, 2621518, 0, 131073, 2621519, 0, 131073, 2621520, 0, 131073, 2621521, 0, 131073, 2621522, 0, 131074, 2752507, 0, 131072, 2752508, 0, 131073, 2752509, 0, 131073, 2752510, 0, 131073, 2752511, 0, 131073, 2686976, 0, 131073, 2686977, 0, 131073, 2686978, 0, 131073, 2686979, 0, 655362, 2686980, 0, 65537, 2686981, 0, 65537, 2686982, 0, 65537, 2686983, 0, 65537, 2686984, 0, 65537, 2686985, 0, 65537, 2686986, 0, 65537, 2686987, 0, 65537, 2686988, 0, 65537, 2686989, 0, 65537, 2686990, 0, 65537, 2686991, 0, 65537, 2686992, 0, 655364, 2686993, 0, 131073, 2686994, 0, 131073, 2686995, 0, 131073, 2686996, 0, 131073, 2686997, 0, 131073, 2686998, 0, 131073, 2686999, 0, 131073, 2687000, 0, 131073, 2687001, 0, 131073, 2687002, 0, 131073, 2687003, 0, 131073, 2687004, 0, 131073, 2687005, 0, 131073, 2687006, 0, 131073, 2687007, 0, 131073, 2687008, 0, 131073, 2687009, 0, 131073, 2687010, 0, 131073, 2687011, 0, 655362, 2687012, 0, 65537, 2687013, 0, 65537, 2687014, 0, 65537, 2687015, 0, 65537, 2687016, 0, 65537, 2687017, 0, 65537, 2687018, 0, 65537, 2687019, 0, 65537, 2687020, 0, 65537, 2687021, 0, 65537, 2687022, 0, 65537, 2687023, 0, 65537, 2687024, 0, 65537, 2687025, 0, 65537, 2687026, 0, 65537, 2687027, 0, 65537, 2687028, 0, 65537, 2687029, 0, 65537, 2687030, 0, 65537, 2687031, 0, 655364, 2687032, 0, 131073, 2687033, 0, 131073, 2687034, 0, 131073, 2687035, 0, 131073, 2687036, 0, 131073, 2687037, 0, 131073, 2687038, 0, 131073, 2687039, 0, 655362, 2687040, 0, 65537, 2687041, 0, 65537, 2687042, 0, 65537, 2687043, 0, 65537, 2687044, 0, 65537, 2687045, 0, 65537, 2687046, 0, 65537, 2687047, 0, 65537, 2687048, 0, 65537, 2687049, 0, 65537, 2687050, 0, 655364, 2687051, 0, 131073, 2687052, 0, 131073, 2687053, 0, 131073, 2687054, 0, 131073, 2687055, 0, 131073, 2687056, 0, 131073, 2687057, 0, 131073, 2687058, 0, 131074, 2818039, 0, 65553, 2818043, 0, 524301, 2818044, 0, 131073, 2818045, 0, 131073, 2818046, 0, 131073, 2818047, 0, 131073, 2752512, 0, 131073, 2752513, 0, 131073, 2752514, 0, 131073, 2752515, 0, 131073, 2752516, 0, 131073, 2752517, 0, 131073, 2752518, 0, 131073, 2752519, 0, 131073, 2752520, 0, 131073, 2752521, 0, 131073, 2752522, 0, 131073, 2752523, 0, 131073, 2752524, 0, 131073, 2752525, 0, 131073, 2752526, 0, 131073, 2752527, 0, 131073, 2752528, 0, 131073, 2752529, 0, 131073, 2752530, 0, 131073, 2752531, 0, 131073, 2752532, 0, 131073, 2752533, 0, 131073, 2752534, 0, 131073, 2752535, 0, 131073, 2752536, 0, 131073, 2752537, 0, 131073, 2752538, 0, 131073, 2752539, 0, 131073, 2752540, 0, 131073, 2752541, 0, 131073, 2752542, 0, 131073, 2752543, 0, 131073, 2752544, 0, 131073, 2752545, 0, 131073, 2752546, 0, 131073, 2752547, 0, 131073, 2752548, 0, 131073, 2752549, 0, 131073, 2752550, 0, 131073, 2752551, 0, 131073, 2752552, 0, 131073, 2752553, 0, 131073, 2752554, 0, 131073, 2752555, 0, 131073, 2752556, 0, 131073, 2752557, 0, 131073, 2752558, 0, 131073, 2752559, 0, 131073, 2752560, 0, 131073, 2752561, 0, 131073, 2752562, 0, 131073, 2752563, 0, 131073, 2752564, 0, 131073, 2752565, 0, 131073, 2752566, 0, 131073, 2752567, 0, 131073, 2752568, 0, 131073, 2752569, 0, 131073, 2752570, 0, 131073, 2752571, 0, 131073, 2752572, 0, 131073, 2752573, 0, 131073, 2752574, 0, 131073, 2752575, 0, 131073, 2752576, 0, 131073, 2752577, 0, 131073, 2752578, 0, 131073, 2752579, 0, 131073, 2752580, 0, 131073, 2752581, 0, 131073, 2752582, 0, 131073, 2752583, 0, 131073, 2752584, 0, 131073, 2752585, 0, 131073, 2752586, 0, 131073, 2752587, 0, 131073, 2752588, 0, 131073, 2752589, 0, 131073, 2752590, 0, 131073, 2752591, 0, 131073, 2752592, 0, 131073, 2752593, 0, 131073, 2752594, 0, 524288, 2883580, 0, 393222, 2883581, 0, 131073, 2883582, 0, 131073, 2883583, 0, 131073, 2818048, 0, 131073, 2818049, 0, 131073, 2818050, 0, 131073, 2818051, 0, 131073, 2818052, 0, 131073, 2818053, 0, 131073, 2818054, 0, 131073, 2818055, 0, 131073, 2818056, 0, 131073, 2818057, 0, 131073, 2818058, 0, 131073, 2818059, 0, 131073, 2818060, 0, 131073, 2818061, 0, 131073, 2818062, 0, 131073, 2818063, 0, 131073, 2818064, 0, 131073, 2818065, 0, 131073, 2818066, 0, 131073, 2818067, 0, 131073, 2818068, 0, 131073, 2818069, 0, 131073, 2818070, 0, 131073, 2818071, 0, 131073, 2818072, 0, 131073, 2818073, 0, 131073, 2818074, 0, 131073, 2818075, 0, 131073, 2818076, 0, 131073, 2818077, 0, 131073, 2818078, 0, 131073, 2818079, 0, 131073, 2818080, 0, 131073, 2818081, 0, 131073, 2818082, 0, 131073, 2818083, 0, 131073, 2818084, 0, 131073, 2818085, 0, 131073, 2818086, 0, 131073, 2818087, 0, 131073, 2818088, 0, 131073, 2818089, 0, 131073, 2818090, 0, 131073, 2818091, 0, 131073, 2818092, 0, 131073, 2818093, 0, 131073, 2818094, 0, 131073, 2818095, 0, 131073, 2818096, 0, 131073, 2818097, 0, 131073, 2818098, 0, 131073, 2818099, 0, 131073, 2818100, 0, 131073, 2818101, 0, 131073, 2818102, 0, 131073, 2818103, 0, 131073, 2818104, 0, 131073, 2818105, 0, 131073, 2818106, 0, 131073, 2818107, 0, 131073, 2818108, 0, 131073, 2818109, 0, 131073, 2818110, 0, 131073, 2818111, 0, 131073, 2818112, 0, 131073, 2818113, 0, 131073, 2818114, 0, 131073, 2818115, 0, 131073, 2818116, 0, 131073, 2818117, 0, 131073, 2818118, 0, 131073, 2818119, 0, 131073, 2818120, 0, 131073, 2818121, 0, 131073, 2818122, 0, 131073, 2818123, 0, 131073, 2818124, 0, 131073, 2818125, 0, 131073, 2818126, 0, 131073, 2818127, 0, 131073, 2818128, 0, 131073, 2818129, 0, 131073, 2818130, 0, 131073, 2818131, 0, 458766, 2949116, 0, 131072, 2949117, 0, 131073, 2949118, 0, 131073, 2949119, 0, 131073, 2883584, 0, 131073, 2883585, 0, 131073, 2883586, 0, 131073, 2883587, 0, 131073, 2883588, 0, 131073, 2883589, 0, 131073, 2883590, 0, 131073, 2883591, 0, 131073, 2883592, 0, 131073, 2883593, 0, 131073, 2883594, 0, 131073, 2883595, 0, 131073, 2883596, 0, 131073, 2883597, 0, 131073, 2883598, 0, 131073, 2883599, 0, 131073, 2883600, 0, 131073, 2883601, 0, 131073, 2883602, 0, 131073, 2883603, 0, 131073, 2883604, 0, 131073, 2883605, 0, 131073, 2883606, 0, 131073, 2883607, 0, 131073, 2883608, 0, 131073, 2883609, 0, 131073, 2883610, 0, 131073, 2883611, 0, 131073, 2883612, 0, 131073, 2883613, 0, 131073, 2883614, 0, 131073, 2883615, 0, 131073, 2883616, 0, 131073, 2883617, 0, 131073, 2883618, 0, 131073, 2883619, 0, 131073, 2883620, 0, 131073, 2883621, 0, 131073, 2883622, 0, 131073, 2883623, 0, 131073, 2883624, 0, 131073, 2883625, 0, 131073, 2883626, 0, 131073, 2883627, 0, 131073, 2883628, 0, 131073, 2883629, 0, 131073, 2883630, 0, 131073, 2883631, 0, 131073, 2883632, 0, 131073, 2883633, 0, 131073, 2883634, 0, 131073, 2883635, 0, 131073, 2883636, 0, 131073, 2883637, 0, 131073, 2883638, 0, 131073, 2883639, 0, 131073, 2883640, 0, 131073, 2883641, 0, 131073, 2883642, 0, 131073, 2883643, 0, 131073, 2883644, 0, 131073, 2883645, 0, 131073, 2883646, 0, 131073, 2883647, 0, 131073, 2883648, 0, 131073, 2883649, 0, 131073, 2883650, 0, 131073, 2883651, 0, 131073, 2883652, 0, 131073, 2883653, 0, 131073, 2883654, 0, 131073, 2883655, 0, 131073, 2883656, 0, 131073, 2883657, 0, 131073, 2883658, 0, 131073, 2883659, 0, 131073, 2883660, 0, 131073, 2883661, 0, 131073, 2883662, 0, 131073, 2883663, 0, 131073, 2883664, 0, 131073, 2883665, 0, 131073, 2883666, 0, 131073, 2883667, 0, 524302, 3014652, 0, 131072, 3014653, 0, 131073, 3014654, 0, 131073, 3014655, 0, 131073, 2949120, 0, 131073, 2949121, 0, 131073, 2949122, 0, 131073, 2949123, 0, 131073, 2949124, 0, 131073, 2949125, 0, 131073, 2949126, 0, 131073, 2949127, 0, 131073, 2949128, 0, 131073, 2949129, 0, 131073, 2949130, 0, 131073, 2949131, 0, 131073, 2949132, 0, 131073, 2949133, 0, 131073, 2949134, 0, 131073, 2949135, 0, 131073, 2949136, 0, 131073, 2949137, 0, 131073, 2949138, 0, 131073, 2949139, 0, 131073, 2949140, 0, 131073, 2949141, 0, 131073, 2949142, 0, 131073, 2949143, 0, 131073, 2949144, 0, 131073, 2949145, 0, 131073, 2949146, 0, 131073, 2949147, 0, 131073, 2949148, 0, 131073, 2949149, 0, 131073, 2949150, 0, 131073, 2949151, 0, 131073, 2949152, 0, 131073, 2949153, 0, 131073, 2949154, 0, 131073, 2949155, 0, 131073, 2949156, 0, 131073, 2949157, 0, 131073, 2949158, 0, 131073, 2949159, 0, 131073, 2949160, 0, 131073, 2949161, 0, 131073, 2949162, 0, 131073, 2949163, 0, 131073, 2949164, 0, 131073, 2949165, 0, 131073, 2949166, 0, 131073, 2949167, 0, 131073, 2949168, 0, 131073, 2949169, 0, 131073, 2949170, 0, 131073, 2949171, 0, 131073, 2949172, 0, 131073, 2949173, 0, 131073, 2949174, 0, 131073, 2949175, 0, 131073, 2949176, 0, 131073, 2949177, 0, 131073, 2949178, 0, 131073, 2949179, 0, 131073, 2949180, 0, 131073, 2949181, 0, 131073, 2949182, 0, 131073, 2949183, 0, 131073, 2949184, 0, 131073, 2949185, 0, 131073, 2949186, 0, 131073, 2949187, 0, 131073, 2949188, 0, 131073, 2949189, 0, 131073, 2949190, 0, 131073, 2949191, 0, 131073, 2949192, 0, 131073, 2949193, 0, 131073, 2949194, 0, 131073, 2949195, 0, 131073, 2949196, 0, 131073, 2949197, 0, 131073, 2949198, 0, 131073, 2949199, 0, 131073, 2949200, 0, 131073, 2949201, 0, 131073, 2949202, 0, 393216, 3080188, 0, 131072, 3080189, 0, 131073, 3080190, 0, 131073, 3080191, 0, 131073, 3014656, 0, 131073, 3014657, 0, 131073, 3014658, 0, 131073, 3014659, 0, 131073, 3014660, 0, 131073, 3014661, 0, 131073, 3014662, 0, 131073, 3014663, 0, 131073, 3014664, 0, 131073, 3014665, 0, 131073, 3014666, 0, 131073, 3014667, 0, 131073, 3014668, 0, 131073, 3014669, 0, 131073, 3014670, 0, 131073, 3014671, 0, 131073, 3014672, 0, 131073, 3014673, 0, 131073, 3014674, 0, 131073, 3014675, 0, 131073, 3014676, 0, 131073, 3014677, 0, 131073, 3014678, 0, 131073, 3014679, 0, 131073, 3014680, 0, 131073, 3014681, 0, 131073, 3014682, 0, 131073, 3014683, 0, 131073, 3014684, 0, 131073, 3014685, 0, 131073, 3014686, 0, 131073, 3014687, 0, 131073, 3014688, 0, 131073, 3014689, 0, 131073, 3014690, 0, 131073, 3014691, 0, 131073, 3014692, 0, 131073, 3014693, 0, 131073, 3014694, 0, 131073, 3014695, 0, 131073, 3014696, 0, 131073, 3014697, 0, 131073, 3014698, 0, 131073, 3014699, 0, 131073, 3014700, 0, 131073, 3014701, 0, 131073, 3014702, 0, 131073, 3014703, 0, 131073, 3014704, 0, 131073, 3014705, 0, 131073, 3014706, 0, 131073, 3014707, 0, 131073, 3014708, 0, 131073, 3014709, 0, 131073, 3014710, 0, 131073, 3014711, 0, 131073, 3014712, 0, 131073, 3014713, 0, 131073, 3014714, 0, 131073, 3014715, 0, 131073, 3014716, 0, 131073, 3014717, 0, 131073, 3014718, 0, 131073, 3014719, 0, 131073, 3014720, 0, 131073, 3014721, 0, 131073, 3014722, 0, 131073, 3014723, 0, 131073, 3014724, 0, 131073, 3014725, 0, 131073, 3014726, 0, 131073, 3014727, 0, 131073, 3014728, 0, 131073, 3014729, 0, 131073, 3014730, 0, 131073, 3014731, 0, 131073, 3014732, 0, 131073, 3014733, 0, 131073, 3014734, 0, 131073, 3014735, 0, 131073, 3014736, 0, 131073, 3014737, 0, 131073, 3014738, 0, 131074, 3145724, 0, 131072, 3145725, 0, 131073, 3145726, 0, 131073, 3145727, 0, 131073, 3080192, 0, 131073, 3080193, 0, 131073, 3080194, 0, 131073, 3080195, 0, 131073, 3080196, 0, 131073, 3080197, 0, 131073, 3080198, 0, 131073, 3080199, 0, 131073, 3080200, 0, 131073, 3080201, 0, 131073, 3080202, 0, 131073, 3080203, 0, 131073, 3080204, 0, 131073, 3080205, 0, 131073, 3080206, 0, 131073, 3080207, 0, 131073, 3080208, 0, 131073, 3080209, 0, 131073, 3080210, 0, 131073, 3080211, 0, 131073, 3080212, 0, 131073, 3080213, 0, 131073, 3080214, 0, 131073, 3080215, 0, 131073, 3080216, 0, 131073, 3080217, 0, 131073, 3080218, 0, 131073, 3080219, 0, 131073, 3080220, 0, 131073, 3080221, 0, 131073, 3080222, 0, 131073, 3080223, 0, 131073, 3080224, 0, 131073, 3080225, 0, 131073, 3080226, 0, 131073, 3080227, 0, 131073, 3080228, 0, 131073, 3080229, 0, 131073, 3080230, 0, 131073, 3080231, 0, 131073, 3080232, 0, 131073, 3080233, 0, 131073, 3080234, 0, 131073, 3080235, 0, 131073, 3080236, 0, 131073, 3080237, 0, 131073, 3080238, 0, 131073, 3080239, 0, 131073, 3080240, 0, 131073, 3080241, 0, 131073, 3080242, 0, 131073, 3080243, 0, 131073, 3080244, 0, 131073, 3080245, 0, 131073, 3080246, 0, 131073, 3080247, 0, 131073, 3080248, 0, 131073, 3080249, 0, 131073, 3080250, 0, 131073, 3080251, 0, 131073, 3080252, 0, 131073, 3080253, 0, 131073, 3080254, 0, 131073, 3080255, 0, 131073, 3080256, 0, 131073, 3080257, 0, 131073, 3080258, 0, 131073, 3080259, 0, 131073, 3080260, 0, 131073, 3080261, 0, 131073, 3080262, 0, 131073, 3080263, 0, 131073, 3080264, 0, 131073, 3080265, 0, 131073, 3080266, 0, 131073, 3080267, 0, 131073, 3080268, 0, 131073, 3080269, 0, 131073, 3080270, 0, 131073, 3080271, 0, 131073, 3080272, 0, 131073, 3080273, 0, 131073, 3080274, 0, 131074, 3211260, 0, 131072, 3211261, 0, 131073, 3211262, 0, 131073, 3211263, 0, 131073, 3145728, 0, 131073, 3145729, 0, 131073, 3145730, 0, 131073, 3145731, 0, 131073, 3145732, 0, 131073, 3145733, 0, 131073, 3145734, 0, 131073, 3145735, 0, 131073, 3145736, 0, 131073, 3145737, 0, 131073, 3145738, 0, 131073, 3145739, 0, 131073, 3145740, 0, 131073, 3145741, 0, 131073, 3145742, 0, 131073, 3145743, 0, 131073, 3145744, 0, 131073, 3145745, 0, 131073, 3145746, 0, 131073, 3145747, 0, 131073, 3145748, 0, 131073, 3145749, 0, 131073, 3145750, 0, 131073, 3145751, 0, 131073, 3145752, 0, 131073, 3145753, 0, 131073, 3145754, 0, 131073, 3145755, 0, 131073, 3145756, 0, 131073, 3145757, 0, 131073, 3145758, 0, 131073, 3145759, 0, 131073, 3145760, 0, 131073, 3145761, 0, 131073, 3145762, 0, 131073, 3145763, 0, 131073, 3145764, 0, 131073, 3145765, 0, 131073, 3145766, 0, 131073, 3145767, 0, 131073, 3145768, 0, 131073, 3145769, 0, 131073, 3145770, 0, 131073, 3145771, 0, 131073, 3145772, 0, 131073, 3145773, 0, 131073, 3145774, 0, 131073, 3145775, 0, 131073, 3145776, 0, 131073, 3145777, 0, 131073, 3145778, 0, 131073, 3145779, 0, 131073, 3145780, 0, 131073, 3145781, 0, 131073, 3145782, 0, 131073, 3145783, 0, 131073, 3145784, 0, 131073, 3145785, 0, 131073, 3145786, 0, 131073, 3145787, 0, 131073, 3145788, 0, 131073, 3145789, 0, 131073, 3145790, 0, 131073, 3145791, 0, 131073, 3145792, 0, 131073, 3145793, 0, 131073, 3145794, 0, 131073, 3145795, 0, 131073, 3145796, 0, 131073, 3145797, 0, 131073, 3145798, 0, 131073, 3145799, 0, 131073, 3145800, 0, 131073, 3145801, 0, 131073, 3145802, 0, 131073, 3145803, 0, 131073, 3145804, 0, 131073, 3145805, 0, 131073, 3145806, 0, 262146, 3145807, 0, 196609, 3145808, 0, 196609, 3145809, 0, 196609, 3145810, 0, 196610, 3276796, 0, 196608, 3276797, 0, 196609, 3276798, 0, 262148, 3276799, 0, 131073, 3211264, 0, 131073, 3211265, 0, 131073, 3211266, 0, 131073, 3211267, 0, 131073, 3211268, 0, 131073, 3211269, 0, 131073, 3211270, 0, 131073, 3211271, 0, 131073, 3211272, 0, 131073, 3211273, 0, 131073, 3211274, 0, 131073, 3211275, 0, 131073, 3211276, 0, 131073, 3211277, 0, 131073, 3211278, 0, 131073, 3211279, 0, 131073, 3211280, 0, 131073, 3211281, 0, 131073, 3211282, 0, 131073, 3211283, 0, 131073, 3211284, 0, 131073, 3211285, 0, 131073, 3211286, 0, 131073, 3211287, 0, 131073, 3211288, 0, 131073, 3211289, 0, 131073, 3211290, 0, 131073, 3211291, 0, 131073, 3211292, 0, 131073, 3211293, 0, 131073, 3211294, 0, 131073, 3211295, 0, 131073, 3211296, 0, 131073, 3211297, 0, 131073, 3211298, 0, 131073, 3211299, 0, 131073, 3211300, 0, 131073, 3211301, 0, 131073, 3211302, 0, 131073, 3211303, 0, 131073, 3211304, 0, 131073, 3211305, 0, 131073, 3211306, 0, 131073, 3211307, 0, 131073, 3211308, 0, 131073, 3211309, 0, 131073, 3211310, 0, 131073, 3211311, 0, 131073, 3211312, 0, 131073, 3211313, 0, 131073, 3211314, 0, 131073, 3211315, 0, 131073, 3211316, 0, 131073, 3211317, 0, 131073, 3211318, 0, 131073, 3211319, 0, 131073, 3211320, 0, 131073, 3211321, 0, 131073, 3211322, 0, 131073, 3211323, 0, 131073, 3211324, 0, 131073, 3211325, 0, 131073, 3211326, 0, 131073, 3211327, 0, 131073, 3211328, 0, 131073, 3211329, 0, 131073, 3211330, 0, 131073, 3211331, 0, 131073, 3211332, 0, 131073, 3211333, 0, 131073, 3211334, 0, 131073, 3211335, 0, 131073, 3211336, 0, 131073, 3211337, 0, 131073, 3211338, 0, 131073, 3211339, 0, 262146, 3211340, 0, 196609, 3211341, 0, 1114123, 3342335, 0, 1114122, 3276800, 0, 196609, 3276801, 0, 196609, 3276802, 0, 196609, 3276803, 0, 196609, 3276804, 0, 196609, 3276805, 0, 196609, 3276806, 0, 196609, 3276807, 0, 196609, 3276808, 0, 196609, 3276809, 0, 196609, 3276810, 0, 196609, 3276811, 0, 196609, 3276812, 0, 196609, 3276813, 0, 262148, 3276814, 0, 131073, 3276815, 0, 131073, 3276816, 0, 131073, 3276817, 0, 131073, 3276818, 0, 131073, 3276819, 0, 131073, 3276820, 0, 131073, 3276821, 0, 131073, 3276822, 0, 131073, 3276823, 0, 131073, 3276824, 0, 131073, 3276825, 0, 131073, 3276826, 0, 131073, 3276827, 0, 131073, 3276828, 0, 131073, 3276829, 0, 131073, 3276830, 0, 131073, 3276831, 0, 131073, 3276832, 0, 131073, 3276833, 0, 131073, 3276834, 0, 131073, 3276835, 0, 131073, 3276836, 0, 131073, 3276837, 0, 131073, 3276838, 0, 131073, 3276839, 0, 262146, 3276840, 0, 196609, 3276841, 0, 196609, 3276842, 0, 196609, 3276843, 0, 196609, 3276844, 0, 196609, 3276845, 0, 196609, 3276846, 0, 196609, 3276847, 0, 196609, 3276848, 0, 196609, 3276849, 0, 196609, 3276850, 0, 196609, 3276851, 0, 196609, 3276852, 0, 196609, 3276853, 0, 196609, 3276854, 0, 196609, 3276855, 0, 196609, 3276856, 0, 196609, 3276857, 0, 196609, 3276858, 0, 196609, 3276859, 0, 196609, 3276860, 0, 196609, 3276861, 0, 196609, 3276862, 0, 196609, 3276863, 0, 196609, 3276864, 0, 262148, 3276865, 0, 131073, 3276866, 0, 131073, 3276867, 0, 131073, 3276868, 0, 262146, 3276869, 0, 196609, 3276870, 0, 196609, 3276871, 0, 196609, 3276872, 0, 196609, 3276873, 0, 196609, 3276874, 0, 1114123, 3342350, 0, 1114122, 3342351, 0, 196609, 3342352, 0, 196609, 3342353, 0, 196609, 3342354, 0, 196609, 3342355, 0, 196609, 3342356, 0, 196609, 3342357, 0, 196609, 3342358, 0, 196609, 3342359, 0, 196609, 3342360, 0, 196609, 3342361, 0, 196609, 3342362, 0, 196609, 3342363, 0, 196609, 3342364, 0, 196609, 3342365, 0, 196609, 3342366, 0, 196609, 3342367, 0, 196609, 3342368, 0, 196609, 3342369, 0, 196609, 3342370, 0, 196609, 3342371, 0, 196609, 3342372, 0, 196609, 3342373, 0, 196609, 3342374, 0, 1114123, 3342401, 0, 1114122, 3342402, 0, 196609, 3342403, 0, 1114123, 3866642, 0, 65553, 3997739, 0, 65553 )

[node name="UndiTilemap" type="TileMap" parent="LevelLayer Z3/Level_00"]
visible = false
material = SubResource( 458 )
tile_set = SubResource( 108 )
cell_size = Vector2( 8, 8 )
format = 1
tile_data = PoolIntArray( -720901, 0, 65553, 65538, 0, 1048586, 65539, 0, 65537, 65540, 0, 65537, 65541, 0, 65537, 65542, 0, 65537, 65543, 0, 65537, 65544, 0, 65537, 65545, 0, 65537, 65546, 0, 65537, 65547, 0, 65537, 65548, 0, 65537, 65549, 0, 65537, 65550, 0, 65537, 65551, 0, 65537, 65552, 0, 65537, 65553, 0, 65537, 65554, 0, 65537, 65555, 0, 65537, 65556, 0, 65537, 65557, 0, 65537, 65558, 0, 65537, 65559, 0, 65537, 65560, 0, 65537, 65561, 0, 65537, 65562, 0, 65537, 65563, 0, 65537, 65564, 0, 65537, 65565, 0, 65537, 65566, 0, 65537, 65567, 0, 65537, 65568, 0, 65537, 65569, 0, 65537, 65570, 0, 65537, 65571, 0, 65537, 65572, 0, 65537, 65573, 0, 65537, 65574, 0, 65537, 65575, 0, 65537, 65576, 0, 65537, 65577, 0, 65537, 65578, 0, 65537, 65579, 0, 65537, 65580, 0, 65537, 65581, 0, 65537, 65582, 0, 65537, 65583, 0, 65537, 65584, 0, 65537, 65585, 0, 65537, 65586, 0, 65537, 65587, 0, 65537, 65588, 0, 65537, 65589, 0, 65537, 65590, 0, 65537, 65591, 0, 65537, 65592, 0, 65537, 65593, 0, 65537, 65594, 0, 65537, 65595, 0, 65537, 65596, 0, 65537, 65597, 0, 65537, 65598, 0, 1048587, 65607, 0, 1048586, 65608, 0, 65537, 65609, 0, 65537, 65610, 0, 65537, 65611, 0, 65537, 65612, 0, 65537, 65613, 0, 1048587, 131073, 0, 458765, 131074, 0, 131073, 131075, 0, 131073, 131076, 0, 131073, 131077, 0, 131073, 131078, 0, 131073, 131079, 0, 131073, 131080, 0, 131073, 131081, 0, 131073, 131082, 0, 131073, 131083, 0, 131073, 131084, 0, 131073, 131085, 0, 131073, 131086, 0, 131073, 131087, 0, 131073, 131088, 0, 131073, 131089, 0, 131073, 131090, 0, 131073, 131091, 0, 131073, 131092, 0, 131073, 131093, 0, 131073, 131094, 0, 131073, 131095, 0, 131073, 131096, 0, 131073, 131097, 0, 131073, 131098, 0, 131073, 131099, 0, 131073, 131100, 0, 131073, 131101, 0, 131073, 131102, 0, 131073, 131103, 0, 131073, 131104, 0, 131073, 131105, 0, 131073, 131106, 0, 131073, 131107, 0, 131073, 131108, 0, 131073, 131109, 0, 131073, 131110, 0, 131073, 131111, 0, 131073, 131112, 0, 131073, 131113, 0, 131073, 131114, 0, 131073, 131115, 0, 131073, 131116, 0, 131073, 131117, 0, 131073, 131118, 0, 131073, 131119, 0, 131073, 131120, 0, 131073, 131121, 0, 131073, 131122, 0, 131073, 131123, 0, 131073, 131124, 0, 131073, 131125, 0, 131073, 131126, 0, 131073, 131127, 0, 131073, 131128, 0, 131073, 131129, 0, 131073, 131130, 0, 131073, 131131, 0, 131073, 131132, 0, 131073, 131133, 0, 131073, 131134, 0, 131073, 131135, 0, 655362, 131136, 0, 65537, 131137, 0, 65537, 131138, 0, 65537, 131139, 0, 65537, 131140, 0, 65537, 131141, 0, 65537, 131142, 0, 655364, 131143, 0, 131073, 131144, 0, 131073, 131145, 0, 131073, 131146, 0, 131073, 131147, 0, 131073, 131148, 0, 131073, 131149, 0, 131073, 131150, 0, 458766, 196609, 0, 131072, 196610, 0, 131073, 196611, 0, 131073, 196612, 0, 131073, 196613, 0, 131073, 196614, 0, 131073, 196615, 0, 131073, 196616, 0, 131073, 196617, 0, 131073, 196618, 0, 131073, 196619, 0, 131073, 196620, 0, 131073, 196621, 0, 131073, 196622, 0, 131073, 196623, 0, 131073, 196624, 0, 131073, 196625, 0, 131073, 196626, 0, 131073, 196627, 0, 131073, 196628, 0, 131073, 196629, 0, 131073, 196630, 0, 131073, 196631, 0, 131073, 196632, 0, 131073, 196633, 0, 131073, 196634, 0, 131073, 196635, 0, 131073, 196636, 0, 131073, 196637, 0, 131073, 196638, 0, 131073, 196639, 0, 131073, 196640, 0, 131073, 196641, 0, 131073, 196642, 0, 131073, 196643, 0, 131073, 196644, 0, 131073, 196645, 0, 131073, 196646, 0, 131073, 196647, 0, 131073, 196648, 0, 131073, 196649, 0, 131073, 196650, 0, 131073, 196651, 0, 131073, 196652, 0, 131073, 196653, 0, 131073, 196654, 0, 131073, 196655, 0, 131073, 196656, 0, 131073, 196657, 0, 131073, 196658, 0, 131073, 196659, 0, 131073, 196660, 0, 131073, 196661, 0, 131073, 196662, 0, 131073, 196663, 0, 131073, 196664, 0, 131073, 196665, 0, 131073, 196666, 0, 131073, 196667, 0, 131073, 196668, 0, 131073, 196669, 0, 131073, 196670, 0, 131073, 196671, 0, 131073, 196672, 0, 131073, 196673, 0, 131073, 196674, 0, 131073, 196675, 0, 131073, 196676, 0, 131073, 196677, 0, 131073, 196678, 0, 131073, 196679, 0, 131073, 196680, 0, 131073, 196681, 0, 131073, 196682, 0, 131073, 196683, 0, 131073, 196684, 0, 131073, 196685, 0, 131073, 196686, 0, 131074, 262145, 0, 131072, 262146, 0, 131073, 262147, 0, 131073, 262148, 0, 131073, 262149, 0, 131073, 262150, 0, 131073, 262151, 0, 131073, 262152, 0, 131073, 262153, 0, 131073, 262154, 0, 131073, 262155, 0, 131073, 262156, 0, 131073, 262157, 0, 131073, 262158, 0, 131073, 262159, 0, 131073, 262160, 0, 131073, 262161, 0, 131073, 262162, 0, 131073, 262163, 0, 131073, 262164, 0, 131073, 262165, 0, 131073, 262166, 0, 131073, 262167, 0, 131073, 262168, 0, 131073, 262169, 0, 131073, 262170, 0, 131073, 262171, 0, 131073, 262172, 0, 131073, 262173, 0, 131073, 262174, 0, 131073, 262175, 0, 131073, 262176, 0, 131073, 262177, 0, 131073, 262178, 0, 131073, 262179, 0, 131073, 262180, 0, 131073, 262181, 0, 131073, 262182, 0, 131073, 262183, 0, 131073, 262184, 0, 131073, 262185, 0, 131073, 262186, 0, 131073, 262187, 0, 131073, 262188, 0, 131073, 262189, 0, 131073, 262190, 0, 131073, 262191, 0, 131073, 262192, 0, 131073, 262193, 0, 131073, 262194, 0, 131073, 262195, 0, 131073, 262196, 0, 131073, 262197, 0, 131073, 262198, 0, 131073, 262199, 0, 131073, 262200, 0, 131073, 262201, 0, 131073, 262202, 0, 131073, 262203, 0, 131073, 262204, 0, 131073, 262205, 0, 131073, 262206, 0, 131073, 262207, 0, 131073, 262208, 0, 131073, 262209, 0, 131073, 262210, 0, 131073, 262211, 0, 131073, 262212, 0, 131073, 262213, 0, 131073, 262214, 0, 131073, 262215, 0, 131073, 262216, 0, 131073, 262217, 0, 131073, 262218, 0, 131073, 262219, 0, 131073, 262220, 0, 131073, 262221, 0, 131073, 262222, 0, 131074, 327681, 0, 131072, 327682, 0, 131073, 327683, 0, 131073, 327684, 0, 131073, 327685, 0, 131073, 327686, 0, 131073, 327687, 0, 131073, 327688, 0, 131073, 327689, 0, 131073, 327690, 0, 131073, 327691, 0, 131073, 327692, 0, 131073, 327693, 0, 131073, 327694, 0, 131073, 327695, 0, 131073, 327696, 0, 131073, 327697, 0, 131073, 327698, 0, 131073, 327699, 0, 131073, 327700, 0, 131073, 327701, 0, 131073, 327702, 0, 131073, 327703, 0, 131073, 327704, 0, 131073, 327705, 0, 131073, 327706, 0, 131073, 327707, 0, 131073, 327708, 0, 131073, 327709, 0, 131073, 327710, 0, 131073, 327711, 0, 131073, 327712, 0, 131073, 327713, 0, 131073, 327714, 0, 131073, 327715, 0, 131073, 327716, 0, 131073, 327717, 0, 131073, 327718, 0, 131073, 327719, 0, 131073, 327720, 0, 131073, 327721, 0, 131073, 327722, 0, 131073, 327723, 0, 131073, 327724, 0, 131073, 327725, 0, 131073, 327726, 0, 131073, 327727, 0, 131073, 327728, 0, 131073, 327729, 0, 131073, 327730, 0, 131073, 327731, 0, 131073, 327732, 0, 131073, 327733, 0, 131073, 327734, 0, 131073, 327735, 0, 131073, 327736, 0, 131073, 327737, 0, 131073, 327738, 0, 131073, 327739, 0, 131073, 327740, 0, 131073, 327741, 0, 131073, 327742, 0, 131073, 327743, 0, 131073, 327744, 0, 131073, 327745, 0, 131073, 327746, 0, 131073, 327747, 0, 131073, 327748, 0, 131073, 327749, 0, 131073, 327750, 0, 131073, 327751, 0, 131073, 327752, 0, 131073, 327753, 0, 131073, 327754, 0, 131073, 327755, 0, 131073, 327756, 0, 131073, 327757, 0, 131073, 327758, 0, 131074, 393217, 0, 131072, 393218, 0, 131073, 393219, 0, 131073, 393220, 0, 131073, 393221, 0, 131073, 393222, 0, 131073, 393223, 0, 131073, 393224, 0, 131073, 393225, 0, 131073, 393226, 0, 131073, 393227, 0, 131073, 393228, 0, 131073, 393229, 0, 131073, 393230, 0, 131073, 393231, 0, 131073, 393232, 0, 131073, 393233, 0, 131073, 393234, 0, 131073, 393235, 0, 131073, 393236, 0, 131073, 393237, 0, 131073, 393238, 0, 131073, 393239, 0, 131073, 393240, 0, 131073, 393241, 0, 131073, 393242, 0, 131073, 393243, 0, 131073, 393244, 0, 131073, 393245, 0, 131073, 393246, 0, 131073, 393247, 0, 131073, 393248, 0, 131073, 393249, 0, 131073, 393250, 0, 131073, 393251, 0, 131073, 393252, 0, 131073, 393253, 0, 131073, 393254, 0, 131073, 393255, 0, 131073, 393256, 0, 131073, 393257, 0, 131073, 393258, 0, 131073, 393259, 0, 131073, 393260, 0, 131073, 393261, 0, 131073, 393262, 0, 131073, 393263, 0, 131073, 393264, 0, 131073, 393265, 0, 131073, 393266, 0, 131073, 393267, 0, 131073, 393268, 0, 131073, 393269, 0, 131073, 393270, 0, 131073, 393271, 0, 131073, 393272, 0, 131073, 393273, 0, 131073, 393274, 0, 131073, 393275, 0, 131073, 393276, 0, 131073, 393277, 0, 131073, 393278, 0, 131073, 393279, 0, 131073, 393280, 0, 131073, 393281, 0, 131073, 393282, 0, 131073, 393283, 0, 131073, 393284, 0, 131073, 393285, 0, 131073, 393286, 0, 131073, 393287, 0, 131073, 393288, 0, 131073, 393289, 0, 131073, 393290, 0, 131073, 393291, 0, 131073, 393292, 0, 131073, 393293, 0, 131073, 393294, 0, 131074, 458753, 0, 131072, 458754, 0, 131073, 458755, 0, 131073, 458756, 0, 131073, 458757, 0, 131073, 458758, 0, 131073, 458759, 0, 131073, 458760, 0, 131073, 458761, 0, 131073, 458762, 0, 131073, 458763, 0, 131073, 458764, 0, 131073, 458765, 0, 131073, 458766, 0, 131073, 458767, 0, 131073, 458768, 0, 131073, 458769, 0, 131073, 458770, 0, 131073, 458771, 0, 131073, 458772, 0, 131073, 458773, 0, 131073, 458774, 0, 131073, 458775, 0, 131073, 458776, 0, 131073, 458777, 0, 131073, 458778, 0, 131073, 458779, 0, 131073, 458780, 0, 131073, 458781, 0, 131073, 458782, 0, 131073, 458783, 0, 131073, 458784, 0, 131073, 458785, 0, 131073, 458786, 0, 131073, 458787, 0, 131073, 458788, 0, 131073, 458789, 0, 131073, 458790, 0, 131073, 458791, 0, 131073, 458792, 0, 131073, 458793, 0, 131073, 458794, 0, 131073, 458795, 0, 131073, 458796, 0, 131073, 458797, 0, 131073, 458798, 0, 131073, 458799, 0, 131073, 458800, 0, 131073, 458801, 0, 131073, 458802, 0, 131073, 458803, 0, 131073, 458804, 0, 131073, 458805, 0, 131073, 458806, 0, 131073, 458807, 0, 131073, 458808, 0, 131073, 458809, 0, 131073, 458810, 0, 131073, 458811, 0, 131073, 458812, 0, 131073, 458813, 0, 131073, 458814, 0, 131073, 458815, 0, 131073, 458816, 0, 131073, 458817, 0, 131073, 458818, 0, 131073, 458819, 0, 131073, 458820, 0, 131073, 458821, 0, 131073, 458822, 0, 131073, 458823, 0, 131073, 458824, 0, 131073, 458825, 0, 131073, 458826, 0, 131073, 458827, 0, 131073, 458828, 0, 131073, 458829, 0, 131073, 458830, 0, 131074, 524289, 0, 524301, 524290, 0, 131073, 524291, 0, 131073, 524292, 0, 131073, 524293, 0, 131073, 524294, 0, 131073, 524295, 0, 131073, 524296, 0, 131073, 524297, 0, 131073, 524298, 0, 131073, 524299, 0, 131073, 524300, 0, 131073, 524301, 0, 131073, 524302, 0, 131073, 524303, 0, 131073, 524304, 0, 131073, 524305, 0, 131073, 524306, 0, 131073, 524307, 0, 131073, 524308, 0, 131073, 524309, 0, 131073, 524310, 0, 131073, 524311, 0, 131073, 524312, 0, 131073, 524313, 0, 131073, 524314, 0, 131073, 524315, 0, 131073, 524316, 0, 131073, 524317, 0, 131073, 524318, 0, 131073, 524319, 0, 131073, 524320, 0, 131073, 524321, 0, 131073, 524322, 0, 131073, 524323, 0, 131073, 524324, 0, 131073, 524325, 0, 131073, 524326, 0, 131073, 524327, 0, 131073, 524328, 0, 131073, 524329, 0, 131073, 524330, 0, 131073, 524331, 0, 131073, 524332, 0, 131073, 524333, 0, 131073, 524334, 0, 131073, 524335, 0, 131073, 524336, 0, 131073, 524337, 0, 131073, 524338, 0, 131073, 524339, 0, 131073, 524340, 0, 131073, 524341, 0, 131073, 524342, 0, 131073, 524343, 0, 131073, 524344, 0, 131073, 524345, 0, 131073, 524346, 0, 131073, 524347, 0, 131073, 524348, 0, 131073, 524349, 0, 131073, 524350, 0, 131073, 524351, 0, 131073, 524352, 0, 131073, 524353, 0, 131073, 524354, 0, 131073, 524355, 0, 131073, 524356, 0, 131073, 524357, 0, 131073, 524358, 0, 131073, 524359, 0, 131073, 524360, 0, 131073, 524361, 0, 131073, 524362, 0, 131073, 524363, 0, 131073, 524364, 0, 131073, 524365, 0, 131073, 524366, 0, 131074, 589826, 0, 327685, 589827, 0, 131073, 589828, 0, 131073, 589829, 0, 131073, 589830, 0, 131073, 589831, 0, 131073, 589832, 0, 131073, 589833, 0, 131073, 589834, 0, 131073, 589835, 0, 131073, 589836, 0, 131073, 589837, 0, 131073, 589838, 0, 131073, 589839, 0, 131073, 589840, 0, 131073, 589841, 0, 131073, 589842, 0, 131073, 589843, 0, 131073, 589844, 0, 131073, 589845, 0, 131073, 589846, 0, 131073, 589847, 0, 131073, 589848, 0, 131073, 589849, 0, 131073, 589850, 0, 131073, 589851, 0, 131073, 589852, 0, 131073, 589853, 0, 131073, 589854, 0, 131073, 589855, 0, 131073, 589856, 0, 131073, 589857, 0, 131073, 589858, 0, 131073, 589859, 0, 131073, 589860, 0, 131073, 589861, 0, 131073, 589862, 0, 131073, 589863, 0, 131073, 589864, 0, 131073, 589865, 0, 131073, 589866, 0, 131073, 589867, 0, 131073, 589868, 0, 131073, 589869, 0, 131073, 589870, 0, 131073, 589871, 0, 131073, 589872, 0, 131073, 589873, 0, 131073, 589874, 0, 131073, 589875, 0, 131073, 589876, 0, 131073, 589877, 0, 131073, 589878, 0, 131073, 589879, 0, 131073, 589880, 0, 131073, 589881, 0, 131073, 589882, 0, 131073, 589883, 0, 131073, 589884, 0, 131073, 589885, 0, 131073, 589886, 0, 131073, 589887, 0, 131073, 589888, 0, 131073, 589889, 0, 131073, 589890, 0, 131073, 589891, 0, 131073, 589892, 0, 131073, 589893, 0, 131073, 589894, 0, 131073, 589895, 0, 131073, 589896, 0, 131073, 589897, 0, 131073, 589898, 0, 131073, 589899, 0, 131073, 589900, 0, 131073, 589901, 0, 131073, 589902, 0, 131074, 655363, 0, 327685, 655364, 0, 131073, 655365, 0, 131073, 655366, 0, 131073, 655367, 0, 131073, 655368, 0, 131073, 655369, 0, 131073, 655370, 0, 131073, 655371, 0, 131073, 655372, 0, 131073, 655373, 0, 131073, 655374, 0, 131073, 655375, 0, 131073, 655376, 0, 131073, 655377, 0, 131073, 655378, 0, 131073, 655379, 0, 131073, 655380, 0, 131073, 655381, 0, 131073, 655382, 0, 131073, 655383, 0, 131073, 655384, 0, 131073, 655385, 0, 131073, 655386, 0, 131073, 655387, 0, 131073, 655388, 0, 131073, 655389, 0, 131073, 655390, 0, 131073, 655391, 0, 131073, 655392, 0, 131073, 655393, 0, 131073, 655394, 0, 131073, 655395, 0, 131073, 655396, 0, 131073, 655397, 0, 131073, 655398, 0, 131073, 655399, 0, 131073, 655400, 0, 131073, 655401, 0, 131073, 655402, 0, 131073, 655403, 0, 131073, 655404, 0, 131073, 655405, 0, 131073, 655406, 0, 131073, 655407, 0, 131073, 655408, 0, 131073, 655409, 0, 131073, 655410, 0, 131073, 655411, 0, 131073, 655412, 0, 131073, 655413, 0, 131073, 655414, 0, 131073, 655415, 0, 131073, 655416, 0, 131073, 655417, 0, 131073, 655418, 0, 131073, 655419, 0, 131073, 655420, 0, 131073, 655421, 0, 131073, 655422, 0, 131073, 655423, 0, 131073, 655424, 0, 131073, 655425, 0, 131073, 655426, 0, 131073, 655427, 0, 131073, 655428, 0, 131073, 655429, 0, 131073, 655430, 0, 131073, 655431, 0, 131073, 655432, 0, 131073, 655433, 0, 131073, 655434, 0, 131073, 655435, 0, 131073, 655436, 0, 131073, 655437, 0, 131073, 655438, 0, 131074, 720900, 0, 393222, 720901, 0, 131073, 720902, 0, 131073, 720903, 0, 131073, 720904, 0, 131073, 720905, 0, 131073, 720906, 0, 131073, 720907, 0, 131073, 720908, 0, 131073, 720909, 0, 131073, 720910, 0, 131073, 720911, 0, 131073, 720912, 0, 131073, 720913, 0, 131073, 720914, 0, 131073, 720915, 0, 131073, 720916, 0, 131073, 720917, 0, 131073, 720918, 0, 131073, 720919, 0, 131073, 720920, 0, 131073, 720921, 0, 131073, 720922, 0, 131073, 720923, 0, 131073, 720924, 0, 131073, 720925, 0, 131073, 720926, 0, 131073, 720927, 0, 131073, 720928, 0, 131073, 720929, 0, 131073, 720930, 0, 131073, 720931, 0, 131073, 720932, 0, 131073, 720933, 0, 131073, 720934, 0, 131073, 720935, 0, 131073, 720936, 0, 131073, 720937, 0, 131073, 720938, 0, 131073, 720939, 0, 131073, 720940, 0, 131073, 720941, 0, 131073, 720942, 0, 131073, 720943, 0, 131073, 720944, 0, 131073, 720945, 0, 131073, 720946, 0, 131073, 720947, 0, 131073, 720948, 0, 131073, 720949, 0, 131073, 720950, 0, 131073, 720951, 0, 131073, 720952, 0, 131073, 720953, 0, 131073, 720954, 0, 131073, 720955, 0, 131073, 720956, 0, 131073, 720957, 0, 131073, 720958, 0, 131073, 720959, 0, 131073, 720960, 0, 131073, 720961, 0, 131073, 720962, 0, 131073, 720963, 0, 131073, 720964, 0, 131073, 720965, 0, 131073, 720966, 0, 131073, 720967, 0, 131073, 720968, 0, 131073, 720969, 0, 131073, 720970, 0, 131073, 720971, 0, 131073, 720972, 0, 131073, 720973, 0, 131073, 720974, 0, 131074, 786436, 0, 131072, 786437, 0, 131073, 786438, 0, 131073, 786439, 0, 131073, 786440, 0, 131073, 786441, 0, 131073, 786442, 0, 131073, 786443, 0, 131073, 786444, 0, 131073, 786445, 0, 131073, 786446, 0, 131073, 786447, 0, 131073, 786448, 0, 131073, 786449, 0, 131073, 786450, 0, 131073, 786451, 0, 131073, 786452, 0, 131073, 786453, 0, 131073, 786454, 0, 131073, 786455, 0, 131073, 786456, 0, 131073, 786457, 0, 131073, 786458, 0, 131073, 786459, 0, 131073, 786460, 0, 131073, 786461, 0, 131073, 786462, 0, 131073, 786463, 0, 131073, 786464, 0, 131073, 786465, 0, 131073, 786466, 0, 131073, 786467, 0, 131073, 786468, 0, 131073, 786469, 0, 131073, 786470, 0, 131073, 786471, 0, 131073, 786472, 0, 131073, 786473, 0, 131073, 786474, 0, 131073, 786475, 0, 131073, 786476, 0, 131073, 786477, 0, 131073, 786478, 0, 131073, 786479, 0, 131073, 786480, 0, 131073, 786481, 0, 131073, 786482, 0, 131073, 786483, 0, 131073, 786484, 0, 131073, 786485, 0, 131073, 786486, 0, 131073, 786487, 0, 131073, 786488, 0, 131073, 786489, 0, 131073, 786490, 0, 131073, 786491, 0, 131073, 786492, 0, 131073, 786493, 0, 131073, 786494, 0, 131073, 786495, 0, 131073, 786496, 0, 131073, 786497, 0, 131073, 786498, 0, 131073, 786499, 0, 131073, 786500, 0, 131073, 786501, 0, 131073, 786502, 0, 131073, 786503, 0, 131073, 786504, 0, 131073, 786505, 0, 131073, 786506, 0, 131073, 786507, 0, 131073, 786508, 0, 131073, 786509, 0, 131073, 786510, 0, 131074, 851972, 0, 524294, 851973, 0, 131073, 851974, 0, 131073, 851975, 0, 131073, 851976, 0, 131073, 851977, 0, 131073, 851978, 0, 131073, 851979, 0, 131073, 851980, 0, 131073, 851981, 0, 131073, 851982, 0, 131073, 851983, 0, 131073, 851984, 0, 131073, 851985, 0, 131073, 851986, 0, 131073, 851987, 0, 131073, 851988, 0, 131073, 851989, 0, 131073, 851990, 0, 131073, 851991, 0, 131073, 851992, 0, 131073, 851993, 0, 131073, 851994, 0, 131073, 851995, 0, 131073, 851996, 0, 131073, 851997, 0, 131073, 851998, 0, 131073, 851999, 0, 131073, 852000, 0, 131073, 852001, 0, 131073, 852002, 0, 131073, 852003, 0, 131073, 852004, 0, 131073, 852005, 0, 131073, 852006, 0, 131073, 852007, 0, 131073, 852008, 0, 131073, 852009, 0, 131073, 852010, 0, 131073, 852011, 0, 131073, 852012, 0, 131073, 852013, 0, 131073, 852014, 0, 131073, 852015, 0, 131073, 852016, 0, 131073, 852017, 0, 131073, 852018, 0, 131073, 852019, 0, 131073, 852020, 0, 131073, 852021, 0, 131073, 852022, 0, 131073, 852023, 0, 131073, 852024, 0, 131073, 852025, 0, 131073, 852026, 0, 131073, 852027, 0, 131073, 852028, 0, 131073, 852029, 0, 131073, 852030, 0, 131073, 852031, 0, 131073, 852032, 0, 131073, 852033, 0, 131073, 852034, 0, 131073, 852035, 0, 131073, 852036, 0, 131073, 852037, 0, 131073, 852038, 0, 131073, 852039, 0, 131073, 852040, 0, 131073, 852041, 0, 131073, 852042, 0, 131073, 852043, 0, 131073, 852044, 0, 131073, 852045, 0, 131073, 852046, 0, 131074, 917507, 0, 589829, 917508, 0, 131073, 917509, 0, 131073, 917510, 0, 131073, 917511, 0, 131073, 917512, 0, 131073, 917513, 0, 131073, 917514, 0, 131073, 917515, 0, 131073, 917516, 0, 131073, 917517, 0, 131073, 917518, 0, 131073, 917519, 0, 131073, 917520, 0, 131073, 917521, 0, 131073, 917522, 0, 131073, 917523, 0, 131073, 917524, 0, 131073, 917525, 0, 131073, 917526, 0, 131073, 917527, 0, 131073, 917528, 0, 131073, 917529, 0, 131073, 917530, 0, 131073, 917531, 0, 131073, 917532, 0, 131073, 917533, 0, 131073, 917534, 0, 131073, 917535, 0, 131073, 917536, 0, 131073, 917537, 0, 131073, 917538, 0, 131073, 917539, 0, 131073, 917540, 0, 131073, 917541, 0, 131073, 917542, 0, 131073, 917543, 0, 131073, 917544, 0, 131073, 917545, 0, 131073, 917546, 0, 131073, 917547, 0, 131073, 917548, 0, 131073, 917549, 0, 131073, 917550, 0, 131073, 917551, 0, 131073, 917552, 0, 131073, 917553, 0, 131073, 917554, 0, 131073, 917555, 0, 131073, 917556, 0, 131073, 917557, 0, 131073, 917558, 0, 131073, 917559, 0, 131073, 917560, 0, 131073, 917561, 0, 131073, 917562, 0, 131073, 917563, 0, 131073, 917564, 0, 131073, 917565, 0, 131073, 917566, 0, 131073, 917567, 0, 131073, 917568, 0, 131073, 917569, 0, 131073, 917570, 0, 131073, 917571, 0, 131073, 917572, 0, 131073, 917573, 0, 131073, 917574, 0, 131073, 917575, 0, 131073, 917576, 0, 131073, 917577, 0, 131073, 917578, 0, 131073, 917579, 0, 131073, 917580, 0, 131073, 917581, 0, 131073, 917582, 0, 131074, 1048571, 0, 65553, 983041, 0, 65536, 983042, 0, 655364, 983043, 0, 131073, 983044, 0, 131073, 983045, 0, 131073, 983046, 0, 131073, 983047, 0, 131073, 983048, 0, 131073, 983049, 0, 131073, 983050, 0, 131073, 983051, 0, 131073, 983052, 0, 131073, 983053, 0, 131073, 983054, 0, 131073, 983055, 0, 131073, 983056, 0, 131073, 983057, 0, 131073, 983058, 0, 131073, 983059, 0, 131073, 983060, 0, 131073, 983061, 0, 131073, 983062, 0, 131073, 983063, 0, 131073, 983064, 0, 131073, 983065, 0, 131073, 983066, 0, 131073, 983067, 0, 131073, 983068, 0, 131073, 983069, 0, 131073, 983070, 0, 131073, 983071, 0, 131073, 983072, 0, 131073, 983073, 0, 131073, 983074, 0, 131073, 983075, 0, 131073, 983076, 0, 131073, 983077, 0, 131073, 983078, 0, 131073, 983079, 0, 131073, 983080, 0, 131073, 983081, 0, 131073, 983082, 0, 131073, 983083, 0, 131073, 983084, 0, 131073, 983085, 0, 131073, 983086, 0, 131073, 983087, 0, 131073, 983088, 0, 131073, 983089, 0, 131073, 983090, 0, 131073, 983091, 0, 131073, 983092, 0, 131073, 983093, 0, 131073, 983094, 0, 131073, 983095, 0, 131073, 983096, 0, 131073, 983097, 0, 131073, 983098, 0, 131073, 983099, 0, 131073, 983100, 0, 131073, 983101, 0, 131073, 983102, 0, 131073, 983103, 0, 131073, 983104, 0, 131073, 983105, 0, 131073, 983106, 0, 131073, 983107, 0, 131073, 983108, 0, 131073, 983109, 0, 131073, 983110, 0, 131073, 983111, 0, 131073, 983112, 0, 131073, 983113, 0, 131073, 983114, 0, 131073, 983115, 0, 131073, 983116, 0, 131073, 983117, 0, 131073, 983118, 0, 131074, 1048577, 0, 131072, 1048578, 0, 131073, 1048579, 0, 131073, 1048580, 0, 131073, 1048581, 0, 131073, 1048582, 0, 131073, 1048583, 0, 131073, 1048584, 0, 131073, 1048585, 0, 131073, 1048586, 0, 131073, 1048587, 0, 131073, 1048588, 0, 131073, 1048589, 0, 131073, 1048590, 0, 131073, 1048591, 0, 131073, 1048592, 0, 131073, 1048593, 0, 131073, 1048594, 0, 131073, 1048595, 0, 131073, 1048596, 0, 131073, 1048597, 0, 131073, 1048598, 0, 131073, 1048599, 0, 131073, 1048600, 0, 131073, 1048601, 0, 131073, 1048602, 0, 131073, 1048603, 0, 131073, 1048604, 0, 131073, 1048605, 0, 131073, 1048606, 0, 131073, 1048607, 0, 131073, 1048608, 0, 131073, 1048609, 0, 131073, 1048610, 0, 131073, 1048611, 0, 131073, 1048612, 0, 131073, 1048613, 0, 131073, 1048614, 0, 131073, 1048615, 0, 131073, 1048616, 0, 131073, 1048617, 0, 131073, 1048618, 0, 131073, 1048619, 0, 131073, 1048620, 0, 131073, 1048621, 0, 131073, 1048622, 0, 131073, 1048623, 0, 131073, 1048624, 0, 131073, 1048625, 0, 131073, 1048626, 0, 131073, 1048627, 0, 131073, 1048628, 0, 131073, 1048629, 0, 131073, 1048630, 0, 131073, 1048631, 0, 131073, 1048632, 0, 131073, 1048633, 0, 131073, 1048634, 0, 131073, 1048635, 0, 131073, 1048636, 0, 131073, 1048637, 0, 131073, 1048638, 0, 131073, 1048639, 0, 131073, 1048640, 0, 131073, 1048641, 0, 131073, 1048642, 0, 131073, 1048643, 0, 131073, 1048644, 0, 131073, 1048645, 0, 131073, 1048646, 0, 131073, 1048647, 0, 131073, 1048648, 0, 131073, 1048649, 0, 131073, 1048650, 0, 131073, 1048651, 0, 131073, 1048652, 0, 131073, 1048653, 0, 131073, 1048654, 0, 131074, 1114113, 0, 131072, 1114114, 0, 131073, 1114115, 0, 131073, 1114116, 0, 131073, 1114117, 0, 131073, 1114118, 0, 131073, 1114119, 0, 131073, 1114120, 0, 131073, 1114121, 0, 131073, 1114122, 0, 131073, 1114123, 0, 131073, 1114124, 0, 131073, 1114125, 0, 131073, 1114126, 0, 131073, 1114127, 0, 131073, 1114128, 0, 131073, 1114129, 0, 131073, 1114130, 0, 131073, 1114131, 0, 131073, 1114132, 0, 131073, 1114133, 0, 131073, 1114134, 0, 131073, 1114135, 0, 131073, 1114136, 0, 131073, 1114137, 0, 131073, 1114138, 0, 131073, 1114139, 0, 131073, 1114140, 0, 131073, 1114141, 0, 131073, 1114142, 0, 131073, 1114143, 0, 131073, 1114144, 0, 131073, 1114145, 0, 131073, 1114146, 0, 131073, 1114147, 0, 131073, 1114148, 0, 131073, 1114149, 0, 131073, 1114150, 0, 131073, 1114151, 0, 131073, 1114152, 0, 131073, 1114153, 0, 131073, 1114154, 0, 131073, 1114155, 0, 131073, 1114156, 0, 131073, 1114157, 0, 131073, 1114158, 0, 131073, 1114159, 0, 131073, 1114160, 0, 131073, 1114161, 0, 131073, 1114162, 0, 131073, 1114163, 0, 131073, 1114164, 0, 131073, 1114165, 0, 131073, 1114166, 0, 131073, 1114167, 0, 131073, 1114168, 0, 131073, 1114169, 0, 131073, 1114170, 0, 131073, 1114171, 0, 131073, 1114172, 0, 131073, 1114173, 0, 131073, 1114174, 0, 131073, 1114175, 0, 131073, 1114176, 0, 131073, 1114177, 0, 131073, 1114178, 0, 131073, 1114179, 0, 131073, 1114180, 0, 131073, 1114181, 0, 131073, 1114182, 0, 131073, 1114183, 0, 131073, 1114184, 0, 131073, 1114185, 0, 131073, 1114186, 0, 131073, 1114187, 0, 131073, 1114188, 0, 131073, 1114189, 0, 131073, 1114190, 0, 131074, 1179649, 0, 131072, 1179650, 0, 131073, 1179651, 0, 131073, 1179652, 0, 131073, 1179653, 0, 131073, 1179654, 0, 131073, 1179655, 0, 131073, 1179656, 0, 131073, 1179657, 0, 131073, 1179658, 0, 131073, 1179659, 0, 131073, 1179660, 0, 131073, 1179661, 0, 131073, 1179662, 0, 131073, 1179663, 0, 131073, 1179664, 0, 131073, 1179665, 0, 131073, 1179666, 0, 131073, 1179667, 0, 131073, 1179668, 0, 131073, 1179669, 0, 131073, 1179670, 0, 131073, 1179671, 0, 131073, 1179672, 0, 131073, 1179673, 0, 131073, 1179674, 0, 131073, 1179675, 0, 131073, 1179676, 0, 131073, 1179677, 0, 131073, 1179678, 0, 131073, 1179679, 0, 131073, 1179680, 0, 131073, 1179681, 0, 131073, 1179682, 0, 131073, 1179683, 0, 131073, 1179684, 0, 131073, 1179685, 0, 131073, 1179686, 0, 131073, 1179687, 0, 131073, 1179688, 0, 131073, 1179689, 0, 131073, 1179690, 0, 131073, 1179691, 0, 131073, 1179692, 0, 131073, 1179693, 0, 131073, 1179694, 0, 131073, 1179695, 0, 131073, 1179696, 0, 131073, 1179697, 0, 131073, 1179698, 0, 131073, 1179699, 0, 131073, 1179700, 0, 131073, 1179701, 0, 131073, 1179702, 0, 131073, 1179703, 0, 131073, 1179704, 0, 131073, 1179705, 0, 131073, 1179706, 0, 131073, 1179707, 0, 131073, 1179708, 0, 131073, 1179709, 0, 131073, 1179710, 0, 131073, 1179711, 0, 131073, 1179712, 0, 131073, 1179713, 0, 131073, 1179714, 0, 131073, 1179715, 0, 131073, 1179716, 0, 131073, 1179717, 0, 131073, 1179718, 0, 131073, 1179719, 0, 131073, 1179720, 0, 131073, 1179721, 0, 131073, 1179722, 0, 131073, 1179723, 0, 131073, 1179724, 0, 131073, 1179725, 0, 131073, 1179726, 0, 131074, 1245185, 0, 131072, 1245186, 0, 131073, 1245187, 0, 131073, 1245188, 0, 131073, 1245189, 0, 131073, 1245190, 0, 131073, 1245191, 0, 131073, 1245192, 0, 131073, 1245193, 0, 131073, 1245194, 0, 131073, 1245195, 0, 131073, 1245196, 0, 131073, 1245197, 0, 131073, 1245198, 0, 131073, 1245199, 0, 131073, 1245200, 0, 131073, 1245201, 0, 131073, 1245202, 0, 131073, 1245203, 0, 131073, 1245204, 0, 131073, 1245205, 0, 131073, 1245206, 0, 131073, 1245207, 0, 131073, 1245208, 0, 131073, 1245209, 0, 131073, 1245210, 0, 131073, 1245211, 0, 131073, 1245212, 0, 131073, 1245213, 0, 131073, 1245214, 0, 131073, 1245215, 0, 131073, 1245216, 0, 131073, 1245217, 0, 131073, 1245218, 0, 131073, 1245219, 0, 131073, 1245220, 0, 131073, 1245221, 0, 131073, 1245222, 0, 131073, 1245223, 0, 131073, 1245224, 0, 131073, 1245225, 0, 131073, 1245226, 0, 131073, 1245227, 0, 131073, 1245228, 0, 131073, 1245229, 0, 131073, 1245230, 0, 131073, 1245231, 0, 131073, 1245232, 0, 131073, 1245233, 0, 131073, 1245234, 0, 131073, 1245235, 0, 131073, 1245236, 0, 131073, 1245237, 0, 131073, 1245238, 0, 131073, 1245239, 0, 131073, 1245240, 0, 131073, 1245241, 0, 131073, 1245242, 0, 131073, 1245243, 0, 131073, 1245244, 0, 131073, 1245245, 0, 131073, 1245246, 0, 131073, 1245247, 0, 131073, 1245248, 0, 131073, 1245249, 0, 131073, 1245250, 0, 131073, 1245251, 0, 131073, 1245252, 0, 131073, 1245253, 0, 131073, 1245254, 0, 131073, 1245255, 0, 131073, 1245256, 0, 131073, 1245257, 0, 131073, 1245258, 0, 131073, 1245259, 0, 131073, 1245260, 0, 131073, 1245261, 0, 131073, 1245262, 0, 131074, 1310721, 0, 131072, 1310722, 0, 131073, 1310723, 0, 131073, 1310724, 0, 131073, 1310725, 0, 131073, 1310726, 0, 131073, 1310727, 0, 131073, 1310728, 0, 131073, 1310729, 0, 131073, 1310730, 0, 131073, 1310731, 0, 131073, 1310732, 0, 131073, 1310733, 0, 131073, 1310734, 0, 131073, 1310735, 0, 131073, 1310736, 0, 131073, 1310737, 0, 131073, 1310738, 0, 131073, 1310739, 0, 131073, 1310740, 0, 131073, 1310741, 0, 131073, 1310742, 0, 131073, 1310743, 0, 131073, 1310744, 0, 131073, 1310745, 0, 131073, 1310746, 0, 131073, 1310747, 0, 131073, 1310748, 0, 131073, 1310749, 0, 131073, 1310750, 0, 131073, 1310751, 0, 131073, 1310752, 0, 131073, 1310753, 0, 131073, 1310754, 0, 131073, 1310755, 0, 131073, 1310756, 0, 131073, 1310757, 0, 131073, 1310758, 0, 131073, 1310759, 0, 131073, 1310760, 0, 131073, 1310761, 0, 131073, 1310762, 0, 131073, 1310763, 0, 131073, 1310764, 0, 131073, 1310765, 0, 131073, 1310766, 0, 131073, 1310767, 0, 131073, 1310768, 0, 131073, 1310769, 0, 131073, 1310770, 0, 131073, 1310771, 0, 131073, 1310772, 0, 131073, 1310773, 0, 131073, 1310774, 0, 131073, 1310775, 0, 131073, 1310776, 0, 131073, 1310777, 0, 131073, 1310778, 0, 131073, 1310779, 0, 131073, 1310780, 0, 131073, 1310781, 0, 131073, 1310782, 0, 131073, 1310783, 0, 131073, 1310784, 0, 131073, 1310785, 0, 131073, 1310786, 0, 131073, 1310787, 0, 131073, 1310788, 0, 131073, 1310789, 0, 131073, 1310790, 0, 131073, 1310791, 0, 131073, 1310792, 0, 131073, 1310793, 0, 131073, 1310794, 0, 131073, 1310795, 0, 131073, 1310796, 0, 131073, 1310797, 0, 131073, 1310798, 0, 131074, 1376257, 0, 131072, 1376258, 0, 131073, 1376259, 0, 131073, 1376260, 0, 131073, 1376261, 0, 131073, 1376262, 0, 131073, 1376263, 0, 131073, 1376264, 0, 131073, 1376265, 0, 131073, 1376266, 0, 131073, 1376267, 0, 131073, 1376268, 0, 131073, 1376269, 0, 131073, 1376270, 0, 131073, 1376271, 0, 131073, 1376272, 0, 131073, 1376273, 0, 131073, 1376274, 0, 131073, 1376275, 0, 131073, 1376276, 0, 131073, 1376277, 0, 131073, 1376278, 0, 131073, 1376279, 0, 131073, 1376280, 0, 131073, 1376281, 0, 131073, 1376282, 0, 131073, 1376283, 0, 131073, 1376284, 0, 131073, 1376285, 0, 131073, 1376286, 0, 131073, 1376287, 0, 131073, 1376288, 0, 131073, 1376289, 0, 131073, 1376290, 0, 131073, 1376291, 0, 131073, 1376292, 0, 131073, 1376293, 0, 131073, 1376294, 0, 131073, 1376295, 0, 131073, 1376296, 0, 131073, 1376297, 0, 131073, 1376298, 0, 131073, 1376299, 0, 131073, 1376300, 0, 131073, 1376301, 0, 131073, 1376302, 0, 131073, 1376303, 0, 131073, 1376304, 0, 131073, 1376305, 0, 131073, 1376306, 0, 131073, 1376307, 0, 131073, 1376308, 0, 131073, 1376309, 0, 131073, 1376310, 0, 131073, 1376311, 0, 131073, 1376312, 0, 131073, 1376313, 0, 131073, 1376314, 0, 131073, 1376315, 0, 131073, 1376316, 0, 131073, 1376317, 0, 131073, 1376318, 0, 131073, 1376319, 0, 131073, 1376320, 0, 131073, 1376321, 0, 131073, 1376322, 0, 131073, 1376323, 0, 131073, 1376324, 0, 131073, 1376325, 0, 131073, 1376326, 0, 131073, 1376327, 0, 131073, 1376328, 0, 131073, 1376329, 0, 131073, 1376330, 0, 131073, 1376331, 0, 131073, 1376332, 0, 131073, 1376333, 0, 131073, 1376334, 0, 131074, 1441793, 0, 131072, 1441794, 0, 131073, 1441795, 0, 131073, 1441796, 0, 131073, 1441797, 0, 131073, 1441798, 0, 131073, 1441799, 0, 131073, 1441800, 0, 131073, 1441801, 0, 131073, 1441802, 0, 131073, 1441803, 0, 131073, 1441804, 0, 131073, 1441805, 0, 131073, 1441806, 0, 131073, 1441807, 0, 131073, 1441808, 0, 131073, 1441809, 0, 131073, 1441810, 0, 131073, 1441811, 0, 131073, 1441812, 0, 131073, 1441813, 0, 131073, 1441814, 0, 131073, 1441815, 0, 131073, 1441816, 0, 131073, 1441817, 0, 131073, 1441818, 0, 131073, 1441819, 0, 131073, 1441820, 0, 131073, 1441821, 0, 131073, 1441822, 0, 131073, 1441823, 0, 131073, 1441824, 0, 131073, 1441825, 0, 131073, 1441826, 0, 131073, 1441827, 0, 131073, 1441828, 0, 131073, 1441829, 0, 131073, 1441830, 0, 131073, 1441831, 0, 131073, 1441832, 0, 131073, 1441833, 0, 131073, 1441834, 0, 131073, 1441835, 0, 131073, 1441836, 0, 131073, 1441837, 0, 131073, 1441838, 0, 131073, 1441839, 0, 131073, 1441840, 0, 131073, 1441841, 0, 131073, 1441842, 0, 131073, 1441843, 0, 131073, 1441844, 0, 131073, 1441845, 0, 131073, 1441846, 0, 131073, 1441847, 0, 131073, 1441848, 0, 131073, 1441849, 0, 131073, 1441850, 0, 131073, 1441851, 0, 131073, 1441852, 0, 131073, 1441853, 0, 131073, 1441854, 0, 131073, 1441855, 0, 131073, 1441856, 0, 131073, 1441857, 0, 131073, 1441858, 0, 131073, 1441859, 0, 131073, 1441860, 0, 131073, 1441861, 0, 131073, 1441862, 0, 131073, 1441863, 0, 131073, 1441864, 0, 131073, 1441865, 0, 131073, 1441866, 0, 131073, 1441867, 0, 131073, 1441868, 0, 131073, 1441869, 0, 131073, 1441870, 0, 131074, 1507329, 0, 131072, 1507330, 0, 131073, 1507331, 0, 131073, 1507332, 0, 131073, 1507333, 0, 131073, 1507334, 0, 131073, 1507335, 0, 131073, 1507336, 0, 131073, 1507337, 0, 131073, 1507338, 0, 131073, 1507339, 0, 131073, 1507340, 0, 131073, 1507341, 0, 131073, 1507342, 0, 131073, 1507343, 0, 131073, 1507344, 0, 131073, 1507345, 0, 131073, 1507346, 0, 131073, 1507347, 0, 131073, 1507348, 0, 131073, 1507349, 0, 131073, 1507350, 0, 131073, 1507351, 0, 131073, 1507352, 0, 131073, 1507353, 0, 131073, 1507354, 0, 131073, 1507355, 0, 131073, 1507356, 0, 131073, 1507357, 0, 131073, 1507358, 0, 131073, 1507359, 0, 131073, 1507360, 0, 131073, 1507361, 0, 131073, 1507362, 0, 131073, 1507363, 0, 131073, 1507364, 0, 131073, 1507365, 0, 131073, 1507366, 0, 131073, 1507367, 0, 131073, 1507368, 0, 131073, 1507369, 0, 131073, 1507370, 0, 131073, 1507371, 0, 131073, 1507372, 0, 131073, 1507373, 0, 131073, 1507374, 0, 131073, 1507375, 0, 131073, 1507376, 0, 131073, 1507377, 0, 131073, 1507378, 0, 131073, 1507379, 0, 131073, 1507380, 0, 131073, 1507381, 0, 131073, 1507382, 0, 131073, 1507383, 0, 131073, 1507384, 0, 131073, 1507385, 0, 131073, 1507386, 0, 131073, 1507387, 0, 131073, 1507388, 0, 131073, 1507389, 0, 131073, 1507390, 0, 131073, 1507391, 0, 131073, 1507392, 0, 131073, 1507393, 0, 131073, 1507394, 0, 131073, 1507395, 0, 131073, 1507396, 0, 131073, 1507397, 0, 131073, 1507398, 0, 131073, 1507399, 0, 131073, 1507400, 0, 131073, 1507401, 0, 131073, 1507402, 0, 131073, 1507403, 0, 131073, 1507404, 0, 131073, 1507405, 0, 131073, 1507406, 0, 131074, 1572865, 0, 524301, 1572866, 0, 131073, 1572867, 0, 131073, 1572868, 0, 131073, 1572869, 0, 131073, 1572870, 0, 131073, 1572871, 0, 131073, 1572872, 0, 131073, 1572873, 0, 131073, 1572874, 0, 131073, 1572875, 0, 131073, 1572876, 0, 131073, 1572877, 0, 131073, 1572878, 0, 131073, 1572879, 0, 131073, 1572880, 0, 131073, 1572881, 0, 131073, 1572882, 0, 131073, 1572883, 0, 131073, 1572884, 0, 131073, 1572885, 0, 131073, 1572886, 0, 131073, 1572887, 0, 131073, 1572888, 0, 131073, 1572889, 0, 131073, 1572890, 0, 131073, 1572891, 0, 131073, 1572892, 0, 131073, 1572893, 0, 131073, 1572894, 0, 131073, 1572895, 0, 131073, 1572896, 0, 131073, 1572897, 0, 131073, 1572898, 0, 131073, 1572899, 0, 131073, 1572900, 0, 131073, 1572901, 0, 131073, 1572902, 0, 131073, 1572903, 0, 131073, 1572904, 0, 131073, 1572905, 0, 131073, 1572906, 0, 131073, 1572907, 0, 131073, 1572908, 0, 131073, 1572909, 0, 131073, 1572910, 0, 131073, 1572911, 0, 131073, 1572912, 0, 131073, 1572913, 0, 131073, 1572914, 0, 131073, 1572915, 0, 131073, 1572916, 0, 131073, 1572917, 0, 131073, 1572918, 0, 131073, 1572919, 0, 131073, 1572920, 0, 131073, 1572921, 0, 131073, 1572922, 0, 131073, 1572923, 0, 131073, 1572924, 0, 131073, 1572925, 0, 131073, 1572926, 0, 131073, 1572927, 0, 131073, 1572928, 0, 131073, 1572929, 0, 131073, 1572930, 0, 131073, 1572931, 0, 131073, 1572932, 0, 131073, 1572933, 0, 131073, 1572934, 0, 131073, 1572935, 0, 131073, 1572936, 0, 131073, 1572937, 0, 131073, 1572938, 0, 131073, 1572939, 0, 131073, 1572940, 0, 131073, 1572941, 0, 131073, 1572942, 0, 131074, 1638402, 0, 393222, 1638403, 0, 131073, 1638404, 0, 131073, 1638405, 0, 131073, 1638406, 0, 131073, 1638407, 0, 131073, 1638408, 0, 131073, 1638409, 0, 131073, 1638410, 0, 131073, 1638411, 0, 131073, 1638412, 0, 131073, 1638413, 0, 131073, 1638414, 0, 131073, 1638415, 0, 131073, 1638416, 0, 131073, 1638417, 0, 131073, 1638418, 0, 131073, 1638419, 0, 131073, 1638420, 0, 131073, 1638421, 0, 131073, 1638422, 0, 131073, 1638423, 0, 131073, 1638424, 0, 131073, 1638425, 0, 131073, 1638426, 0, 131073, 1638427, 0, 131073, 1638428, 0, 131073, 1638429, 0, 131073, 1638430, 0, 131073, 1638431, 0, 131073, 1638432, 0, 131073, 1638433, 0, 131073, 1638434, 0, 131073, 1638435, 0, 131073, 1638436, 0, 131073, 1638437, 0, 131073, 1638438, 0, 131073, 1638439, 0, 131073, 1638440, 0, 131073, 1638441, 0, 131073, 1638442, 0, 131073, 1638443, 0, 131073, 1638444, 0, 131073, 1638445, 0, 131073, 1638446, 0, 131073, 1638447, 0, 131073, 1638448, 0, 131073, 1638449, 0, 131073, 1638450, 0, 131073, 1638451, 0, 131073, 1638452, 0, 131073, 1638453, 0, 131073, 1638454, 0, 131073, 1638455, 0, 131073, 1638456, 0, 131073, 1638457, 0, 131073, 1638458, 0, 131073, 1638459, 0, 131073, 1638460, 0, 131073, 1638461, 0, 131073, 1638462, 0, 131073, 1638463, 0, 131073, 1638464, 0, 131073, 1638465, 0, 131073, 1638466, 0, 131073, 1638467, 0, 131073, 1638468, 0, 131073, 1638469, 0, 131073, 1638470, 0, 131073, 1638471, 0, 131073, 1638472, 0, 131073, 1638473, 0, 131073, 1638474, 0, 131073, 1638475, 0, 131073, 1638476, 0, 131073, 1638477, 0, 131073, 1638478, 0, 131074, 1703938, 0, 131072, 1703939, 0, 131073, 1703940, 0, 131073, 1703941, 0, 131073, 1703942, 0, 131073, 1703943, 0, 131073, 1703944, 0, 131073, 1703945, 0, 131073, 1703946, 0, 131073, 1703947, 0, 131073, 1703948, 0, 131073, 1703949, 0, 131073, 1703950, 0, 131073, 1703951, 0, 131073, 1703952, 0, 131073, 1703953, 0, 131073, 1703954, 0, 131073, 1703955, 0, 131073, 1703956, 0, 131073, 1703957, 0, 131073, 1703958, 0, 131073, 1703959, 0, 131073, 1703960, 0, 131073, 1703961, 0, 131073, 1703962, 0, 131073, 1703963, 0, 131073, 1703964, 0, 131073, 1703965, 0, 131073, 1703966, 0, 131073, 1703967, 0, 131073, 1703968, 0, 131073, 1703969, 0, 131073, 1703970, 0, 131073, 1703971, 0, 131073, 1703972, 0, 131073, 1703973, 0, 131073, 1703974, 0, 131073, 1703975, 0, 131073, 1703976, 0, 131073, 1703977, 0, 131073, 1703978, 0, 131073, 1703979, 0, 131073, 1703980, 0, 131073, 1703981, 0, 131073, 1703982, 0, 131073, 1703983, 0, 131073, 1703984, 0, 131073, 1703985, 0, 131073, 1703986, 0, 131073, 1703987, 0, 131073, 1703988, 0, 131073, 1703989, 0, 131073, 1703990, 0, 131073, 1703991, 0, 131073, 1703992, 0, 131073, 1703993, 0, 131073, 1703994, 0, 131073, 1703995, 0, 131073, 1703996, 0, 131073, 1703997, 0, 131073, 1703998, 0, 131073, 1703999, 0, 131073, 1704000, 0, 131073, 1704001, 0, 131073, 1704002, 0, 131073, 1704003, 0, 131073, 1704004, 0, 131073, 1704005, 0, 131073, 1704006, 0, 131073, 1704007, 0, 131073, 1704008, 0, 131073, 1704009, 0, 131073, 1704010, 0, 131073, 1704011, 0, 131073, 1704012, 0, 131073, 1704013, 0, 131073, 1704014, 0, 131074, 1769474, 0, 131072, 1769475, 0, 131073, 1769476, 0, 131073, 1769477, 0, 131073, 1769478, 0, 131073, 1769479, 0, 131073, 1769480, 0, 131073, 1769481, 0, 131073, 1769482, 0, 131073, 1769483, 0, 131073, 1769484, 0, 131073, 1769485, 0, 131073, 1769486, 0, 131073, 1769487, 0, 131073, 1769488, 0, 131073, 1769489, 0, 131073, 1769490, 0, 131073, 1769491, 0, 131073, 1769492, 0, 131073, 1769493, 0, 131073, 1769494, 0, 131073, 1769495, 0, 131073, 1769496, 0, 131073, 1769497, 0, 131073, 1769498, 0, 131073, 1769499, 0, 131073, 1769500, 0, 131073, 1769501, 0, 131073, 1769502, 0, 131073, 1769503, 0, 131073, 1769504, 0, 131073, 1769505, 0, 131073, 1769506, 0, 131073, 1769507, 0, 131073, 1769508, 0, 131073, 1769509, 0, 131073, 1769510, 0, 131073, 1769511, 0, 131073, 1769512, 0, 131073, 1769513, 0, 131073, 1769514, 0, 131073, 1769515, 0, 131073, 1769516, 0, 131073, 1769517, 0, 131073, 1769518, 0, 131073, 1769519, 0, 131073, 1769520, 0, 131073, 1769521, 0, 131073, 1769522, 0, 131073, 1769523, 0, 131073, 1769524, 0, 131073, 1769525, 0, 131073, 1769526, 0, 131073, 1769527, 0, 131073, 1769528, 0, 131073, 1769529, 0, 131073, 1769530, 0, 131073, 1769531, 0, 131073, 1769532, 0, 131073, 1769533, 0, 131073, 1769534, 0, 131073, 1769535, 0, 131073, 1769536, 0, 131073, 1769537, 0, 131073, 1769538, 0, 131073, 1769539, 0, 131073, 1769540, 0, 131073, 1769541, 0, 131073, 1769542, 0, 131073, 1769543, 0, 131073, 1769544, 0, 131073, 1769545, 0, 131073, 1769546, 0, 131073, 1769547, 0, 131073, 1769548, 0, 131073, 1769549, 0, 131073, 1769550, 0, 131074, 1835010, 0, 524301, 1835011, 0, 131073, 1835012, 0, 131073, 1835013, 0, 131073, 1835014, 0, 131073, 1835015, 0, 131073, 1835016, 0, 131073, 1835017, 0, 131073, 1835018, 0, 131073, 1835019, 0, 131073, 1835020, 0, 131073, 1835021, 0, 131073, 1835022, 0, 131073, 1835023, 0, 131073, 1835024, 0, 131073, 1835025, 0, 131073, 1835026, 0, 131073, 1835027, 0, 131073, 1835028, 0, 131073, 1835029, 0, 131073, 1835030, 0, 131073, 1835031, 0, 131073, 1835032, 0, 131073, 1835033, 0, 131073, 1835034, 0, 131073, 1835035, 0, 131073, 1835036, 0, 131073, 1835037, 0, 131073, 1835038, 0, 131073, 1835039, 0, 131073, 1835040, 0, 131073, 1835041, 0, 131073, 1835042, 0, 131073, 1835043, 0, 131073, 1835044, 0, 131073, 1835045, 0, 131073, 1835046, 0, 131073, 1835047, 0, 131073, 1835048, 0, 131073, 1835049, 0, 131073, 1835050, 0, 131073, 1835051, 0, 131073, 1835052, 0, 131073, 1835053, 0, 131073, 1835054, 0, 131073, 1835055, 0, 131073, 1835056, 0, 131073, 1835057, 0, 131073, 1835058, 0, 131073, 1835059, 0, 131073, 1835060, 0, 131073, 1835061, 0, 131073, 1835062, 0, 131073, 1835063, 0, 131073, 1835064, 0, 131073, 1835065, 0, 131073, 1835066, 0, 131073, 1835067, 0, 131073, 1835068, 0, 131073, 1835069, 0, 131073, 1835070, 0, 131073, 1835071, 0, 131073, 1835072, 0, 131073, 1835073, 0, 131073, 1835074, 0, 131073, 1835075, 0, 131073, 1835076, 0, 131073, 1835077, 0, 131073, 1835078, 0, 131073, 1835079, 0, 131073, 1835080, 0, 131073, 1835081, 0, 131073, 1835082, 0, 131073, 1835083, 0, 131073, 1835084, 0, 131073, 1835085, 0, 131073, 1835086, 0, 131074, 1900547, 0, 458758, 1900548, 0, 131073, 1900549, 0, 131073, 1900550, 0, 131073, 1900551, 0, 131073, 1900552, 0, 131073, 1900553, 0, 131073, 1900554, 0, 131073, 1900555, 0, 131073, 1900556, 0, 131073, 1900557, 0, 131073, 1900558, 0, 131073, 1900559, 0, 131073, 1900560, 0, 131073, 1900561, 0, 131073, 1900562, 0, 131073, 1900563, 0, 131073, 1900564, 0, 131073, 1900565, 0, 131073, 1900566, 0, 131073, 1900567, 0, 131073, 1900568, 0, 131073, 1900569, 0, 131073, 1900570, 0, 131073, 1900571, 0, 131073, 1900572, 0, 131073, 1900573, 0, 131073, 1900574, 0, 131073, 1900575, 0, 131073, 1900576, 0, 131073, 1900577, 0, 131073, 1900578, 0, 131073, 1900579, 0, 131073, 1900580, 0, 131073, 1900581, 0, 131073, 1900582, 0, 131073, 1900583, 0, 131073, 1900584, 0, 131073, 1900585, 0, 131073, 1900586, 0, 131073, 1900587, 0, 131073, 1900588, 0, 131073, 1900589, 0, 131073, 1900590, 0, 131073, 1900591, 0, 131073, 1900592, 0, 131073, 1900593, 0, 131073, 1900594, 0, 131073, 1900595, 0, 131073, 1900596, 0, 131073, 1900597, 0, 131073, 1900598, 0, 131073, 1900599, 0, 131073, 1900600, 0, 131073, 1900601, 0, 131073, 1900602, 0, 131073, 1900603, 0, 131073, 1900604, 0, 131073, 1900605, 0, 131073, 1900606, 0, 131073, 1900607, 0, 131073, 1900608, 0, 131073, 1900609, 0, 131073, 1900610, 0, 131073, 1900611, 0, 131073, 1900612, 0, 131073, 1900613, 0, 131073, 1900614, 0, 131073, 1900615, 0, 131073, 1900616, 0, 131073, 1900617, 0, 131073, 1900618, 0, 131073, 1900619, 0, 131073, 1900620, 0, 131073, 1900621, 0, 131073, 1900622, 0, 131074, 1966082, 0, 589829, 1966083, 0, 131073, 1966084, 0, 131073, 1966085, 0, 131073, 1966086, 0, 131073, 1966087, 0, 131073, 1966088, 0, 131073, 1966089, 0, 131073, 1966090, 0, 131073, 1966091, 0, 131073, 1966092, 0, 131073, 1966093, 0, 131073, 1966094, 0, 131073, 1966095, 0, 131073, 1966096, 0, 131073, 1966097, 0, 131073, 1966098, 0, 131073, 1966099, 0, 131073, 1966100, 0, 131073, 1966101, 0, 131073, 1966102, 0, 131073, 1966103, 0, 131073, 1966104, 0, 131073, 1966105, 0, 131073, 1966106, 0, 131073, 1966107, 0, 131073, 1966108, 0, 131073, 1966109, 0, 131073, 1966110, 0, 131073, 1966111, 0, 131073, 1966112, 0, 131073, 1966113, 0, 131073, 1966114, 0, 131073, 1966115, 0, 131073, 1966116, 0, 131073, 1966117, 0, 131073, 1966118, 0, 131073, 1966119, 0, 131073, 1966120, 0, 131073, 1966121, 0, 131073, 1966122, 0, 131073, 1966123, 0, 131073, 1966124, 0, 131073, 1966125, 0, 131073, 1966126, 0, 131073, 1966127, 0, 131073, 1966128, 0, 131073, 1966129, 0, 131073, 1966130, 0, 131073, 1966131, 0, 131073, 1966132, 0, 131073, 1966133, 0, 131073, 1966134, 0, 131073, 1966135, 0, 131073, 1966136, 0, 131073, 1966137, 0, 131073, 1966138, 0, 131073, 1966139, 0, 131073, 1966140, 0, 131073, 1966141, 0, 131073, 1966142, 0, 131073, 1966143, 0, 131073, 1966144, 0, 131073, 1966145, 0, 131073, 1966146, 0, 131073, 1966147, 0, 131073, 1966148, 0, 131073, 1966149, 0, 131073, 1966150, 0, 131073, 1966151, 0, 131073, 1966152, 0, 131073, 1966153, 0, 131073, 1966154, 0, 131073, 1966155, 0, 131073, 1966156, 0, 131073, 1966157, 0, 131073, 1966158, 0, 131074, 2031617, 0, 458765, 2031618, 0, 131073, 2031619, 0, 131073, 2031620, 0, 131073, 2031621, 0, 131073, 2031622, 0, 131073, 2031623, 0, 131073, 2031624, 0, 131073, 2031625, 0, 131073, 2031626, 0, 131073, 2031627, 0, 131073, 2031628, 0, 131073, 2031629, 0, 131073, 2031630, 0, 131073, 2031631, 0, 131073, 2031632, 0, 131073, 2031633, 0, 131073, 2031634, 0, 131073, 2031635, 0, 131073, 2031636, 0, 131073, 2031637, 0, 131073, 2031638, 0, 131073, 2031639, 0, 131073, 2031640, 0, 131073, 2031641, 0, 131073, 2031642, 0, 131073, 2031643, 0, 131073, 2031644, 0, 131073, 2031645, 0, 131073, 2031646, 0, 131073, 2031647, 0, 131073, 2031648, 0, 131073, 2031649, 0, 131073, 2031650, 0, 131073, 2031651, 0, 131073, 2031652, 0, 131073, 2031653, 0, 131073, 2031654, 0, 131073, 2031655, 0, 131073, 2031656, 0, 131073, 2031657, 0, 131073, 2031658, 0, 131073, 2031659, 0, 131073, 2031660, 0, 131073, 2031661, 0, 131073, 2031662, 0, 131073, 2031663, 0, 131073, 2031664, 0, 131073, 2031665, 0, 131073, 2031666, 0, 131073, 2031667, 0, 131073, 2031668, 0, 131073, 2031669, 0, 131073, 2031670, 0, 131073, 2031671, 0, 131073, 2031672, 0, 131073, 2031673, 0, 131073, 2031674, 0, 131073, 2031675, 0, 131073, 2031676, 0, 131073, 2031677, 0, 131073, 2031678, 0, 131073, 2031679, 0, 131073, 2031680, 0, 131073, 2031681, 0, 131073, 2031682, 0, 131073, 2031683, 0, 131073, 2031684, 0, 131073, 2031685, 0, 131073, 2031686, 0, 131073, 2031687, 0, 131073, 2031688, 0, 131073, 2031689, 0, 131073, 2031690, 0, 131073, 2031691, 0, 131073, 2031692, 0, 131073, 2031693, 0, 131073, 2031694, 0, 131074, 2097153, 0, 131072, 2097154, 0, 131073, 2097155, 0, 131073, 2097156, 0, 131073, 2097157, 0, 131073, 2097158, 0, 131073, 2097159, 0, 131073, 2097160, 0, 131073, 2097161, 0, 131073, 2097162, 0, 131073, 2097163, 0, 131073, 2097164, 0, 131073, 2097165, 0, 131073, 2097166, 0, 131073, 2097167, 0, 131073, 2097168, 0, 131073, 2097169, 0, 131073, 2097170, 0, 131073, 2097171, 0, 131073, 2097172, 0, 131073, 2097173, 0, 131073, 2097174, 0, 131073, 2097175, 0, 131073, 2097176, 0, 131073, 2097177, 0, 131073, 2097178, 0, 131073, 2097179, 0, 131073, 2097180, 0, 131073, 2097181, 0, 131073, 2097182, 0, 131073, 2097183, 0, 131073, 2097184, 0, 131073, 2097185, 0, 131073, 2097186, 0, 131073, 2097187, 0, 131073, 2097188, 0, 131073, 2097189, 0, 131073, 2097190, 0, 131073, 2097191, 0, 131073, 2097192, 0, 131073, 2097193, 0, 131073, 2097194, 0, 131073, 2097195, 0, 131073, 2097196, 0, 131073, 2097197, 0, 131073, 2097198, 0, 131073, 2097199, 0, 131073, 2097200, 0, 131073, 2097201, 0, 131073, 2097202, 0, 131073, 2097203, 0, 131073, 2097204, 0, 131073, 2097205, 0, 131073, 2097206, 0, 131073, 2097207, 0, 131073, 2097208, 0, 131073, 2097209, 0, 131073, 2097210, 0, 131073, 2097211, 0, 131073, 2097212, 0, 131073, 2097213, 0, 131073, 2097214, 0, 131073, 2097215, 0, 131073, 2097216, 0, 131073, 2097217, 0, 131073, 2097218, 0, 131073, 2097219, 0, 131073, 2097220, 0, 131073, 2097221, 0, 131073, 2097222, 0, 131073, 2097223, 0, 131073, 2097224, 0, 131073, 2097225, 0, 131073, 2097226, 0, 131073, 2097227, 0, 131073, 2097228, 0, 131073, 2097229, 0, 131073, 2097230, 0, 131074, 2162689, 0, 131072, 2162690, 0, 131073, 2162691, 0, 131073, 2162692, 0, 131073, 2162693, 0, 131073, 2162694, 0, 131073, 2162695, 0, 131073, 2162696, 0, 131073, 2162697, 0, 131073, 2162698, 0, 131073, 2162699, 0, 131073, 2162700, 0, 131073, 2162701, 0, 131073, 2162702, 0, 131073, 2162703, 0, 131073, 2162704, 0, 131073, 2162705, 0, 131073, 2162706, 0, 131073, 2162707, 0, 131073, 2162708, 0, 131073, 2162709, 0, 131073, 2162710, 0, 131073, 2162711, 0, 131073, 2162712, 0, 131073, 2162713, 0, 131073, 2162714, 0, 131073, 2162715, 0, 131073, 2162716, 0, 131073, 2162717, 0, 131073, 2162718, 0, 131073, 2162719, 0, 131073, 2162720, 0, 131073, 2162721, 0, 131073, 2162722, 0, 131073, 2162723, 0, 131073, 2162724, 0, 131073, 2162725, 0, 131073, 2162726, 0, 131073, 2162727, 0, 131073, 2162728, 0, 131073, 2162729, 0, 131073, 2162730, 0, 131073, 2162731, 0, 131073, 2162732, 0, 131073, 2162733, 0, 131073, 2162734, 0, 131073, 2162735, 0, 131073, 2162736, 0, 131073, 2162737, 0, 131073, 2162738, 0, 131073, 2162739, 0, 131073, 2162740, 0, 131073, 2162741, 0, 131073, 2162742, 0, 131073, 2162743, 0, 131073, 2162744, 0, 131073, 2162745, 0, 131073, 2162746, 0, 131073, 2162747, 0, 131073, 2162748, 0, 131073, 2162749, 0, 131073, 2162750, 0, 131073, 2162751, 0, 131073, 2162752, 0, 131073, 2162753, 0, 131073, 2162754, 0, 131073, 2162755, 0, 131073, 2162756, 0, 131073, 2162757, 0, 131073, 2162758, 0, 131073, 2162759, 0, 131073, 2162760, 0, 131073, 2162761, 0, 131073, 2162762, 0, 131073, 2162763, 0, 131073, 2162764, 0, 131073, 2162765, 0, 131073, 2162766, 0, 131074, 2228225, 0, 524301, 2228226, 0, 131073, 2228227, 0, 131073, 2228228, 0, 131073, 2228229, 0, 131073, 2228230, 0, 131073, 2228231, 0, 131073, 2228232, 0, 131073, 2228233, 0, 131073, 2228234, 0, 131073, 2228235, 0, 131073, 2228236, 0, 131073, 2228237, 0, 131073, 2228238, 0, 131073, 2228239, 0, 131073, 2228240, 0, 131073, 2228241, 0, 131073, 2228242, 0, 131073, 2228243, 0, 131073, 2228244, 0, 131073, 2228245, 0, 131073, 2228246, 0, 131073, 2228247, 0, 131073, 2228248, 0, 131073, 2228249, 0, 131073, 2228250, 0, 131073, 2228251, 0, 131073, 2228252, 0, 131073, 2228253, 0, 131073, 2228254, 0, 131073, 2228255, 0, 131073, 2228256, 0, 131073, 2228257, 0, 131073, 2228258, 0, 131073, 2228259, 0, 131073, 2228260, 0, 131073, 2228261, 0, 131073, 2228262, 0, 131073, 2228263, 0, 131073, 2228264, 0, 131073, 2228265, 0, 131073, 2228266, 0, 131073, 2228267, 0, 131073, 2228268, 0, 131073, 2228269, 0, 131073, 2228270, 0, 131073, 2228271, 0, 131073, 2228272, 0, 131073, 2228273, 0, 131073, 2228274, 0, 131073, 2228275, 0, 131073, 2228276, 0, 131073, 2228277, 0, 131073, 2228278, 0, 131073, 2228279, 0, 131073, 2228280, 0, 131073, 2228281, 0, 131073, 2228282, 0, 131073, 2228283, 0, 131073, 2228284, 0, 131073, 2228285, 0, 131073, 2228286, 0, 131073, 2228287, 0, 131073, 2228288, 0, 131073, 2228289, 0, 131073, 2228290, 0, 131073, 2228291, 0, 131073, 2228292, 0, 131073, 2228293, 0, 131073, 2228294, 0, 131073, 2228295, 0, 131073, 2228296, 0, 131073, 2228297, 0, 131073, 2228298, 0, 131073, 2228299, 0, 131073, 2228300, 0, 131073, 2228301, 0, 131073, 2228302, 0, 131074, 2293762, 0, 393222, 2293763, 0, 131073, 2293764, 0, 131073, 2293765, 0, 131073, 2293766, 0, 131073, 2293767, 0, 131073, 2293768, 0, 131073, 2293769, 0, 131073, 2293770, 0, 131073, 2293771, 0, 131073, 2293772, 0, 131073, 2293773, 0, 131073, 2293774, 0, 131073, 2293775, 0, 131073, 2293776, 0, 131073, 2293777, 0, 131073, 2293778, 0, 131073, 2293779, 0, 131073, 2293780, 0, 131073, 2293781, 0, 131073, 2293782, 0, 131073, 2293783, 0, 131073, 2293784, 0, 131073, 2293785, 0, 131073, 2293786, 0, 131073, 2293787, 0, 131073, 2293788, 0, 131073, 2293789, 0, 131073, 2293790, 0, 131073, 2293791, 0, 131073, 2293792, 0, 131073, 2293793, 0, 131073, 2293794, 0, 131073, 2293795, 0, 131073, 2293796, 0, 131073, 2293797, 0, 131073, 2293798, 0, 131073, 2293799, 0, 131073, 2293800, 0, 131073, 2293801, 0, 131073, 2293802, 0, 131073, 2293803, 0, 131073, 2293804, 0, 131073, 2293805, 0, 131073, 2293806, 0, 131073, 2293807, 0, 131073, 2293808, 0, 131073, 2293809, 0, 131073, 2293810, 0, 131073, 2293811, 0, 131073, 2293812, 0, 131073, 2293813, 0, 131073, 2293814, 0, 131073, 2293815, 0, 131073, 2293816, 0, 131073, 2293817, 0, 131073, 2293818, 0, 131073, 2293819, 0, 131073, 2293820, 0, 131073, 2293821, 0, 131073, 2293822, 0, 131073, 2293823, 0, 131073, 2293824, 0, 131073, 2293825, 0, 131073, 2293826, 0, 131073, 2293827, 0, 131073, 2293828, 0, 131073, 2293829, 0, 131073, 2293830, 0, 131073, 2293831, 0, 131073, 2293832, 0, 131073, 2293833, 0, 131073, 2293834, 0, 131073, 2293835, 0, 131073, 2293836, 0, 131073, 2293837, 0, 131073, 2293838, 0, 524302, 2359298, 0, 524301, 2359299, 0, 131073, 2359300, 0, 131073, 2359301, 0, 131073, 2359302, 0, 131073, 2359303, 0, 131073, 2359304, 0, 131073, 2359305, 0, 131073, 2359306, 0, 131073, 2359307, 0, 131073, 2359308, 0, 131073, 2359309, 0, 131073, 2359310, 0, 131073, 2359311, 0, 131073, 2359312, 0, 131073, 2359313, 0, 131073, 2359314, 0, 131073, 2359315, 0, 131073, 2359316, 0, 131073, 2359317, 0, 131073, 2359318, 0, 131073, 2359319, 0, 131073, 2359320, 0, 131073, 2359321, 0, 131073, 2359322, 0, 131073, 2359323, 0, 131073, 2359324, 0, 131073, 2359325, 0, 131073, 2359326, 0, 131073, 2359327, 0, 131073, 2359328, 0, 131073, 2359329, 0, 131073, 2359330, 0, 131073, 2359331, 0, 131073, 2359332, 0, 131073, 2359333, 0, 131073, 2359334, 0, 131073, 2359335, 0, 131073, 2359336, 0, 131073, 2359337, 0, 131073, 2359338, 0, 131073, 2359339, 0, 131073, 2359340, 0, 131073, 2359341, 0, 131073, 2359342, 0, 131073, 2359343, 0, 131073, 2359344, 0, 131073, 2359345, 0, 131073, 2359346, 0, 131073, 2359347, 0, 131073, 2359348, 0, 131073, 2359349, 0, 131073, 2359350, 0, 131073, 2359351, 0, 131073, 2359352, 0, 131073, 2359353, 0, 131073, 2359354, 0, 131073, 2359355, 0, 131073, 2359356, 0, 262146, 2359357, 0, 262148, 2359358, 0, 131073, 2359359, 0, 131073, 2359360, 0, 131073, 2359361, 0, 131073, 2359362, 0, 131073, 2359363, 0, 131073, 2359364, 0, 131073, 2359365, 0, 131073, 2359366, 0, 131073, 2359367, 0, 131073, 2359368, 0, 131073, 2359369, 0, 131073, 2359370, 0, 131073, 2359371, 0, 131073, 2359372, 0, 131073, 2359373, 0, 393216, 2424835, 0, 393222, 2424836, 0, 131073, 2424837, 0, 131073, 2424838, 0, 131073, 2424839, 0, 131073, 2424840, 0, 131073, 2424841, 0, 131073, 2424842, 0, 131073, 2424843, 0, 131073, 2424844, 0, 131073, 2424845, 0, 131073, 2424846, 0, 131073, 2424847, 0, 131073, 2424848, 0, 131073, 2424849, 0, 131073, 2424850, 0, 131073, 2424851, 0, 131073, 2424852, 0, 131073, 2424853, 0, 131073, 2424854, 0, 131073, 2424855, 0, 131073, 2424856, 0, 131073, 2424857, 0, 131073, 2424858, 0, 131073, 2424859, 0, 131073, 2424860, 0, 131073, 2424861, 0, 131073, 2424862, 0, 131073, 2424863, 0, 131073, 2424864, 0, 131073, 2424865, 0, 131073, 2424866, 0, 131073, 2424867, 0, 131073, 2424868, 0, 131073, 2424869, 0, 131073, 2424870, 0, 131073, 2424871, 0, 131073, 2424872, 0, 131073, 2424873, 0, 131073, 2424874, 0, 131073, 2424875, 0, 131073, 2424876, 0, 131073, 2424877, 0, 131073, 2424878, 0, 131073, 2424879, 0, 131073, 2424880, 0, 131073, 2424881, 0, 131073, 2424882, 0, 131073, 2424883, 0, 131073, 2424884, 0, 131073, 2424885, 0, 131073, 2424886, 0, 131073, 2424887, 0, 131073, 2424888, 0, 131073, 2424889, 0, 131073, 2424890, 0, 131073, 2424891, 0, 327681, 2424894, 0, 327685, 2424895, 0, 131073, 2424896, 0, 131073, 2424897, 0, 131073, 2424898, 0, 131073, 2424899, 0, 131073, 2424900, 0, 131073, 2424901, 0, 131073, 2424902, 0, 131073, 2424903, 0, 131073, 2424904, 0, 131073, 2424905, 0, 131073, 2424906, 0, 131073, 2424907, 0, 131073, 2424908, 0, 131073, 2424909, 0, 524302, 2490371, 0, 131072, 2490372, 0, 131073, 2490373, 0, 131073, 2490374, 0, 131073, 2490375, 0, 131073, 2490376, 0, 131073, 2490377, 0, 131073, 2490378, 0, 131073, 2490379, 0, 131073, 2490380, 0, 131073, 2490381, 0, 131073, 2490382, 0, 131073, 2490383, 0, 131073, 2490384, 0, 131073, 2490385, 0, 131073, 2490386, 0, 131073, 2490387, 0, 131073, 2490388, 0, 131073, 2490389, 0, 131073, 2490390, 0, 131073, 2490391, 0, 131073, 2490392, 0, 131073, 2490393, 0, 131073, 2490394, 0, 131073, 2490395, 0, 131073, 2490396, 0, 131073, 2490397, 0, 131073, 2490398, 0, 131073, 2490399, 0, 131073, 2490400, 0, 131073, 2490401, 0, 131073, 2490402, 0, 131073, 2490403, 0, 131073, 2490404, 0, 131073, 2490405, 0, 131073, 2490406, 0, 131073, 2490407, 0, 131073, 2490408, 0, 131073, 2490409, 0, 131073, 2490410, 0, 131073, 2490411, 0, 131073, 2490412, 0, 131073, 2490413, 0, 131073, 2490414, 0, 131073, 2490415, 0, 131073, 2490416, 0, 131073, 2490417, 0, 131073, 2490418, 0, 131073, 2490419, 0, 131073, 2490420, 0, 131073, 2490421, 0, 131073, 2490422, 0, 131073, 2490423, 0, 131073, 2490424, 0, 131073, 2490425, 0, 131073, 2490426, 0, 327681, 2490431, 0, 393222, 2490432, 0, 131073, 2490433, 0, 131073, 2490434, 0, 131073, 2490435, 0, 131073, 2490436, 0, 131073, 2490437, 0, 131073, 2490438, 0, 131073, 2490439, 0, 131073, 2490440, 0, 131073, 2490441, 0, 131073, 2490442, 0, 131073, 2490443, 0, 131073, 2490444, 0, 393216, 2555907, 0, 131072, 2555908, 0, 131073, 2555909, 0, 131073, 2555910, 0, 131073, 2555911, 0, 131073, 2555912, 0, 131073, 2555913, 0, 131073, 2555914, 0, 131073, 2555915, 0, 131073, 2555916, 0, 131073, 2555917, 0, 131073, 2555918, 0, 131073, 2555919, 0, 131073, 2555920, 0, 131073, 2555921, 0, 131073, 2555922, 0, 262146, 2555923, 0, 196609, 2555924, 0, 196609, 2555925, 0, 196609, 2555926, 0, 196609, 2555927, 0, 196609, 2555928, 0, 196609, 2555929, 0, 196609, 2555930, 0, 196609, 2555931, 0, 196609, 2555932, 0, 196609, 2555933, 0, 196609, 2555934, 0, 196609, 2555935, 0, 196609, 2555936, 0, 196609, 2555937, 0, 262148, 2555938, 0, 131073, 2555939, 0, 131073, 2555940, 0, 131073, 2555941, 0, 131073, 2555942, 0, 131073, 2555943, 0, 131073, 2555944, 0, 131073, 2555945, 0, 131073, 2555946, 0, 131073, 2555947, 0, 131073, 2555948, 0, 131073, 2555949, 0, 131073, 2555950, 0, 131073, 2555951, 0, 131073, 2555952, 0, 131073, 2555953, 0, 131073, 2555954, 0, 131073, 2555955, 0, 131073, 2555956, 0, 131073, 2555957, 0, 131073, 2555958, 0, 131073, 2555959, 0, 131073, 2555960, 0, 131073, 2555961, 0, 327681, 2555967, 0, 131072, 2555968, 0, 131073, 2555969, 0, 131073, 2555970, 0, 131073, 2555971, 0, 131073, 2555972, 0, 131073, 2555973, 0, 131073, 2555974, 0, 131073, 2555975, 0, 131073, 2555976, 0, 131073, 2555977, 0, 131073, 2555978, 0, 131073, 2555979, 0, 131073, 2555980, 0, 524302, 2621443, 0, 196608, 2621444, 0, 196609, 2621445, 0, 196609, 2621446, 0, 196609, 2621447, 0, 196609, 2621448, 0, 196609, 2621449, 0, 196609, 2621450, 0, 196609, 2621451, 0, 196609, 2621452, 0, 196609, 2621453, 0, 196609, 2621454, 0, 196609, 2621455, 0, 196609, 2621456, 0, 196609, 2621457, 0, 1114123, 2621474, 0, 1114122, 2621475, 0, 196609, 2621476, 0, 196609, 2621477, 0, 196609, 2621478, 0, 196609, 2621479, 0, 196609, 2621480, 0, 196609, 2621481, 0, 196609, 2621482, 0, 196609, 2621483, 0, 196609, 2621484, 0, 196609, 2621485, 0, 196609, 2621486, 0, 196609, 2621487, 0, 196609, 2621488, 0, 196609, 2621489, 0, 196609, 2621490, 0, 196609, 2621491, 0, 196609, 2621492, 0, 196609, 2621493, 0, 196609, 2621494, 0, 196609, 2621495, 0, 196609, 2621496, 0, 1114123, 2621503, 0, 196608, 2621504, 0, 196609, 2621505, 0, 196609, 2621506, 0, 196609, 2621507, 0, 196609, 2621508, 0, 196609, 2621509, 0, 196609, 2621510, 0, 196609, 2621511, 0, 196609, 2621512, 0, 196609, 2621513, 0, 196609, 2621514, 0, 196609, 2621515, 0, 1114123, 2818039, 0, 65553, 3866642, 0, 65553, 3997739, 0, 65553 )

[node name="Shadows" type="ColorRect" parent="LevelLayer Z3"]
visible = false
material = SubResource( 454 )
margin_right = 640.0
margin_bottom = 360.0
rect_min_size = Vector2( 640, 360 )

[node name="Gradient" type="ColorRect" parent="LevelLayer Z3"]
material = SubResource( 460 )
margin_right = 640.0
margin_bottom = 360.0
rect_min_size = Vector2( 640, 360 )

[node name="Glow" type="ColorRect" parent="LevelLayer Z3"]
visible = false
material = SubResource( 462 )
margin_right = 640.0
margin_bottom = 360.0
rect_min_size = Vector2( 640, 360 )

[node name="glow" type="Sprite" parent="LevelLayer Z3"]
visible = false
material = SubResource( 24 )
position = Vector2( 320, 180 )
scale = Vector2( 10, 10 )
texture = SubResource( 102 )

[node name="JuicyCamera" parent="." instance=ExtResource( 11 )]
visible = false
z_index = 6
current = false

[node name="šejderji" type="Node2D" parent="."]
visible = false
position = Vector2( 407.401, 53.2947 )

[node name="NovPoskus" type="Sprite" parent="šejderji"]
material = SubResource( 456 )
position = Vector2( 2.599, 20.7053 )
texture = ExtResource( 7 )

[node name="v1" type="Sprite" parent="šejderji"]
material = SubResource( 2 )
position = Vector2( 68, 106 )
texture = SubResource( 3 )

[node name="v3" type="Sprite" parent="šejderji"]
material = SubResource( 101 )
position = Vector2( 189, 104 )
texture = SubResource( 102 )

[node name="v4" type="Sprite" parent="šejderji"]
material = SubResource( 104 )
position = Vector2( 66.599, 176.705 )
scale = Vector2( 1, 1.73041 )
texture = SubResource( 102 )

[node name="v2" type="Sprite" parent="šejderji"]
material = SubResource( 105 )
position = Vector2( 127, 106 )
texture = SubResource( 102 )

[node name="v5" type="Sprite" parent="šejderji"]
material = SubResource( 106 )
position = Vector2( 130, 172 )
texture = SubResource( 102 )

[node name="v6" type="Sprite" parent="šejderji"]
material = SubResource( 18 )
position = Vector2( 191, 172 )
texture = SubResource( 102 )

[node name="v7 hor" type="Sprite" parent="šejderji"]
material = SubResource( 22 )
position = Vector2( 139.599, 234 )
texture = SubResource( 102 )

[node name="v7 hor3" type="Sprite" parent="šejderji"]
material = SubResource( 20 )
position = Vector2( 194, 234 )
texture = SubResource( 102 )

[node name="neon light" type="Sprite" parent="šejderji"]
material = SubResource( 97 )
position = Vector2( -36.401, 197.705 )
texture = ExtResource( 12 )

[node name="drophadows" type="Sprite" parent="šejderji"]
material = SubResource( 443 )
position = Vector2( -292.401, 77.7053 )
texture = ExtResource( 12 )

[node name="glow s kapco" type="Sprite" parent="šejderji"]
material = SubResource( 452 )
position = Vector2( -168.401, 83.7053 )
texture = ExtResource( 6 )

[node name="outline inner" type="Sprite" parent="šejderji"]
material = SubResource( 432 )
position = Vector2( -197.401, 203.705 )
texture = ExtResource( 12 )

[node name="outline" type="Sprite" parent="šejderji"]
material = SubResource( 425 )
position = Vector2( -169.401, 103.705 )
texture = ExtResource( 12 )

[node name="aura" type="Sprite" parent="šejderji"]
material = SubResource( 448 )
position = Vector2( -301.072, 218.034 )
scale = Vector2( 0.657343, 0.657343 )
texture = ExtResource( 5 )

[node name="Shadows maskanje ok" type="ColorRect" parent="šejderji"]
visible = false
material = SubResource( 83 )
margin_left = -407.401
margin_top = -53.2947
margin_right = 232.599
margin_bottom = 306.705
rect_min_size = Vector2( 640, 360 )

[node name="Shadows multiplikacija ok" type="ColorRect" parent="šejderji"]
visible = false
material = SubResource( 430 )
margin_left = -490.401
margin_top = -53.2947
margin_right = 149.599
margin_bottom = 306.705
rect_min_size = Vector2( 640, 360 )

[node name="dropshadow_distanceon value" type="ColorRect" parent="šejderji"]
visible = false
material = SubResource( 440 )
margin_left = -407.401
margin_top = -53.2947
margin_right = 232.599
margin_bottom = 306.705
rect_min_size = Vector2( 640, 360 )

[node name="glow iz dropshadows" type="ColorRect" parent="šejderji"]
visible = false
material = SubResource( 438 )
margin_left = -490.401
margin_top = -53.2947
margin_right = 149.599
margin_bottom = 306.705
rect_min_size = Vector2( 640, 360 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 446 )

[editable path="BodiesLayer Z2/Player"]
[editable path="BodiesLayer Z2/Disabled Plejer"]
