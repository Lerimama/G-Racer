[gd_scene load_steps=23 format=2]

[sub_resource type="Shader" id=4]
code = "shader_type canvas_item;

uniform float intensity = 0.5f;
uniform float layers = 5.0f;
uniform float speed = 4.0f;

float gradient(vec2 uv){
	
	// čekiramo razdaljo od centra sprajta do koordinate trenutne pike
	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f))); // nastane krog, ker je razdalja od centra konstantna
	
	
}
void fragment(){
	vec4 bg = texture(TEXTURE, UV - TIME/speed); // tukjaj je že notri premikanje
	
	COLOR = bg;
	COLOR.r = gradient(UV); // red kanal damo rezultat gradient funkcije 
	
	// množimo oz. združimo red channel z intensity in teksturo noisa
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10.0f, 0.0f, 1.0f); // klempam, da ne gre pod nulo in ne nad ena (ker je to barvni kanal)
	//	current color * intensity
	
	
	
	
}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 4 )
shader_param/intensity = 0.5
shader_param/layers = 5.0
shader_param/speed = 4.0

[sub_resource type="OpenSimplexNoise" id=6]
period = 20.0

[sub_resource type="NoiseTexture" id=3]
width = 48
height = 48
seamless = true
noise = SubResource( 6 )

[sub_resource type="Shader" id=11]
code = "shader_type canvas_item;
render_mode blend_mix ;

uniform float intensity = 0.5f;
uniform float layers = 5.0f;
uniform float speed = 4.0f;

float gradient(vec2 uv){
	
	// čekiramo razdaljo od centra sprajta do koordinate trenutne pike
	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f))); // nastane krog, ker je razdalja od centra konstantna
}

vec4 colorize (float col, float a) {
	
	vec4 pallete;
	
//	// grayscale
//	pallete = vec4(col, col, col, a);  // col je podan red kanal

//	// monochrome
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.g = float(col >= 0.0f); // en kanal setamo, da je ves čas 0, razen ko je poln (? ... full je white?)
	
//	// darken vse kar ni belo
	pallete = vec4(col, col, col, a);  // col je podan red kanal
	pallete.r = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
	pallete.g = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
	pallete.b = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
	
//	// raznobarvno
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3 && col < 0.7 || col > 0.9); 
//	pallete.g = float(col > 0.7); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.5 || col > 0.9); // višja vrednost od dveh ...?
	
//	// ta bi bila za ščit
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.g = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.3); // višja vrednost od dveh ...?
	
	return pallete; // ta vrednost gre v barvo
}


void fragment(){
	vec4 bg = texture(TEXTURE, UV - TIME/speed); // tukjaj je že notri premikanje
	
	COLOR = bg;
	COLOR.r = gradient(UV); // red kanal damo rezultat gradient funkcije 
	
	// množimo oz. združimo red channel z intensity in teksturo noisa
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10.0f, 0.0f, 1.0f); // klempam, da ne gre pod nulo in ne nad ena (ker je to barvni kanal)
	//	current color * intensity
	COLOR.r = floor(COLOR.r * layers) / layers; // floor ... zaokrožimo zato, ker ker je št. lejerja zmeraj cela številka ... delimo z lejerji, da je vsak lejer na 0.2 vrednosti
	COLOR.a = float(COLOR.r > 0.0f); // ?
	
	COLOR = colorize(COLOR.r, COLOR.a); // igranje z barvami
	
	
}"

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 11 )
shader_param/intensity = 1.0
shader_param/layers = 4.0
shader_param/speed = 4.0

[sub_resource type="OpenSimplexNoise" id=25]
period = 20.0

[sub_resource type="NoiseTexture" id=7]
width = 48
height = 48
seamless = true
noise = SubResource( 25 )

[sub_resource type="Shader" id=14]
code = "shader_type canvas_item;
render_mode blend_mix ;

uniform float intensity = 0.5f;
uniform float layers = 5.0f;
uniform float speed = 4.0f;

float gradient(vec2 uv){
	
	// čekiramo razdaljo od centra sprajta do koordinate trenutne pike
	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f))); // nastane krog, ker je razdalja od centra konstantna
}

vec4 colorize (float col, float a) {
	
	vec4 pallete;
	
//	// grayscale
//	pallete = vec4(col, col, col, a);  // col je podan red kanal

//	// monochrome
	pallete = vec4(col, col, col, a);  // col je podan red kanal
	pallete.g = float(col >= 0.0f); // en kanal setamo, da je ves čas 0, razen ko je poln (? ... full je white?)
	
//	// darken vse kar ni belo
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.g = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.b = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
	
//	// raznobarvno
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3 && col < 0.7 || col > 0.9); 
//	pallete.g = float(col > 0.7); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.5 || col > 0.9); // višja vrednost od dveh ...?
	
//	// ta bi bila za ščit
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.g = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.3); // višja vrednost od dveh ...?
	
	return pallete; // ta vrednost gre v barvo
}


void fragment(){
	vec4 bg = texture(TEXTURE, UV - TIME/speed); // tukjaj je že notri premikanje
	
	COLOR = bg;
	COLOR.r = gradient(UV); // red kanal damo rezultat gradient funkcije 
	
	// množimo oz. združimo red channel z intensity in teksturo noisa
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10.0f, 0.0f, 1.0f); // klempam, da ne gre pod nulo in ne nad ena (ker je to barvni kanal)
	//	current color * intensity
	COLOR.r = floor(COLOR.r * layers) / layers; // floor ... zaokrožimo zato, ker ker je št. lejerja zmeraj cela številka ... delimo z lejerji, da je vsak lejer na 0.2 vrednosti
	COLOR.a = float(COLOR.r > 0.0f); // ?
	
	COLOR = colorize(COLOR.r, COLOR.a); // igranje z barvami
	
	
}"

[sub_resource type="ShaderMaterial" id=13]
shader = SubResource( 14 )
shader_param/intensity = 1.0
shader_param/layers = 4.0
shader_param/speed = 4.0

[sub_resource type="Shader" id=12]
code = "shader_type canvas_item;
render_mode blend_mix ;

uniform float intensity = 0.5f;
uniform float layers = 5.0f;
uniform float speed = 4.0f;

float gradient(vec2 uv){
	
	// čekiramo razdaljo od centra sprajta do koordinate trenutne pike
	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f))); // nastane krog, ker je razdalja od centra konstantna
}

vec4 colorize (float col, float a) {
	
	vec4 pallete;
	
//	// grayscale
	pallete = vec4(col, col, col, a);  // col je podan red kanal

//	// monochrome
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.g = float(col >= 0.0f); // en kanal setamo, da je ves čas 0, razen ko je poln (? ... full je white?)
	
//	// darken vse kar ni belo
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.g = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.b = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
	
//	// raznobarvno
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3 && col < 0.7 || col > 0.9); 
//	pallete.g = float(col > 0.7); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.5 || col > 0.9); // višja vrednost od dveh ...?
	
//	// ta bi bila za ščit
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.g = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.3); // višja vrednost od dveh ...?
	
	return pallete; // ta vrednost gre v barvo
}


void fragment(){
	vec4 bg = texture(TEXTURE, UV - TIME/speed); // tukjaj je že notri premikanje
	
	COLOR = bg;
	COLOR.r = gradient(UV); // red kanal damo rezultat gradient funkcije 
	
	// množimo oz. združimo red channel z intensity in teksturo noisa
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10.0f, 0.0f, 1.0f); // klempam, da ne gre pod nulo in ne nad ena (ker je to barvni kanal)
	//	current color * intensity
	COLOR.r = floor(COLOR.r * layers) / layers; // floor ... zaokrožimo zato, ker ker je št. lejerja zmeraj cela številka ... delimo z lejerji, da je vsak lejer na 0.2 vrednosti
	COLOR.a = float(COLOR.r > 0.0f); // ?
	
	COLOR = colorize(COLOR.r, COLOR.a); // igranje z barvami
	
	
}"

[sub_resource type="ShaderMaterial" id=10]
shader = SubResource( 12 )
shader_param/intensity = 1.0
shader_param/layers = 4.0
shader_param/speed = 4.0

[sub_resource type="Shader" id=26]
code = "shader_type canvas_item;
render_mode blend_mix ;

uniform float intensity = 0.5f;
uniform float layers = 5.0f;
uniform float speed = 4.0f;

float gradient(vec2 uv){
	
	// čekiramo razdaljo od centra sprajta do koordinate trenutne pike
	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f))); // nastane krog, ker je razdalja od centra konstantna
}

vec4 colorize (float col, float a) {
	
	vec4 pallete;
	
//	// grayscale
//	pallete = vec4(col, col, col, a);  // col je podan red kanal

//	// monochrome
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.g = float(col >= 0.0f); // en kanal setamo, da je ves čas 0, razen ko je poln (? ... full je white?)
	
//	// darken vse kar ni belo
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.g = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.b = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
	
//	// raznobarvno
	pallete = vec4(col, col, col, a);  // col je podan red kanal
	pallete.r = float(col > 0.3 && col < 0.7 || col > 0.9); 
	pallete.g = float(col > 0.7); // višja vrednost od dveh ...?
	pallete.b = float(col > 0.5 || col > 0.9); // višja vrednost od dveh ...?
	
//	// ta bi bila za ščit
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.g = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.3); // višja vrednost od dveh ...?
	
	return pallete; // ta vrednost gre v barvo
}


void fragment(){
	vec4 bg = texture(TEXTURE, UV - TIME/speed); // tukjaj je že notri premikanje
	
	COLOR = bg;
	COLOR.r = gradient(UV); // red kanal damo rezultat gradient funkcije 
	
	// množimo oz. združimo red channel z intensity in teksturo noisa
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10.0f, 0.0f, 1.0f); // klempam, da ne gre pod nulo in ne nad ena (ker je to barvni kanal)
	//	current color * intensity
	COLOR.r = floor(COLOR.r * layers) / layers; // floor ... zaokrožimo zato, ker ker je št. lejerja zmeraj cela številka ... delimo z lejerji, da je vsak lejer na 0.2 vrednosti
	COLOR.a = float(COLOR.r > 0.0f); // ?
	
	COLOR = colorize(COLOR.r, COLOR.a); // igranje z barvami
	
	
}"

[sub_resource type="ShaderMaterial" id=16]
shader = SubResource( 26 )
shader_param/intensity = 1.0
shader_param/layers = 4.0
shader_param/speed = 4.0

[sub_resource type="Shader" id=17]
code = "shader_type canvas_item;
render_mode blend_mix ;

uniform float intensity = 0.5f;
uniform float layers = 5.0f;
uniform float speed = 4.0f;

float gradient(vec2 uv){
	
	// čekiramo razdaljo od centra sprajta do koordinate trenutne pike
	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f))); // nastane krog, ker je razdalja od centra konstantna
}

vec4 colorize (float col, float a) {
	
	vec4 pallete;
	
//	// grayscale
//	pallete = vec4(col, col, col, a);  // col je podan red kanal

//	// monochrome
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.g = float(col >= 0.0f); // en kanal setamo, da je ves čas 0, razen ko je poln (? ... full je white?)
	
//	// darken vse kar ni belo
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.g = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.b = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
	
//	// raznobarvno
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3 && col < 0.7 || col > 0.9); 
//	pallete.g = float(col > 0.7); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.5 || col > 0.9); // višja vrednost od dveh ...?
	
//	// ta bi bila za ščit
	pallete = vec4(col, col, col, a);  // col je podan red kanal
	pallete.r = float(col > 0.3); // višja vrednost od dveh ...?
	pallete.g = float(col > 0.3); // višja vrednost od dveh ...?
	pallete.b = float(col > 0.3); // višja vrednost od dveh ...?
	
	return pallete; // ta vrednost gre v barvo
}


void fragment(){
	vec4 bg = texture(TEXTURE, UV - TIME/speed); // tukjaj je že notri premikanje
	
	COLOR = bg;
	COLOR.r = gradient(UV); // red kanal damo rezultat gradient funkcije 
	
	// množimo oz. združimo red channel z intensity in teksturo noisa
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10.0f, 0.0f, 1.0f); // klempam, da ne gre pod nulo in ne nad ena (ker je to barvni kanal)
	//	current color * intensity
	COLOR.r = floor(COLOR.r * layers) / layers; // floor ... zaokrožimo zato, ker ker je št. lejerja zmeraj cela številka ... delimo z lejerji, da je vsak lejer na 0.2 vrednosti
	COLOR.a = float(COLOR.r > 0.0f); // ?
	
	COLOR = colorize(COLOR.r, COLOR.a); // igranje z barvami
	
	
}"

[sub_resource type="ShaderMaterial" id=18]
shader = SubResource( 17 )
shader_param/intensity = 1.0
shader_param/layers = 4.0
shader_param/speed = 4.0

[sub_resource type="Shader" id=21]
code = "shader_type canvas_item;
render_mode blend_mix ;

uniform float intensity = 0.5f;
uniform float layers = 5.0f;
uniform float speed = 4.0f;

float gradient(vec2 uv){
	
	// čekiramo razdaljo od centra sprajta do koordinate trenutne pike
//	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f))); // nastane krog, ker je razdalja od centra konstantna
	return (0.5f - distance(vec2(0.0f, uv.y), vec2(0.0f, 0.5f))); // gradient from top to bottom, focus middle
//	return (1.0f - distance(vec2(0.0f, uv.y), vec2(0.0f, 0.0f))); // gradient from top
//	return (1.0f - distance(vec2(0.0f, uv.y), vec2(0.0f, 0.0f))); // gradient from bottom
}

vec4 colorize (float col, float a) {
	
	vec4 pallete;
	
//	// grayscale
//	pallete = vec4(col, col, col, a);  // col je podan red kanal

//	// monochrome
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.g = float(col >= 0.0f); // en kanal setamo, da je ves čas 0, razen ko je poln (? ... full je white?)
	
//	// darken vse kar ni belo
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.g = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.b = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
	
//	// raznobarvno
	pallete = vec4(col, col, col, a);  // col je podan red kanal
	pallete.r = float(col > 0.3 && col < 0.7 || col > 0.9); 
	pallete.g = float(col > 0.7); // višja vrednost od dveh ...?
	pallete.b = float(col > 0.5 || col > 0.9); // višja vrednost od dveh ...?
	
//	// ta bi bila za ščit
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.g = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.3); // višja vrednost od dveh ...?
	
	return pallete; // ta vrednost gre v barvo
}


void fragment(){
	vec4 bg = texture(TEXTURE, UV - TIME/speed); // tukjaj je že notri premikanje
	
	COLOR = bg;
	COLOR.r = gradient(UV); // red kanal damo rezultat gradient funkcije 
	
	// množimo oz. združimo red channel z intensity in teksturo noisa
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10.0f, 0.0f, 1.0f); // klempam, da ne gre pod nulo in ne nad ena (ker je to barvni kanal)
	//	current color * intensity
	COLOR.r = floor(COLOR.r * layers) / layers; // floor ... zaokrožimo zato, ker ker je št. lejerja zmeraj cela številka ... delimo z lejerji, da je vsak lejer na 0.2 vrednosti
	COLOR.a = float(COLOR.r > 0.0f); // ?
	
	COLOR = colorize(COLOR.r, COLOR.a); // igranje z barvami
	
	
}"

[sub_resource type="ShaderMaterial" id=22]
shader = SubResource( 21 )
shader_param/intensity = 1.0
shader_param/layers = 4.0
shader_param/speed = 4.0

[sub_resource type="Shader" id=23]
code = "shader_type canvas_item;
render_mode blend_mix ;

uniform float intensity = 0.5f;
uniform float layers = 5.0f;
uniform float speed = 4.0f;

float gradient(vec2 uv){
	
	// čekiramo razdaljo od centra sprajta do koordinate trenutne pike
//	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f))); // nastane krog, ker je razdalja od centra konstantna
//	return (0.5f - distance(vec2(0.0f, uv.y), vec2(0.0f, 0.5f))); // gradient from top to bottom, focus middle
	return (1.0f - distance(vec2(0.0f, uv.y), vec2(0.0f, 1.0f))); // gradient from top
//	return (1.0f - distance(vec2(0.0f, uv.y), vec2(0.0f, 0.0f))); // gradient from bottom
}

vec4 colorize (float col, float a) {
	
	vec4 pallete;
	
//	// grayscale
//	pallete = vec4(col, col, col, a);  // col je podan red kanal

//	// monochrome
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.g = float(col >= 0.0f); // en kanal setamo, da je ves čas 0, razen ko je poln (? ... full je white?)
	
//	// darken vse kar ni belo
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.g = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.b = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
	
//	// raznobarvno
	pallete = vec4(col, col, col, a);  // col je podan red kanal
	pallete.r = float(col > 0.3 && col < 0.7 || col > 0.9); 
	pallete.g = float(col > 0.7); // višja vrednost od dveh ...?
	pallete.b = float(col > 0.5 || col > 0.9); // višja vrednost od dveh ...?
	
//	// ta bi bila za ščit
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.g = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.3); // višja vrednost od dveh ...?
	
	return pallete; // ta vrednost gre v barvo
}


void fragment(){
	vec4 bg = texture(TEXTURE, UV - TIME/speed); // tukjaj je že notri premikanje
	
	COLOR = bg;
	COLOR.r = gradient(UV); // red kanal damo rezultat gradient funkcije 
	
	// množimo oz. združimo red channel z intensity in teksturo noisa
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10.0f, 0.0f, 1.0f); // klempam, da ne gre pod nulo in ne nad ena (ker je to barvni kanal)
	//	current color * intensity
	COLOR.r = floor(COLOR.r * layers) / layers; // floor ... zaokrožimo zato, ker ker je št. lejerja zmeraj cela številka ... delimo z lejerji, da je vsak lejer na 0.2 vrednosti
	COLOR.a = float(COLOR.r > 0.0f); // ?
	
	COLOR = colorize(COLOR.r, COLOR.a); // igranje z barvami
	
	
}"

[sub_resource type="ShaderMaterial" id=24]
shader = SubResource( 23 )
shader_param/intensity = 1.0
shader_param/layers = 4.0
shader_param/speed = 4.0

[sub_resource type="Shader" id=19]
code = "shader_type canvas_item;
render_mode blend_mix ;

uniform float intensity = 0.5f;
uniform float layers = 5.0f;
uniform float speed = 4.0f;

float gradient(vec2 uv){
	
	// čekiramo razdaljo od centra sprajta do koordinate trenutne pike
//	return (0.5f - distance(vec2(uv.x, uv.y), vec2(0.5f, 0.5f))); // nastane krog, ker je razdalja od centra konstantna
//	return (0.5f - distance(vec2(0.0f, uv.y), vec2(0.0f, 0.5f))); // gradient from top to bottom, focus middle
//	return (1.0f - distance(vec2(0.0f, uv.y), vec2(0.0f, 0.0f))); // gradient from top
	return (1.0f - distance(vec2(0.0f, uv.y), vec2(0.0f, 0.0f))); // gradient from bottom
}

vec4 colorize (float col, float a) {
	
	vec4 pallete;
	
//	// grayscale
//	pallete = vec4(col, col, col, a);  // col je podan red kanal

//	// monochrome
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.g = float(col >= 0.0f); // en kanal setamo, da je ves čas 0, razen ko je poln (? ... full je white?)
	
//	// darken vse kar ni belo
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.g = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
//	pallete.b = max(float(col >= 1.0f), col / 3.0f); // višja vrednost od dveh ...?
	
//	// raznobarvno
	pallete = vec4(col, col, col, a);  // col je podan red kanal
	pallete.r = float(col > 0.3 && col < 0.7 || col > 0.9); 
	pallete.g = float(col > 0.7); // višja vrednost od dveh ...?
	pallete.b = float(col > 0.5 || col > 0.9); // višja vrednost od dveh ...?
	
//	// ta bi bila za ščit
//	pallete = vec4(col, col, col, a);  // col je podan red kanal
//	pallete.r = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.g = float(col > 0.3); // višja vrednost od dveh ...?
//	pallete.b = float(col > 0.3); // višja vrednost od dveh ...?
	
	return pallete; // ta vrednost gre v barvo
}


void fragment(){
	vec4 bg = texture(TEXTURE, UV - TIME/speed); // tukjaj je že notri premikanje
	
	COLOR = bg;
	COLOR.r = gradient(UV); // red kanal damo rezultat gradient funkcije 
	
	// množimo oz. združimo red channel z intensity in teksturo noisa
	COLOR.r = clamp(COLOR.r * bg.r * intensity * 10.0f, 0.0f, 1.0f); // klempam, da ne gre pod nulo in ne nad ena (ker je to barvni kanal)
	//	current color * intensity
	COLOR.r = floor(COLOR.r * layers) / layers; // floor ... zaokrožimo zato, ker ker je št. lejerja zmeraj cela številka ... delimo z lejerji, da je vsak lejer na 0.2 vrednosti
	COLOR.a = float(COLOR.r > 0.0f); // ?
	
	COLOR = colorize(COLOR.r, COLOR.a); // igranje z barvami
	
	
}"

[sub_resource type="ShaderMaterial" id=20]
shader = SubResource( 19 )
shader_param/intensity = 1.0
shader_param/layers = 4.0
shader_param/speed = 4.0

[node name="NoiseShaders" type="Node2D"]
position = Vector2( 0, 1 )

[node name="v1" type="Sprite" parent="."]
material = SubResource( 2 )
position = Vector2( 68, 106 )
texture = SubResource( 3 )

[node name="v3" type="Sprite" parent="."]
material = SubResource( 9 )
position = Vector2( 189, 104 )
texture = SubResource( 7 )

[node name="v4" type="Sprite" parent="."]
material = SubResource( 13 )
position = Vector2( 70, 172 )
texture = SubResource( 7 )

[node name="v2" type="Sprite" parent="."]
material = SubResource( 10 )
position = Vector2( 127, 106 )
texture = SubResource( 7 )

[node name="v5" type="Sprite" parent="."]
material = SubResource( 16 )
position = Vector2( 130, 172 )
texture = SubResource( 7 )

[node name="v6" type="Sprite" parent="."]
material = SubResource( 18 )
position = Vector2( 191, 172 )
texture = SubResource( 7 )

[node name="v7 hor" type="Sprite" parent="."]
material = SubResource( 22 )
position = Vector2( 71, 234 )
texture = SubResource( 7 )

[node name="v7 hor2" type="Sprite" parent="."]
material = SubResource( 24 )
position = Vector2( 132, 234 )
texture = SubResource( 7 )

[node name="v7 hor3" type="Sprite" parent="."]
material = SubResource( 20 )
position = Vector2( 194, 234 )
texture = SubResource( 7 )
