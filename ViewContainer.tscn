[gd_scene load_steps=22 format=2]

[ext_resource path="res://ViewContainer.gd" type="Script" id=1]
[ext_resource path="res://arena/Arena.tscn" type="PackedScene" id=2]
[ext_resource path="res://_obs/tuji resursi/jm_pp_outlines/post_process_outlines_2D.shader" type="Shader" id=3]
[ext_resource path="res://Camera2D.gd" type="Script" id=4]
[ext_resource path="res://resources/graphics/light.png" type="Texture" id=5]
[ext_resource path="res://resources/ViewContainer.gdshader" type="Shader" id=6]
[ext_resource path="res://resources/dropshadow.gdshader" type="Shader" id=7]
[ext_resource path="res://_obs/tuji resursi/godotea/OffsetShadow.tscn" type="PackedScene" id=8]

[sub_resource type="ShaderMaterial" id=10]
shader = ExtResource( 7 )
shader_param/radius = 14.0
shader_param/offset = Vector2( 2, 5 )
shader_param/modulate = Color( 0.294118, 0.776471, 0.254902, 1 )
shader_param/background_color = Color( 0.427451, 0.403922, 0.0823529, 1 )
shader_param/shadow_color = Color( 0.878431, 0.878431, 0.921569, 1 )
shader_param/offset_in_pixels = Vector2( 5, 5 )

[sub_resource type="ViewportTexture" id=11]
viewport_path = NodePath("Viewport")

[sub_resource type="ShaderMaterial" id=6]
shader = ExtResource( 3 )
shader_param/color_outline_scale = 50.0
shader_param/edge_threshold = 0.04
shader_param/max_edge_alpha = 0.8
shader_param/edge_alpha_multiplier = 3.0
shader_param/edge_color = Color( 0, 0, 0, 1 )
shader_param/color_use_laplace = false
shader_param/use_bg_texture = false

[sub_resource type="ShaderMaterial" id=7]
shader = ExtResource( 6 )
shader_param/line_color = Color( 0.207843, 0.145098, 0.145098, 1 )
shader_param/line_thickness = 9.647

[sub_resource type="ShaderMaterial" id=16]
shader = ExtResource( 3 )
shader_param/color_outline_scale = 20.0
shader_param/edge_threshold = 1.0
shader_param/max_edge_alpha = 1.0
shader_param/edge_alpha_multiplier = 3.0
shader_param/edge_color = Color( 0.282353, 0.282353, 0.282353, 1 )
shader_param/color_use_laplace = false
shader_param/use_bg_texture = false

[sub_resource type="ViewportTexture" id=15]
viewport_path = NodePath("Viewport")

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;
uniform sampler2D Colormap : hint_albedo;

void fragment() {
// Get the fragment location
	vec3 location = vec3(UV, 0.0);

// Get the colors from the image at specified location
	vec3 colorIn;
	float alphaIn;
	{
		vec4 TEXTURE_tex_read = texture(TEXTURE, location.xy);
		colorIn = TEXTURE_tex_read.rgb;
		alphaIn = TEXTURE_tex_read.a;
	}

// get the greyscale value through the highest of r, g, and b
	float grey;
	{
		vec3 c = colorIn;
		float max1 = max(c.r, c.g);
		float max2 = max(max1, c.b);
		grey = max2;
	}

// Read the colormap and use the greyscale value to map in the new color.
	vec3 colorOut;
	float alphaOut;
	{
		vec4 n_tex_read = texture(Colormap, vec2(grey, 0.0));
		colorOut = n_tex_read.rgb;
		alphaOut = n_tex_read.a;
	}

// Profit.
	COLOR.rgb = colorOut;
	COLOR.a = alphaIn;

}"

[sub_resource type="Gradient" id=3]
offsets = PoolRealArray( 0, 0.381423, 0.648221, 1 )
colors = PoolColorArray( 0, 0, 0, 1, 0.291824, 0.917969, 0.139847, 1, 0.797585, 0.797585, 0.797585, 1, 1, 0.0078125, 0.0078125, 1 )

[sub_resource type="GradientTexture" id=8]
gradient = SubResource( 3 )

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 5 )
shader_param/Colormap = SubResource( 8 )

[sub_resource type="Shader" id=12]
code = "shader_type canvas_item;
render_mode unshaded;

uniform int intensity = 50;
uniform float precision : hint_range(0,0.02);
uniform bool flipColors;		//Flip coloring 90 degrees.

//If not using a texture, will blend between these two colors
uniform vec4 outline_color : hint_color;
uniform vec4 outline_color_2 : hint_color;

uniform bool use_outline_uv;	//Use the outline_uv for coloring or not. Recomended not, but sometimes might be good.

uniform bool useTexture;		//Use a texture for the coloring
uniform sampler2D outlineTexture;	//This is the texture that will be used for coloring. Recomended to use a gradient texture, but I guess anything else works.

varying vec2 o;
varying vec2 f;

void vertex()
{
	//Expands the vertexes so we have space to draw the outline if we were on the edge.
	o = VERTEX;
	vec2 uv = (UV - 0.5);
	VERTEX += UV * float(intensity);
	f = VERTEX;
}

void fragment()
{
	ivec2 t = textureSize(TEXTURE, 0);
	vec2 regular_uv;
	regular_uv.x = UV.x + (f.x - o.x)/float(t.x);
	regular_uv.y = UV.y + (f.y - o.y)/float(t.y);
	
	vec4 regular_color = texture(TEXTURE, regular_uv);
	
	// pixli znotraj okvira in prosojni so brez roba
	if((regular_uv.x < 0.0 || regular_uv.x > 1.0) || (regular_uv.y < 0.0 || regular_uv.y > 1.0) || regular_color.a <=0.25){
		regular_color = vec4(0.0); 
	}
	
	vec2 ps = TEXTURE_PIXEL_SIZE * float(intensity) * precision;
	
	vec4 final_color = regular_color;
	
	// transparentni pixli
	if (regular_color.a <= 0.0)
	{
		for(int x = -1; x <= 1; x += 1){
			for(int y = -1; y <= 1; y += 1){
				
				//Get the X and Y offset from this
				if (x==0 && y==0)
					continue;
					
				vec2 outline_uv = regular_uv + vec2(float(x) * ps.x, float(y) * ps.y); 
				
				//Sample here, if we are out of bounds then fail
				vec4 outline_sample = texture(TEXTURE, UV);
				
//				if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
//					//We aren't a real color
//					outline_sample = vec4(0);
//				}
				
				vec2 final_uv = use_outline_uv ? outline_uv : UV;	//get the UV we will be using, controlled via use_outline_uv
				
				
				
				
				//Is our sample empty? Is there something nearby?
				if(outline_sample.a > final_color.a){
					if(!useTexture)	//If we're not using a texture
					{
						final_color = mix(outline_color, outline_color_2, 1.0);
					}
					else // uporaba texture
					{
						vec2 uv = flipColors ? vec2(final_uv.y, final_uv.x) : final_uv;
						vec4 outline = texture(outlineTexture, uv);
						
						final_color = outline;
					}
				}
			}
		}
	}
	COLOR = final_color; 
}"

[sub_resource type="ShaderMaterial" id=13]
shader = SubResource( 12 )
shader_param/intensity = 1000
shader_param/precision = 0.02
shader_param/flipColors = null
shader_param/outline_color = Color( 1, 0, 0, 1 )
shader_param/outline_color_2 = Color( 0.152114, 0.709804, 0.054902, 1 )
shader_param/use_outline_uv = null
shader_param/useTexture = null

[sub_resource type="ViewportTexture" id=14]
viewport_path = NodePath("Viewport")

[node name="ViewContainer" type="ViewportContainer"]
margin_right = 640.0
margin_bottom = 360.0
rect_min_size = Vector2( 640, 360 )
size_flags_horizontal = 0
size_flags_vertical = 0
stretch = true
script = ExtResource( 1 )

[node name="Camera2D" type="Camera2D" parent="."]
position = Vector2( 734, -3 )
anchor_mode = 0
current = true
script = ExtResource( 4 )

[node name="ViewportShader_iz_outlinerja" type="Sprite" parent="."]
visible = false
material = SubResource( 10 )
position = Vector2( 318, 183 )
scale = Vector2( 1, -1 )
z_index = 4
texture = SubResource( 11 )

[node name="ViewportShader_outlinr" type="Sprite" parent="."]
material = SubResource( 6 )
position = Vector2( 1058, 183 )
z_index = 1
texture = SubResource( 11 )

[node name="ViewportShader_drop" type="Sprite" parent="."]
visible = false
material = SubResource( 7 )
position = Vector2( 320, 179 )
texture = SubResource( 11 )

[node name="Light2D" type="Light2D" parent="."]
visible = false
position = Vector2( 465.75, 203.75 )
scale = Vector2( 1.38112, 1.4021 )
z_index = -6
z_as_relative = false
texture = ExtResource( 5 )

[node name="OffsetShadow2" parent="." instance=ExtResource( 8 )]
visible = false
material = SubResource( 16 )
position = Vector2( 1054.91, 178.625 )
scale = Vector2( 1.00341, -1.00208 )
z_index = 3
texture = SubResource( 15 )

[node name="Viewport" type="Viewport" parent="."]
size = Vector2( 640, 360 )
handle_input_locally = false
debug_draw = 2
render_target_update_mode = 3

[node name="Arena" parent="Viewport" instance=ExtResource( 2 )]
material = SubResource( 2 )

[node name="OffsetShadow" parent="." instance=ExtResource( 8 )]
visible = false
position = Vector2( 706.379, 216.671 )
scale = Vector2( 0.366105, 0.341564 )

[node name="OffsetShadow3" parent="." instance=ExtResource( 8 )]
visible = false
material = SubResource( 13 )
position = Vector2( 867.889, 330.052 )
scale = Vector2( 0.34568, 0.322514 )
texture = SubResource( 14 )
